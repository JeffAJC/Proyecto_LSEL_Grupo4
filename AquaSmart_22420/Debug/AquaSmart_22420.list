
AquaSmart_22420.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800c580  0800c580  0001c580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c708  0800c708  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  0800c708  0800c708  0001c708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c710  0800c710  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c710  0800c710  0001c710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c714  0800c714  0001c714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0800c718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000526c  20000134  0800c84c  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200053a0  0800c84c  000253a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029e8d  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005428  00000000  00000000  00049ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b08  00000000  00000000  0004f420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018d0  00000000  00000000  00050f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028288  00000000  00000000  000527f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b9b6  00000000  00000000  0007aa80  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9f93  00000000  00000000  00096436  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001703c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007144  00000000  00000000  00170444  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000134 	.word	0x20000134
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c568 	.word	0x0800c568

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000138 	.word	0x20000138
 80001cc:	0800c568 	.word	0x0800c568

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <send_data>:
//{
//	return(HAL_GetTick() >= +LoRa_timer);
//}

void send_data(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
	 sensor_buf_t data;

	 data = ringbuf_get(&data_ring_buff);
 80004d6:	463b      	mov	r3, r7
 80004d8:	4903      	ldr	r1, [pc, #12]	; (80004e8 <send_data+0x18>)
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 ffb6 	bl	800144c <ringbuf_get>
	 /*
	  *
	  * LORA COMM.
	  *
	  * */
}
 80004e0:	bf00      	nop
 80004e2:	3720      	adds	r7, #32
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20004a80 	.word	0x20004a80

080004ec <LoRa_initialization>:
//	  {-1, NULL, -1, NULL },
//};

//fsm_t* LoRa_initialization(uint16_t period)
void LoRa_initialization(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
//	fsm_t* fsm_LoRa;
	ringbuf_init(&data_ring_buff, RBUF_SIZE);
 80004f0:	2103      	movs	r1, #3
 80004f2:	4802      	ldr	r0, [pc, #8]	; (80004fc <LoRa_initialization+0x10>)
 80004f4:	f000 ff4d 	bl	8001392 <ringbuf_init>
//	fsm_LoRa = fsm_new(send_wireless);
//	LoRa_timer = HAL_GetTick() + period;
//	LoRa_period = period;

//	return fsm_LoRa;
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20004a80 	.word	0x20004a80

08000500 <save_new_data>:

void save_new_data(sensor_buf_t data)
{
 8000500:	b084      	sub	sp, #16
 8000502:	b5b0      	push	{r4, r5, r7, lr}
 8000504:	b086      	sub	sp, #24
 8000506:	af06      	add	r7, sp, #24
 8000508:	f107 0410 	add.w	r4, r7, #16
 800050c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ringbuf_put(&data_ring_buff, data);
 8000510:	466d      	mov	r5, sp
 8000512:	f107 041c 	add.w	r4, r7, #28
 8000516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800051a:	6823      	ldr	r3, [r4, #0]
 800051c:	602b      	str	r3, [r5, #0]
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000524:	4804      	ldr	r0, [pc, #16]	; (8000538 <save_new_data+0x38>)
 8000526:	f000 ff51 	bl	80013cc <ringbuf_put>
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000532:	b004      	add	sp, #16
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20004a80 	.word	0x20004a80

0800053c <PreSleepProcessing>:
void PreSleepProcessing(uint32_t *ulExpectedIdleTime);
void PostSleepProcessing(uint32_t *ulExpectedIdleTime);

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
/* place for user code */ 
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <fsm_init>:
  fsm_init (this, tt);
  return this;
}

void fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	683a      	ldr	r2, [r7, #0]
 8000572:	605a      	str	r2, [r3, #4]
  this->current_state = tt->orig_state;
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	601a      	str	r2, [r3, #0]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <fsm_fire>:

void fsm_fire (fsm_t* this)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	e01c      	b.n	80005d2 <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d113      	bne.n	80005cc <fsm_fire+0x44>
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	4798      	blx	r3
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d00c      	beq.n	80005cc <fsm_fire+0x44>
      this->current_state = t->dest_state;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	689a      	ldr	r2, [r3, #8]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	601a      	str	r2, [r3, #0]
      if (t->out)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d00c      	beq.n	80005dc <fsm_fire+0x54>
        t->out(this);
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	4798      	blx	r3
      break;
 80005ca:	e007      	b.n	80005dc <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	3310      	adds	r3, #16
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	dade      	bge.n	8000598 <fsm_fire+0x10>
    }
  }
}
 80005da:	e000      	b.n	80005de <fsm_fire+0x56>
      break;
 80005dc:	bf00      	nop
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <data_saved>:
	  Saving,
	  Sleeping,
	  Setup
}sensor_state;

int data_saved(fsm_t* this){ return 1; }
 80005e6:	b480      	push	{r7}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <error>:

int error (fsm_t* this) {
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	60bb      	str	r3, [r7, #8]
	if (config->data_average <= 0 || config->data_average > config->threshold_Max)
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	889b      	ldrh	r3, [r3, #4]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d005      	beq.n	8000622 <error+0x26>
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	889a      	ldrh	r2, [r3, #4]
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800061e:	429a      	cmp	r2, r3
 8000620:	d901      	bls.n	8000626 <error+0x2a>
		return 1;
 8000622:	2301      	movs	r3, #1
 8000624:	e000      	b.n	8000628 <error+0x2c>
	else return 0;
 8000626:	2300      	movs	r3, #0
}
 8000628:	4618      	mov	r0, r3
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <no_error>:

int no_error (fsm_t* this) {
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	60bb      	str	r3, [r7, #8]
	if (config->data_average > 0 && config->data_average <= config->threshold_Max)
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	889b      	ldrh	r3, [r3, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d007      	beq.n	800065e <no_error+0x2a>
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	889a      	ldrh	r2, [r3, #4]
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000656:	429a      	cmp	r2, r3
 8000658:	d801      	bhi.n	800065e <no_error+0x2a>
		return 1;
 800065a:	2301      	movs	r3, #1
 800065c:	e000      	b.n	8000660 <no_error+0x2c>
	else return 0;
 800065e:	2300      	movs	r3, #0
}
 8000660:	4618      	mov	r0, r3
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <timer_sleep>:

int timer_sleep (fsm_t* this) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	60bb      	str	r3, [r7, #8]
	if(config->active && HAL_GetTick()>=config->sleep_timer) return 1;
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d008      	beq.n	8000698 <timer_sleep+0x2c>
 8000686:	f001 f9b7 	bl	80019f8 <HAL_GetTick>
 800068a:	4602      	mov	r2, r0
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	429a      	cmp	r2, r3
 8000692:	d301      	bcc.n	8000698 <timer_sleep+0x2c>
 8000694:	2301      	movs	r3, #1
 8000696:	e000      	b.n	800069a <timer_sleep+0x2e>
	else return 0;
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <timer_setup>:

int timer_setup (fsm_t* this) {
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b084      	sub	sp, #16
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	60bb      	str	r3, [r7, #8]
	return (HAL_GetTick()>config->setup_timer);
 80006b4:	f001 f9a0 	bl	80019f8 <HAL_GetTick>
 80006b8:	4602      	mov	r2, r0
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	429a      	cmp	r2, r3
 80006c0:	bf8c      	ite	hi
 80006c2:	2301      	movhi	r3, #1
 80006c4:	2300      	movls	r3, #0
 80006c6:	b2db      	uxtb	r3, r3
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <warned>:

int warned (fsm_t* this) {
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	60bb      	str	r3, [r7, #8]
	return (config->warning_count < 2);
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	bfd4      	ite	le
 80006ea:	2301      	movle	r3, #1
 80006ec:	2300      	movgt	r3, #0
 80006ee:	b2db      	uxtb	r3, r3
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <contador>:

int contador (fsm_t* this) {
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	60bb      	str	r3, [r7, #8]
	if(config->measure_count>=(config->measure_average))
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	7f1b      	ldrb	r3, [r3, #28]
 8000712:	b29a      	uxth	r2, r3
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000718:	429a      	cmp	r2, r3
 800071a:	d301      	bcc.n	8000720 <contador+0x24>
		return 1;
 800071c:	2301      	movs	r3, #1
 800071e:	e000      	b.n	8000722 <contador+0x26>
	else return 0;
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <timer_measure>:


int timer_measure (fsm_t* this) {
 800072e:	b580      	push	{r7, lr}
 8000730:	b086      	sub	sp, #24
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
	long debug = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	613b      	str	r3, [r7, #16]
	sensor_t* config = punt->param;
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	689b      	ldr	r3, [r3, #8]
 8000742:	60fb      	str	r3, [r7, #12]

	debug = HAL_GetTick();
 8000744:	f001 f958 	bl	80019f8 <HAL_GetTick>
 8000748:	4603      	mov	r3, r0
 800074a:	617b      	str	r3, [r7, #20]
	if(config->measure_count>=(config->measure_average))
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	7f1b      	ldrb	r3, [r3, #28]
 8000750:	b29a      	uxth	r2, r3
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000756:	429a      	cmp	r2, r3
 8000758:	d301      	bcc.n	800075e <timer_measure+0x30>
	return 0;
 800075a:	2300      	movs	r3, #0
 800075c:	e009      	b.n	8000772 <timer_measure+0x44>
	else return (HAL_GetTick()>=(config->measure_timer));
 800075e:	f001 f94b 	bl	80019f8 <HAL_GetTick>
 8000762:	4602      	mov	r2, r0
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	429a      	cmp	r2, r3
 800076a:	bf2c      	ite	cs
 800076c:	2301      	movcs	r3, #1
 800076e:	2300      	movcc	r3, #0
 8000770:	b2db      	uxtb	r3, r3
}
 8000772:	4618      	mov	r0, r3
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <warning_limit>:

int warning_limit (fsm_t* this) {
 800077a:	b480      	push	{r7}
 800077c:	b085      	sub	sp, #20
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	60bb      	str	r3, [r7, #8]
	return(config->warning_count >= 2);
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	2b01      	cmp	r3, #1
 8000792:	bfcc      	ite	gt
 8000794:	2301      	movgt	r3, #1
 8000796:	2300      	movle	r3, #0
 8000798:	b2db      	uxtb	r3, r3
}
 800079a:	4618      	mov	r0, r3
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <measuring>:

void measuring (fsm_t* this) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	uint16_t data=0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	82fb      	strh	r3, [r7, #22]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	613b      	str	r3, [r7, #16]
	sensor_t* config = punt->param;
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	60fb      	str	r3, [r7, #12]

	if(config->adc_channel == 1)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d105      	bne.n	80007d4 <measuring+0x2c>
	{
		data = HAL_ADC_GetValue(&hadc1);
 80007c8:	4812      	ldr	r0, [pc, #72]	; (8000814 <measuring+0x6c>)
 80007ca:	f001 fa80 	bl	8001cce <HAL_ADC_GetValue>
 80007ce:	4603      	mov	r3, r0
 80007d0:	82fb      	strh	r3, [r7, #22]
 80007d2:	e004      	b.n	80007de <measuring+0x36>
	}
	else data = HAL_ADC_GetValue(&hadc2);
 80007d4:	4810      	ldr	r0, [pc, #64]	; (8000818 <measuring+0x70>)
 80007d6:	f001 fa7a 	bl	8001cce <HAL_ADC_GetValue>
 80007da:	4603      	mov	r3, r0
 80007dc:	82fb      	strh	r3, [r7, #22]

	config->data_recovered = config->data_recovered + data;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	885a      	ldrh	r2, [r3, #2]
 80007e2:	8afb      	ldrh	r3, [r7, #22]
 80007e4:	4413      	add	r3, r2
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	805a      	strh	r2, [r3, #2]
	config->measure_count = config->measure_count +1;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	7f1b      	ldrb	r3, [r3, #28]
 80007f0:	3301      	adds	r3, #1
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	771a      	strb	r2, [r3, #28]
	config->measure_timer = HAL_GetTick()+ config->measure_period;
 80007f8:	f001 f8fe 	bl	80019f8 <HAL_GetTick>
 80007fc:	4602      	mov	r2, r0
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000802:	4413      	add	r3, r2
 8000804:	461a      	mov	r2, r3
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	619a      	str	r2, [r3, #24]
}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20004b34 	.word	0x20004b34
 8000818:	20004aec 	.word	0x20004aec

0800081c <process_data>:

void process_data (fsm_t* this) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	60bb      	str	r3, [r7, #8]
	config->data_average = config->data_recovered/config->measure_count;
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	885b      	ldrh	r3, [r3, #2]
 8000832:	461a      	mov	r2, r3
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	7f1b      	ldrb	r3, [r3, #28]
 8000838:	fb92 f3f3 	sdiv	r3, r2, r3
 800083c:	b29a      	uxth	r2, r3
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	809a      	strh	r2, [r3, #4]

	if(config->adc_channel == 1)	HAL_ADC_Stop(&hadc1);
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000848:	2b01      	cmp	r3, #1
 800084a:	d103      	bne.n	8000854 <process_data+0x38>
 800084c:	480e      	ldr	r0, [pc, #56]	; (8000888 <process_data+0x6c>)
 800084e:	f001 fa0b 	bl	8001c68 <HAL_ADC_Stop>
 8000852:	e002      	b.n	800085a <process_data+0x3e>
	else HAL_ADC_Stop(&hadc2);
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <process_data+0x70>)
 8000856:	f001 fa07 	bl	8001c68 <HAL_ADC_Stop>

	if (config->data_average <= config->threshold_H && config->data_average >= config->threshold_L)
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	889a      	ldrh	r2, [r3, #4]
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000862:	429a      	cmp	r2, r3
 8000864:	d809      	bhi.n	800087a <process_data+0x5e>
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	889a      	ldrh	r2, [r3, #4]
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800086e:	429a      	cmp	r2, r3
 8000870:	d303      	bcc.n	800087a <process_data+0x5e>
	{
		config->alarm = FALSE;
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	2200      	movs	r2, #0
 8000876:	719a      	strb	r2, [r3, #6]
 8000878:	e002      	b.n	8000880 <process_data+0x64>
	}
	else
	{
		config->alarm = TRUE;
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	2201      	movs	r2, #1
 800087e:	719a      	strb	r2, [r3, #6]
	}

}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20004b34 	.word	0x20004b34
 800088c:	20004aec 	.word	0x20004aec

08000890 <alert>:
void alert (fsm_t* this) {
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	60bb      	str	r3, [r7, #8]
	config->warning_count = config->warning_count +1;
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	615a      	str	r2, [r3, #20]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <sleep>:

void sleep (fsm_t* this) { // led orange
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	60bb      	str	r3, [r7, #8]
	config->sleep_timer = HAL_GetTick()+config->sleep_period;
 80008ca:	f001 f895 	bl	80019f8 <HAL_GetTick>
 80008ce:	4602      	mov	r2, r0
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80008d4:	4413      	add	r3, r2
 80008d6:	461a      	mov	r2, r3
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, RESET);
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	8c1b      	ldrh	r3, [r3, #32]
 80008e0:	2200      	movs	r2, #0
 80008e2:	4619      	mov	r1, r3
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <sleep+0x5c>)
 80008e6:	f001 fec9 	bl	800267c <HAL_GPIO_WritePin>

	config->sleeping = TRUE;
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	2201      	movs	r2, #1
 80008ee:	725a      	strb	r2, [r3, #9]
	config->measuring = FALSE;
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	2200      	movs	r2, #0
 80008f4:	721a      	strb	r2, [r3, #8]

	if(config->warning_count >= 2)
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	dd03      	ble.n	8000906 <sleep+0x4e>
	{
		config->error = TRUE;
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2201      	movs	r2, #1
 8000902:	71da      	strb	r2, [r3, #7]
	}
	else
	{
		config->error = FALSE;
	}
}
 8000904:	e002      	b.n	800090c <sleep+0x54>
		config->error = FALSE;
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	2200      	movs	r2, #0
 800090a:	71da      	strb	r2, [r3, #7]
}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40020c00 	.word	0x40020c00

08000918 <setting_up>:

void setting_up (fsm_t* this) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	60bb      	str	r3, [r7, #8]
	config->measure_count = 0;
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	2200      	movs	r2, #0
 800092e:	771a      	strb	r2, [r3, #28]
	config->warning_count = 0;
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
	config->data_recovered = 0;
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	2200      	movs	r2, #0
 800093a:	805a      	strh	r2, [r3, #2]
	config->data_average = 0;
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	2200      	movs	r2, #0
 8000940:	809a      	strh	r2, [r3, #4]
	config->setup_timer = HAL_GetTick() + config->setup_period;
 8000942:	f001 f859 	bl	80019f8 <HAL_GetTick>
 8000946:	4602      	mov	r2, r0
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800094c:	4413      	add	r3, r2
 800094e:	461a      	mov	r2, r3
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, SET);
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	8c1b      	ldrh	r3, [r3, #32]
 8000958:	2201      	movs	r2, #1
 800095a:	4619      	mov	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <setting_up+0x78>)
 800095e:	f001 fe8d 	bl	800267c <HAL_GPIO_WritePin>

	if (config->adc_channel == 1)	HAL_ADC_Start(&hadc1);
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000968:	2b01      	cmp	r3, #1
 800096a:	d103      	bne.n	8000974 <setting_up+0x5c>
 800096c:	4809      	ldr	r0, [pc, #36]	; (8000994 <setting_up+0x7c>)
 800096e:	f001 f8b5 	bl	8001adc <HAL_ADC_Start>
 8000972:	e002      	b.n	800097a <setting_up+0x62>
	else HAL_ADC_Start(&hadc2);
 8000974:	4808      	ldr	r0, [pc, #32]	; (8000998 <setting_up+0x80>)
 8000976:	f001 f8b1 	bl	8001adc <HAL_ADC_Start>

	config->measuring = TRUE;
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	2201      	movs	r2, #1
 800097e:	721a      	strb	r2, [r3, #8]
	config->sleeping = FALSE;
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	2200      	movs	r2, #0
 8000984:	725a      	strb	r2, [r3, #9]
}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40020c00 	.word	0x40020c00
 8000994:	20004b34 	.word	0x20004b34
 8000998:	20004aec 	.word	0x20004aec

0800099c <save_data>:

void save_data (fsm_t* this)
{
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b091      	sub	sp, #68	; 0x44
 80009a0:	af04      	add	r7, sp, #16
 80009a2:	6078      	str	r0, [r7, #4]
	sensor_buf_t data2save;

	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sensor_t* config = punt->param;
 80009a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28

	data2save.ID = config->ID;
 80009ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b0:	8bdb      	ldrh	r3, [r3, #30]
 80009b2:	813b      	strh	r3, [r7, #8]
	data2save.alarm = config->alarm;
 80009b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b6:	799b      	ldrb	r3, [r3, #6]
 80009b8:	733b      	strb	r3, [r7, #12]
	data2save.error = config->error;
 80009ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009bc:	79db      	ldrb	r3, [r3, #7]
 80009be:	737b      	strb	r3, [r7, #13]
	data2save.measure = config->data_average;
 80009c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c2:	889b      	ldrh	r3, [r3, #4]
 80009c4:	817b      	strh	r3, [r7, #10]
	data2save.threshold_H = config->threshold_H;
 80009c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80009ca:	823b      	strh	r3, [r7, #16]
	data2save.threshold_L = config->threshold_L;
 80009cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80009d0:	81fb      	strh	r3, [r7, #14]
//	data2save.timestamp =

	save_new_data(data2save);
 80009d2:	466c      	mov	r4, sp
 80009d4:	f107 0318 	add.w	r3, r7, #24
 80009d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009e4:	f7ff fd8c 	bl	8000500 <save_new_data>
}
 80009e8:	bf00      	nop
 80009ea:	3734      	adds	r7, #52	; 0x34
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd90      	pop	{r4, r7, pc}

080009f0 <fsm_sensor_init>:
  fsm_param_init (fl, param);
  return fl;
}
#endif

void fsm_sensor_init (fsm_sensor_t* f, sensor_t* c) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  fsm_init ((fsm_t*)f, trans_sensor);
 80009fa:	4905      	ldr	r1, [pc, #20]	; (8000a10 <fsm_sensor_init+0x20>)
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff fdb1 	bl	8000564 <fsm_init>
  f->param = c;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	609a      	str	r2, [r3, #8]
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000000 	.word	0x20000000

08000a14 <sensor_initialization>:


void sensor_initialization(sensor_t* sensor, uint16_t ID, uint16_t supply_Pin, uint8_t adc_channel, uint16_t threshold_L, uint16_t threshold_H, uint16_t threshold_Max, uint16_t setup_period, uint16_t sleep_period, uint16_t measure_period, uint16_t measure_average)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	4608      	mov	r0, r1
 8000a1e:	4611      	mov	r1, r2
 8000a20:	461a      	mov	r2, r3
 8000a22:	4603      	mov	r3, r0
 8000a24:	817b      	strh	r3, [r7, #10]
 8000a26:	460b      	mov	r3, r1
 8000a28:	813b      	strh	r3, [r7, #8]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	71fb      	strb	r3, [r7, #7]
	/*SENSOR CONTROL*/
	sensor->active = TRUE;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2201      	movs	r2, #1
 8000a32:	701a      	strb	r2, [r3, #0]
	sensor->data_recovered = 0;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2200      	movs	r2, #0
 8000a38:	805a      	strh	r2, [r3, #2]
	sensor->data_average = 0;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	809a      	strh	r2, [r3, #4]
	sensor->alarm = FALSE;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2200      	movs	r2, #0
 8000a44:	719a      	strb	r2, [r3, #6]
	sensor->error = FALSE;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	71da      	strb	r2, [r3, #7]
	sensor->measuring = FALSE;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	721a      	strb	r2, [r3, #8]
	sensor->sleeping = FALSE;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2200      	movs	r2, #0
 8000a56:	725a      	strb	r2, [r3, #9]
	sensor->setup_timer = 0;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
	sensor->sleep_timer = 0;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
	sensor->warning_count = 0;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2200      	movs	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
	sensor->measure_timer = 0;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
	sensor->measure_count = 0;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2200      	movs	r2, #0
 8000a74:	771a      	strb	r2, [r3, #28]

	/*SENSOR PARAMS*/
	sensor->ID = ID;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	897a      	ldrh	r2, [r7, #10]
 8000a7a:	83da      	strh	r2, [r3, #30]
	sensor->supply_Pin = supply_Pin;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	893a      	ldrh	r2, [r7, #8]
 8000a80:	841a      	strh	r2, [r3, #32]
	sensor->adc_channel = adc_channel;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	79fa      	ldrb	r2, [r7, #7]
 8000a86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sensor->threshold_L = threshold_L;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	8b3a      	ldrh	r2, [r7, #24]
 8000a8e:	849a      	strh	r2, [r3, #36]	; 0x24
	sensor->threshold_H = threshold_H;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	8bba      	ldrh	r2, [r7, #28]
 8000a94:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor->threshold_Max = threshold_Max;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	8c3a      	ldrh	r2, [r7, #32]
 8000a9a:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor->setup_period = setup_period;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor->sleep_period = sleep_period;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000aa6:	859a      	strh	r2, [r3, #44]	; 0x2c
	sensor->measure_period = measure_period;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000aac:	85da      	strh	r2, [r3, #46]	; 0x2e
	sensor->measure_average = measure_average;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000ab2:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac6:	f000 ff31 	bl	800192c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aca:	f000 f875 	bl	8000bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ace:	f000 fa2f 	bl	8000f30 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ad2:	f000 f999 	bl	8000e08 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000ad6:	f000 f9c5 	bl	8000e64 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000ada:	f000 f9f3 	bl	8000ec4 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000ade:	f000 f8ed 	bl	8000cbc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ae2:	f000 f93f 	bl	8000d64 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */


  LoRa_initialization();
 8000ae6:	f7ff fd01 	bl	80004ec <LoRa_initialization>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000aea:	f007 ff3f 	bl	800896c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueueSensor1 */
  myQueueSensor1Handle = osMessageQueueNew (1, sizeof(sensor_t), &myQueueSensor1_attributes);
 8000aee:	4a1f      	ldr	r2, [pc, #124]	; (8000b6c <main+0xac>)
 8000af0:	2134      	movs	r1, #52	; 0x34
 8000af2:	2001      	movs	r0, #1
 8000af4:	f008 f8e0 	bl	8008cb8 <osMessageQueueNew>
 8000af8:	4602      	mov	r2, r0
 8000afa:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <main+0xb0>)
 8000afc:	601a      	str	r2, [r3, #0]

  /* creation of myQueueSensor2 */
  myQueueSensor2Handle = osMessageQueueNew (2, sizeof(sensor_t), &myQueueSensor2_attributes);
 8000afe:	4a1d      	ldr	r2, [pc, #116]	; (8000b74 <main+0xb4>)
 8000b00:	2134      	movs	r1, #52	; 0x34
 8000b02:	2002      	movs	r0, #2
 8000b04:	f008 f8d8 	bl	8008cb8 <osMessageQueueNew>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <main+0xb8>)
 8000b0c:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b0e:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <main+0xbc>)
 8000b10:	2100      	movs	r1, #0
 8000b12:	481b      	ldr	r0, [pc, #108]	; (8000b80 <main+0xc0>)
 8000b14:	f007 ffbc 	bl	8008a90 <osThreadNew>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <main+0xc4>)
 8000b1c:	601a      	str	r2, [r3, #0]

  /* creation of myTaskSensor1 */
  myTaskSensor1Handle = osThreadNew(StartTaskSensor1, &fsm_s1, &myTaskSensor1_attributes);
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <main+0xc8>)
 8000b24:	4619      	mov	r1, r3
 8000b26:	4819      	ldr	r0, [pc, #100]	; (8000b8c <main+0xcc>)
 8000b28:	f007 ffb2 	bl	8008a90 <osThreadNew>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <main+0xd0>)
 8000b30:	601a      	str	r2, [r3, #0]

  /* creation of myTaskLoRa */
  myTaskLoRaHandle = osThreadNew(StartTaskLoRa, NULL, &myTaskLoRa_attributes);
 8000b32:	4a18      	ldr	r2, [pc, #96]	; (8000b94 <main+0xd4>)
 8000b34:	2100      	movs	r1, #0
 8000b36:	4818      	ldr	r0, [pc, #96]	; (8000b98 <main+0xd8>)
 8000b38:	f007 ffaa 	bl	8008a90 <osThreadNew>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <main+0xdc>)
 8000b40:	601a      	str	r2, [r3, #0]

  /* creation of myTaskSensor2 */
  myTaskSensor2Handle = osThreadNew(StartTaskSensor2, &fsm_s2, &myTaskSensor2_attributes);
 8000b42:	463b      	mov	r3, r7
 8000b44:	4a16      	ldr	r2, [pc, #88]	; (8000ba0 <main+0xe0>)
 8000b46:	4619      	mov	r1, r3
 8000b48:	4816      	ldr	r0, [pc, #88]	; (8000ba4 <main+0xe4>)
 8000b4a:	f007 ffa1 	bl	8008a90 <osThreadNew>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <main+0xe8>)
 8000b52:	601a      	str	r2, [r3, #0]

  /* creation of myTaskLEDs */
  myTaskLEDsHandle = osThreadNew(StartTaskLEDs, NULL, &myTaskLEDs_attributes);
 8000b54:	4a15      	ldr	r2, [pc, #84]	; (8000bac <main+0xec>)
 8000b56:	2100      	movs	r1, #0
 8000b58:	4815      	ldr	r0, [pc, #84]	; (8000bb0 <main+0xf0>)
 8000b5a:	f007 ff99 	bl	8008a90 <osThreadNew>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <main+0xf4>)
 8000b62:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b64:	f007 ff36 	bl	80089d4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <main+0xa8>
 8000b6a:	bf00      	nop
 8000b6c:	0800c6c0 	.word	0x0800c6c0
 8000b70:	20004c3c 	.word	0x20004c3c
 8000b74:	0800c6d8 	.word	0x0800c6d8
 8000b78:	20004bd8 	.word	0x20004bd8
 8000b7c:	0800c60c 	.word	0x0800c60c
 8000b80:	0800112d 	.word	0x0800112d
 8000b84:	20004b80 	.word	0x20004b80
 8000b88:	0800c630 	.word	0x0800c630
 8000b8c:	08001141 	.word	0x08001141
 8000b90:	20004bdc 	.word	0x20004bdc
 8000b94:	0800c654 	.word	0x0800c654
 8000b98:	080011c5 	.word	0x080011c5
 8000b9c:	20004b7c 	.word	0x20004b7c
 8000ba0:	0800c678 	.word	0x0800c678
 8000ba4:	080011ed 	.word	0x080011ed
 8000ba8:	20004c40 	.word	0x20004c40
 8000bac:	0800c69c 	.word	0x0800c69c
 8000bb0:	08001271 	.word	0x08001271
 8000bb4:	20004c38 	.word	0x20004c38

08000bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b098      	sub	sp, #96	; 0x60
 8000bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bc2:	2230      	movs	r2, #48	; 0x30
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f00b fc0b 	bl	800c3e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	4b31      	ldr	r3, [pc, #196]	; (8000cb4 <SystemClock_Config+0xfc>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a30      	ldr	r2, [pc, #192]	; (8000cb4 <SystemClock_Config+0xfc>)
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <SystemClock_Config+0xfc>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b2b      	ldr	r3, [pc, #172]	; (8000cb8 <SystemClock_Config+0x100>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a2a      	ldr	r2, [pc, #168]	; (8000cb8 <SystemClock_Config+0x100>)
 8000c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <SystemClock_Config+0x100>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c22:	2301      	movs	r3, #1
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c26:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c34:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c36:	2308      	movs	r3, #8
 8000c38:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c3a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c3e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c44:	2307      	movs	r3, #7
 8000c46:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f003 fff7 	bl	8004c40 <HAL_RCC_OscConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c58:	f000 fb94 	bl	8001384 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c60:	2302      	movs	r3, #2
 8000c62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	2105      	movs	r1, #5
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f004 fa50 	bl	8005120 <HAL_RCC_ClockConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c86:	f000 fb7d 	bl	8001384 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c8e:	23c0      	movs	r3, #192	; 0xc0
 8000c90:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c92:	2302      	movs	r3, #2
 8000c94:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f004 fc1e 	bl	80054dc <HAL_RCCEx_PeriphCLKConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000ca6:	f000 fb6d 	bl	8001384 <Error_Handler>
  }
}
 8000caa:	bf00      	nop
 8000cac:	3760      	adds	r7, #96	; 0x60
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40007000 	.word	0x40007000

08000cbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000cce:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <MX_ADC1_Init+0x9c>)
 8000cd0:	4a22      	ldr	r2, [pc, #136]	; (8000d5c <MX_ADC1_Init+0xa0>)
 8000cd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cd4:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <MX_ADC1_Init+0x9c>)
 8000cd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <MX_ADC1_Init+0x9c>)
 8000cde:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ce2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <MX_ADC1_Init+0x9c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cea:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <MX_ADC1_Init+0x9c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <MX_ADC1_Init+0x9c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <MX_ADC1_Init+0x9c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <MX_ADC1_Init+0x9c>)
 8000d00:	4a17      	ldr	r2, [pc, #92]	; (8000d60 <MX_ADC1_Init+0xa4>)
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_ADC1_Init+0x9c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <MX_ADC1_Init+0x9c>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_ADC1_Init+0x9c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_ADC1_Init+0x9c>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d1e:	480e      	ldr	r0, [pc, #56]	; (8000d58 <MX_ADC1_Init+0x9c>)
 8000d20:	f000 fe98 	bl	8001a54 <HAL_ADC_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000d2a:	f000 fb2b 	bl	8001384 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4806      	ldr	r0, [pc, #24]	; (8000d58 <MX_ADC1_Init+0x9c>)
 8000d40:	f000 ffd2 	bl	8001ce8 <HAL_ADC_ConfigChannel>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000d4a:	f000 fb1b 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20004b34 	.word	0x20004b34
 8000d5c:	40012000 	.word	0x40012000
 8000d60:	0f000001 	.word	0x0f000001

08000d64 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8000d76:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <MX_ADC2_Init+0x98>)
 8000d78:	4a21      	ldr	r2, [pc, #132]	; (8000e00 <MX_ADC2_Init+0x9c>)
 8000d7a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <MX_ADC2_Init+0x98>)
 8000d7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d82:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d84:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <MX_ADC2_Init+0x98>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <MX_ADC2_Init+0x98>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d90:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MX_ADC2_Init+0x98>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d96:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <MX_ADC2_Init+0x98>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MX_ADC2_Init+0x98>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MX_ADC2_Init+0x98>)
 8000da6:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <MX_ADC2_Init+0xa0>)
 8000da8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_ADC2_Init+0x98>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_ADC2_Init+0x98>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_ADC2_Init+0x98>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_ADC2_Init+0x98>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <MX_ADC2_Init+0x98>)
 8000dc6:	f000 fe45 	bl	8001a54 <HAL_ADC_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000dd0:	f000 fad8 	bl	8001384 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000de0:	463b      	mov	r3, r7
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_ADC2_Init+0x98>)
 8000de6:	f000 ff7f 	bl	8001ce8 <HAL_ADC_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000df0:	f000 fac8 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20004aec 	.word	0x20004aec
 8000e00:	40012100 	.word	0x40012100
 8000e04:	0f000001 	.word	0x0f000001

08000e08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <MX_I2C1_Init+0x50>)
 8000e0e:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <MX_I2C1_Init+0x54>)
 8000e10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_I2C1_Init+0x50>)
 8000e14:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <MX_I2C1_Init+0x58>)
 8000e16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_I2C1_Init+0x50>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_I2C1_Init+0x50>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_I2C1_Init+0x50>)
 8000e26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <MX_I2C1_Init+0x50>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_I2C1_Init+0x50>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <MX_I2C1_Init+0x50>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_I2C1_Init+0x50>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <MX_I2C1_Init+0x50>)
 8000e46:	f003 f923 	bl	8004090 <HAL_I2C_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e50:	f000 fa98 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20004b84 	.word	0x20004b84
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	000186a0 	.word	0x000186a0

08000e64 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <MX_I2S3_Init+0x54>)
 8000e6a:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <MX_I2S3_Init+0x58>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <MX_I2S3_Init+0x54>)
 8000e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e74:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <MX_I2S3_Init+0x54>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_I2S3_Init+0x54>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <MX_I2S3_Init+0x54>)
 8000e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e88:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_I2S3_Init+0x54>)
 8000e8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <MX_I2S3_Init+0x5c>)
 8000e8e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_I2S3_Init+0x54>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_I2S3_Init+0x54>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_I2S3_Init+0x54>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_I2S3_Init+0x54>)
 8000ea4:	f003 fa2c 	bl	8004300 <HAL_I2S_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000eae:	f000 fa69 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20004c44 	.word	0x20004c44
 8000ebc:	40003c00 	.word	0x40003c00
 8000ec0:	00017700 	.word	0x00017700

08000ec4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000eca:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <MX_SPI1_Init+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ed0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ed4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000f10:	220a      	movs	r2, #10
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000f16:	f004 fc1f 	bl	8005758 <HAL_SPI_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f20:	f000 fa30 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20004be0 	.word	0x20004be0
 8000f2c:	40013000 	.word	0x40013000

08000f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08c      	sub	sp, #48	; 0x30
 8000f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
 8000f4a:	4b71      	ldr	r3, [pc, #452]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a70      	ldr	r2, [pc, #448]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b6e      	ldr	r3, [pc, #440]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	61bb      	str	r3, [r7, #24]
 8000f60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	4b6a      	ldr	r3, [pc, #424]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a69      	ldr	r2, [pc, #420]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b67      	ldr	r3, [pc, #412]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	4b63      	ldr	r3, [pc, #396]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a62      	ldr	r2, [pc, #392]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b60      	ldr	r3, [pc, #384]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b5c      	ldr	r3, [pc, #368]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a5b      	ldr	r2, [pc, #364]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b59      	ldr	r3, [pc, #356]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	4b55      	ldr	r3, [pc, #340]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a54      	ldr	r2, [pc, #336]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b52      	ldr	r3, [pc, #328]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	4b4e      	ldr	r3, [pc, #312]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a4d      	ldr	r2, [pc, #308]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000fdc:	f043 0308 	orr.w	r3, r3, #8
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b4b      	ldr	r3, [pc, #300]	; (8001110 <MX_GPIO_Init+0x1e0>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0308 	and.w	r3, r3, #8
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	4848      	ldr	r0, [pc, #288]	; (8001114 <MX_GPIO_Init+0x1e4>)
 8000ff4:	f001 fb42 	bl	800267c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4846      	ldr	r0, [pc, #280]	; (8001118 <MX_GPIO_Init+0x1e8>)
 8000ffe:	f001 fb3d 	bl	800267c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001002:	2200      	movs	r2, #0
 8001004:	f24f 0116 	movw	r1, #61462	; 0xf016
 8001008:	4844      	ldr	r0, [pc, #272]	; (800111c <MX_GPIO_Init+0x1ec>)
 800100a:	f001 fb37 	bl	800267c <HAL_GPIO_WritePin>
                          |Sensor1_Supply_Pin|Sensor2_Supply_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800100e:	2308      	movs	r3, #8
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4619      	mov	r1, r3
 8001024:	483b      	ldr	r0, [pc, #236]	; (8001114 <MX_GPIO_Init+0x1e4>)
 8001026:	f001 f98f 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800102a:	2301      	movs	r3, #1
 800102c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	4835      	ldr	r0, [pc, #212]	; (8001118 <MX_GPIO_Init+0x1e8>)
 8001042:	f001 f981 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001046:	2308      	movs	r3, #8
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001056:	2305      	movs	r3, #5
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	482d      	ldr	r0, [pc, #180]	; (8001118 <MX_GPIO_Init+0x1e8>)
 8001062:	f001 f971 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001066:	2301      	movs	r3, #1
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <MX_GPIO_Init+0x1f0>)
 800106c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4619      	mov	r1, r3
 8001078:	482a      	ldr	r0, [pc, #168]	; (8001124 <MX_GPIO_Init+0x1f4>)
 800107a:	f001 f965 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800107e:	2304      	movs	r3, #4
 8001080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	4825      	ldr	r0, [pc, #148]	; (8001128 <MX_GPIO_Init+0x1f8>)
 8001092:	f001 f959 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010a8:	2305      	movs	r3, #5
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	481d      	ldr	r0, [pc, #116]	; (8001128 <MX_GPIO_Init+0x1f8>)
 80010b4:	f001 f948 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Sensor1_Supply_Pin Sensor2_Supply_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80010b8:	f24f 0316 	movw	r3, #61462	; 0xf016
 80010bc:	61fb      	str	r3, [r7, #28]
                          |Sensor1_Supply_Pin|Sensor2_Supply_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	4812      	ldr	r0, [pc, #72]	; (800111c <MX_GPIO_Init+0x1ec>)
 80010d2:	f001 f939 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010d6:	2320      	movs	r3, #32
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	4619      	mov	r1, r3
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <MX_GPIO_Init+0x1ec>)
 80010ea:	f001 f92d 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <MX_GPIO_Init+0x1f0>)
 80010f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <MX_GPIO_Init+0x1e4>)
 8001102:	f001 f921 	bl	8002348 <HAL_GPIO_Init>

}
 8001106:	bf00      	nop
 8001108:	3730      	adds	r7, #48	; 0x30
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40021000 	.word	0x40021000
 8001118:	40020800 	.word	0x40020800
 800111c:	40020c00 	.word	0x40020c00
 8001120:	10120000 	.word	0x10120000
 8001124:	40020000 	.word	0x40020000
 8001128:	40020400 	.word	0x40020400

0800112c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001134:	f00a fe0e 	bl	800bd54 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f007 fd4f 	bl	8008bdc <osDelay>
 800113e:	e7fb      	b.n	8001138 <StartDefaultTask+0xc>

08001140 <StartTaskSensor1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSensor1 */
void StartTaskSensor1(void *argument)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b09a      	sub	sp, #104	; 0x68
 8001144:	af08      	add	r7, sp, #32
 8001146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSensor1 */
	uint32_t tDelay = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	647b      	str	r3, [r7, #68]	; 0x44
	sensor_t sensor1;

    fsm_sensor_t* fsm_s1 = (fsm_sensor_t*)argument;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	643b      	str	r3, [r7, #64]	; 0x40

    sensor_initialization(&sensor1, ID_ph_sensor, Sensor1_Supply_Pin, ADC_Channel1, range_ph_acido, range_ph_basico, range_ph_max, ph_setup_period, ph_sleep_period, ph_measure_period, ph_average);
 8001150:	f107 000c 	add.w	r0, r7, #12
 8001154:	2304      	movs	r3, #4
 8001156:	9306      	str	r3, [sp, #24]
 8001158:	f44f 7316 	mov.w	r3, #600	; 0x258
 800115c:	9305      	str	r3, [sp, #20]
 800115e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001162:	9304      	str	r3, [sp, #16]
 8001164:	2332      	movs	r3, #50	; 0x32
 8001166:	9303      	str	r3, [sp, #12]
 8001168:	f44f 7361 	mov.w	r3, #900	; 0x384
 800116c:	9302      	str	r3, [sp, #8]
 800116e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	2202      	movs	r2, #2
 800117e:	2101      	movs	r1, #1
 8001180:	f7ff fc48 	bl	8000a14 <sensor_initialization>
    fsm_sensor_init(fsm_s1, &sensor1);
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	4619      	mov	r1, r3
 800118a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800118c:	f7ff fc30 	bl	80009f0 <fsm_sensor_init>

    tDelay = osKernelGetTickCount();
 8001190:	f007 fc56 	bl	8008a40 <osKernelGetTickCount>
 8001194:	6478      	str	r0, [r7, #68]	; 0x44
/* Infinite loop */
  /* Infinite loop */
  for(;;)
  {
	fsm_fire(&(fsm_s1->fsm));
 8001196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9f5 	bl	8000588 <fsm_fire>
	osMessageQueuePut (myQueueSensor1Handle, fsm_s1->param, 0, 0);
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <StartTaskSensor1+0x80>)
 80011a0:	6818      	ldr	r0, [r3, #0]
 80011a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011a4:	6899      	ldr	r1, [r3, #8]
 80011a6:	2300      	movs	r3, #0
 80011a8:	2200      	movs	r2, #0
 80011aa:	f007 fe0b 	bl	8008dc4 <osMessageQueuePut>

	//	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
    tDelay += pdMS_TO_TICKS(SENSOR1_TIME);
 80011ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011b0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80011b4:	647b      	str	r3, [r7, #68]	; 0x44
    osDelayUntil(tDelay);
 80011b6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80011b8:	f007 fd3e 	bl	8008c38 <osDelayUntil>
	fsm_fire(&(fsm_s1->fsm));
 80011bc:	e7eb      	b.n	8001196 <StartTaskSensor1+0x56>
 80011be:	bf00      	nop
 80011c0:	20004c3c 	.word	0x20004c3c

080011c4 <StartTaskLoRa>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLoRa */
void StartTaskLoRa(void *argument)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLoRa */
  uint32_t tDelay = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]

  tDelay = osKernelGetTickCount();
 80011d0:	f007 fc36 	bl	8008a40 <osKernelGetTickCount>
 80011d4:	60f8      	str	r0, [r7, #12]

  /* Infinite loop */
  for(;;)
  {

    send_data();
 80011d6:	f7ff f97b 	bl	80004d0 <send_data>

	tDelay += pdMS_TO_TICKS(SEND_DATA_TIME);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80011e0:	3310      	adds	r3, #16
 80011e2:	60fb      	str	r3, [r7, #12]
    osDelayUntil(tDelay);
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f007 fd27 	bl	8008c38 <osDelayUntil>
    send_data();
 80011ea:	e7f4      	b.n	80011d6 <StartTaskLoRa+0x12>

080011ec <StartTaskSensor2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSensor2 */
void StartTaskSensor2(void *argument)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b09a      	sub	sp, #104	; 0x68
 80011f0:	af08      	add	r7, sp, #32
 80011f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSensor2 */
	uint32_t tDelay = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	647b      	str	r3, [r7, #68]	; 0x44
		sensor_t sensor2;

	    fsm_sensor_t* fsm_s2 = (fsm_sensor_t*)argument;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	643b      	str	r3, [r7, #64]	; 0x40

	    sensor_initialization(&sensor2, ID_turbidity_sensor, Sensor2_Supply_Pin, ADC_Channel2, range_turb_min, range_turb_basico, range_turb_max, turb_setup_period, turb_sleep_period, turb_measure_period, turb_average);
 80011fc:	f107 000c 	add.w	r0, r7, #12
 8001200:	2304      	movs	r3, #4
 8001202:	9306      	str	r3, [sp, #24]
 8001204:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001208:	9305      	str	r3, [sp, #20]
 800120a:	f241 537c 	movw	r3, #5500	; 0x157c
 800120e:	9304      	str	r3, [sp, #16]
 8001210:	2341      	movs	r3, #65	; 0x41
 8001212:	9303      	str	r3, [sp, #12]
 8001214:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001218:	9302      	str	r3, [sp, #8]
 800121a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2302      	movs	r3, #2
 8001228:	2204      	movs	r2, #4
 800122a:	2102      	movs	r1, #2
 800122c:	f7ff fbf2 	bl	8000a14 <sensor_initialization>
	    fsm_sensor_init(fsm_s2, &sensor2);
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	4619      	mov	r1, r3
 8001236:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001238:	f7ff fbda 	bl	80009f0 <fsm_sensor_init>

	    tDelay = osKernelGetTickCount();
 800123c:	f007 fc00 	bl	8008a40 <osKernelGetTickCount>
 8001240:	6478      	str	r0, [r7, #68]	; 0x44
	/* Infinite loop */
	  /* Infinite loop */
	  for(;;)
	  {
		fsm_fire(&(fsm_s2->fsm));
 8001242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f99f 	bl	8000588 <fsm_fire>
		osMessageQueuePut (myQueueSensor2Handle, fsm_s2->param, 0, 0);
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <StartTaskSensor2+0x80>)
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001250:	6899      	ldr	r1, [r3, #8]
 8001252:	2300      	movs	r3, #0
 8001254:	2200      	movs	r2, #0
 8001256:	f007 fdb5 	bl	8008dc4 <osMessageQueuePut>
		tDelay += pdMS_TO_TICKS(SENSOR2_TIME);
 800125a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800125c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001260:	647b      	str	r3, [r7, #68]	; 0x44
	    osDelayUntil(tDelay);
 8001262:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001264:	f007 fce8 	bl	8008c38 <osDelayUntil>
		fsm_fire(&(fsm_s2->fsm));
 8001268:	e7eb      	b.n	8001242 <StartTaskSensor2+0x56>
 800126a:	bf00      	nop
 800126c:	20004bd8 	.word	0x20004bd8

08001270 <StartTaskLEDs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLEDs */
void StartTaskLEDs(void *argument)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b09e      	sub	sp, #120	; 0x78
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLEDs */
	uint32_t tDelay = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	677b      	str	r3, [r7, #116]	; 0x74
	sensor_t sensor1;
	sensor_t sensor2;

	tDelay = osKernelGetTickCount();
 800127c:	f007 fbe0 	bl	8008a40 <osKernelGetTickCount>
 8001280:	6778      	str	r0, [r7, #116]	; 0x74

  /* Infinite loop */
  for(;;)
  {
		osMessageQueueGet (myQueueSensor1Handle, &sensor1, NULL, 0);
 8001282:	4b3d      	ldr	r3, [pc, #244]	; (8001378 <StartTaskLEDs+0x108>)
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800128a:	2300      	movs	r3, #0
 800128c:	2200      	movs	r2, #0
 800128e:	f007 fe0d 	bl	8008eac <osMessageQueueGet>
		osMessageQueueGet (myQueueSensor2Handle, &sensor2, NULL, 0);
 8001292:	4b3a      	ldr	r3, [pc, #232]	; (800137c <StartTaskLEDs+0x10c>)
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	f107 010c 	add.w	r1, r7, #12
 800129a:	2300      	movs	r3, #0
 800129c:	2200      	movs	r2, #0
 800129e:	f007 fe05 	bl	8008eac <osMessageQueueGet>


		if(sensor1.measuring == TRUE || sensor2.measuring == TRUE) /*LED BLUE => MEASURING*/
 80012a2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d002      	beq.n	80012b0 <StartTaskLEDs+0x40>
 80012aa:	7d3b      	ldrb	r3, [r7, #20]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d10c      	bne.n	80012ca <StartTaskLEDs+0x5a>
		{
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b6:	4832      	ldr	r0, [pc, #200]	; (8001380 <StartTaskLEDs+0x110>)
 80012b8:	f001 f9e0 	bl	800267c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012c2:	482f      	ldr	r0, [pc, #188]	; (8001380 <StartTaskLEDs+0x110>)
 80012c4:	f001 f9da 	bl	800267c <HAL_GPIO_WritePin>
 80012c8:	e039      	b.n	800133e <StartTaskLEDs+0xce>
		}
		else
		{
			if(sensor1.sleeping == TRUE && sensor2.sleeping == TRUE)
 80012ca:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d129      	bne.n	8001326 <StartTaskLEDs+0xb6>
 80012d2:	7d7b      	ldrb	r3, [r7, #21]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d126      	bne.n	8001326 <StartTaskLEDs+0xb6>
			{
				HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012de:	4828      	ldr	r0, [pc, #160]	; (8001380 <StartTaskLEDs+0x110>)
 80012e0:	f001 f9cc 	bl	800267c <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 80012e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d002      	beq.n	80012f2 <StartTaskLEDs+0x82>
 80012ec:	7cfb      	ldrb	r3, [r7, #19]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d10c      	bne.n	800130c <StartTaskLEDs+0x9c>
				{
					HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 80012f2:	2201      	movs	r2, #1
 80012f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f8:	4821      	ldr	r0, [pc, #132]	; (8001380 <StartTaskLEDs+0x110>)
 80012fa:	f001 f9bf 	bl	800267c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001304:	481e      	ldr	r0, [pc, #120]	; (8001380 <StartTaskLEDs+0x110>)
 8001306:	f001 f9b9 	bl	800267c <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 800130a:	e018      	b.n	800133e <StartTaskLEDs+0xce>
				}
				else	/*GREEN LED => SLEEPING ALL OK*/
				{
					HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001312:	481b      	ldr	r0, [pc, #108]	; (8001380 <StartTaskLEDs+0x110>)
 8001314:	f001 f9b2 	bl	800267c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8001318:	2201      	movs	r2, #1
 800131a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800131e:	4818      	ldr	r0, [pc, #96]	; (8001380 <StartTaskLEDs+0x110>)
 8001320:	f001 f9ac 	bl	800267c <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 8001324:	e00b      	b.n	800133e <StartTaskLEDs+0xce>
				}

			}
			else /*STATE UNREACHABLE*/
			{
				HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800132c:	4814      	ldr	r0, [pc, #80]	; (8001380 <StartTaskLEDs+0x110>)
 800132e:	f001 f9a5 	bl	800267c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001338:	4811      	ldr	r0, [pc, #68]	; (8001380 <StartTaskLEDs+0x110>)
 800133a:	f001 f99f 	bl	800267c <HAL_GPIO_WritePin>
			}
		}

		if(sensor1.alarm == TRUE || sensor2.alarm == TRUE) HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 800133e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001342:	2b01      	cmp	r3, #1
 8001344:	d002      	beq.n	800134c <StartTaskLEDs+0xdc>
 8001346:	7cbb      	ldrb	r3, [r7, #18]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d106      	bne.n	800135a <StartTaskLEDs+0xea>
 800134c:	2201      	movs	r2, #1
 800134e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001352:	480b      	ldr	r0, [pc, #44]	; (8001380 <StartTaskLEDs+0x110>)
 8001354:	f001 f992 	bl	800267c <HAL_GPIO_WritePin>
 8001358:	e005      	b.n	8001366 <StartTaskLEDs+0xf6>
		else HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001360:	4807      	ldr	r0, [pc, #28]	; (8001380 <StartTaskLEDs+0x110>)
 8001362:	f001 f98b 	bl	800267c <HAL_GPIO_WritePin>

		tDelay += pdMS_TO_TICKS(SENSOR2_TIME);
 8001366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001368:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800136c:	677b      	str	r3, [r7, #116]	; 0x74
	    osDelayUntil(tDelay);
 800136e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001370:	f007 fc62 	bl	8008c38 <osDelayUntil>
		osMessageQueueGet (myQueueSensor1Handle, &sensor1, NULL, 0);
 8001374:	e785      	b.n	8001282 <StartTaskLEDs+0x12>
 8001376:	bf00      	nop
 8001378:	20004c3c 	.word	0x20004c3c
 800137c:	20004bd8 	.word	0x20004bd8
 8001380:	40020c00 	.word	0x40020c00

08001384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <ringbuf_init>:
#define NEXT(A) (A+1)==(RBUF_SIZE)?0:A+1 //Si la siguiente posici�n es el tama�o m�ximo del buffer se apunta al primero de nuevo.


/*RingBuffer initialization*/
void ringbuf_init(rbuf_t *_this, int size)
{
 8001392:	b480      	push	{r7}
 8001394:	b085      	sub	sp, #20
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]
   rbuf_t *p = (rbuf_t*)_this->buf;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	60fb      	str	r3, [r7, #12]

   if( (p == NULL) || (size!=sizeof(_this->buf))){
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d002      	beq.n	80013ac <ringbuf_init+0x1a>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2b60      	cmp	r3, #96	; 0x60
 80013aa:	d003      	beq.n	80013b4 <ringbuf_init+0x22>

	 p=NULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
     size = sizeof(_this->buf);
 80013b0:	2360      	movs	r3, #96	; 0x60
 80013b2:	603b      	str	r3, [r7, #0]
   }
  _this->head = 0;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	661a      	str	r2, [r3, #96]	; 0x60
  _this->tail = 0;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	665a      	str	r2, [r3, #100]	; 0x64
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <ringbuf_put>:

/*RingBuffer put value*/
void ringbuf_put(rbuf_t* _this, sensor_buf_t item)
{
 80013cc:	b084      	sub	sp, #16
 80013ce:	b4b0      	push	{r4, r5, r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	f107 001c 	add.w	r0, r7, #28
 80013da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if(NEXT(_this->head) != 0){
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d018      	beq.n	8001418 <ringbuf_put+0x4c>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ee:	d013      	beq.n	8001418 <ringbuf_put+0x4c>
  _this->buf[_this->head] = item;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	015b      	lsls	r3, r3, #5
 80013f8:	4413      	add	r3, r2
 80013fa:	461d      	mov	r5, r3
 80013fc:	f107 041c 	add.w	r4, r7, #28
 8001400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001404:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001408:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  _this->head++;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	661a      	str	r2, [r3, #96]	; 0x60
 8001416:	e013      	b.n	8001440 <ringbuf_put+0x74>
  }
  else
  {
  _this->buf[_this->head] = item;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	015b      	lsls	r3, r3, #5
 8001420:	4413      	add	r3, r2
 8001422:	461d      	mov	r5, r3
 8001424:	f107 041c 	add.w	r4, r7, #28
 8001428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800142a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800142c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001430:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  _this->head = 0;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	661a      	str	r2, [r3, #96]	; 0x60
  _this->tail = RBUF_SIZE - 1; /*Full buffer, reload.*/
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2202      	movs	r2, #2
 800143e:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bcb0      	pop	{r4, r5, r7}
 8001448:	b004      	add	sp, #16
 800144a:	4770      	bx	lr

0800144c <ringbuf_get>:
//  }
//}

/*RingBuffer Get value*/
sensor_buf_t ringbuf_get(rbuf_t* _this)
{
 800144c:	b4b0      	push	{r4, r5, r7}
 800144e:	b08b      	sub	sp, #44	; 0x2c
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
	sensor_buf_t item;

	if (_this->tail != _this->head)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145e:	429a      	cmp	r2, r3
 8001460:	d01f      	beq.n	80014a2 <ringbuf_get+0x56>
	{
		item = _this->buf[_this->tail];
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	015b      	lsls	r3, r3, #5
 800146a:	4413      	add	r3, r2
 800146c:	f107 0408 	add.w	r4, r7, #8
 8001470:	461d      	mov	r5, r3
 8001472:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001476:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800147a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if (NEXT(_this->tail) != 0)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001482:	2b02      	cmp	r3, #2
 8001484:	d00a      	beq.n	800149c <ringbuf_get+0x50>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800148a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148e:	d005      	beq.n	800149c <ringbuf_get+0x50>
		{
			_this->tail++;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	665a      	str	r2, [r3, #100]	; 0x64
 800149a:	e002      	b.n	80014a2 <ringbuf_get+0x56>
		}
		else
		{
			_this->tail = 0;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2200      	movs	r2, #0
 80014a0:	665a      	str	r2, [r3, #100]	; 0x64
		}
    }
	return item;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	461d      	mov	r5, r3
 80014a6:	f107 0408 	add.w	r4, r7, #8
 80014aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	372c      	adds	r7, #44	; 0x2c
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bcb0      	pop	{r4, r5, r7}
 80014be:	4770      	bx	lr

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_MspInit+0x54>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	4a11      	ldr	r2, [pc, #68]	; (8001514 <HAL_MspInit+0x54>)
 80014d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d4:	6453      	str	r3, [r2, #68]	; 0x44
 80014d6:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <HAL_MspInit+0x54>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_MspInit+0x54>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <HAL_MspInit+0x54>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_MspInit+0x54>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	210f      	movs	r1, #15
 8001502:	f06f 0001 	mvn.w	r0, #1
 8001506:	f000 fee8 	bl	80022da <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800

08001518 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08c      	sub	sp, #48	; 0x30
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a2e      	ldr	r2, [pc, #184]	; (80015f0 <HAL_ADC_MspInit+0xd8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d128      	bne.n	800158c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <HAL_ADC_MspInit+0xdc>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a2c      	ldr	r2, [pc, #176]	; (80015f4 <HAL_ADC_MspInit+0xdc>)
 8001544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <HAL_ADC_MspInit+0xdc>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <HAL_ADC_MspInit+0xdc>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a25      	ldr	r2, [pc, #148]	; (80015f4 <HAL_ADC_MspInit+0xdc>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <HAL_ADC_MspInit+0xdc>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = ADC_Sensor1_Pin;
 8001572:	2302      	movs	r3, #2
 8001574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001576:	2303      	movs	r3, #3
 8001578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_Sensor1_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	481c      	ldr	r0, [pc, #112]	; (80015f8 <HAL_ADC_MspInit+0xe0>)
 8001586:	f000 fedf 	bl	8002348 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800158a:	e02c      	b.n	80015e6 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a1a      	ldr	r2, [pc, #104]	; (80015fc <HAL_ADC_MspInit+0xe4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d127      	bne.n	80015e6 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <HAL_ADC_MspInit+0xdc>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	4a15      	ldr	r2, [pc, #84]	; (80015f4 <HAL_ADC_MspInit+0xdc>)
 80015a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a4:	6453      	str	r3, [r2, #68]	; 0x44
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <HAL_ADC_MspInit+0xdc>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <HAL_ADC_MspInit+0xdc>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <HAL_ADC_MspInit+0xdc>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_ADC_MspInit+0xdc>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_Sensor2_Pin;
 80015ce:	2308      	movs	r3, #8
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d2:	2303      	movs	r3, #3
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_Sensor2_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	4805      	ldr	r0, [pc, #20]	; (80015f8 <HAL_ADC_MspInit+0xe0>)
 80015e2:	f000 feb1 	bl	8002348 <HAL_GPIO_Init>
}
 80015e6:	bf00      	nop
 80015e8:	3730      	adds	r7, #48	; 0x30
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40012000 	.word	0x40012000
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40012100 	.word	0x40012100

08001600 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a19      	ldr	r2, [pc, #100]	; (8001684 <HAL_I2C_MspInit+0x84>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12c      	bne.n	800167c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_I2C_MspInit+0x88>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <HAL_I2C_MspInit+0x88>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_I2C_MspInit+0x88>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800163e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001644:	2312      	movs	r3, #18
 8001646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001648:	2301      	movs	r3, #1
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001650:	2304      	movs	r3, #4
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	480c      	ldr	r0, [pc, #48]	; (800168c <HAL_I2C_MspInit+0x8c>)
 800165c:	f000 fe74 	bl	8002348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_I2C_MspInit+0x88>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	4a07      	ldr	r2, [pc, #28]	; (8001688 <HAL_I2C_MspInit+0x88>)
 800166a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800166e:	6413      	str	r3, [r2, #64]	; 0x40
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_I2C_MspInit+0x88>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800167c:	bf00      	nop
 800167e:	3728      	adds	r7, #40	; 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40005400 	.word	0x40005400
 8001688:	40023800 	.word	0x40023800
 800168c:	40020400 	.word	0x40020400

08001690 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a28      	ldr	r2, [pc, #160]	; (8001750 <HAL_I2S_MspInit+0xc0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d14a      	bne.n	8001748 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	4b27      	ldr	r3, [pc, #156]	; (8001754 <HAL_I2S_MspInit+0xc4>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a26      	ldr	r2, [pc, #152]	; (8001754 <HAL_I2S_MspInit+0xc4>)
 80016bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
 80016c2:	4b24      	ldr	r3, [pc, #144]	; (8001754 <HAL_I2S_MspInit+0xc4>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b20      	ldr	r3, [pc, #128]	; (8001754 <HAL_I2S_MspInit+0xc4>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a1f      	ldr	r2, [pc, #124]	; (8001754 <HAL_I2S_MspInit+0xc4>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <HAL_I2S_MspInit+0xc4>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_I2S_MspInit+0xc4>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a18      	ldr	r2, [pc, #96]	; (8001754 <HAL_I2S_MspInit+0xc4>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_I2S_MspInit+0xc4>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001706:	2310      	movs	r3, #16
 8001708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001716:	2306      	movs	r3, #6
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	480d      	ldr	r0, [pc, #52]	; (8001758 <HAL_I2S_MspInit+0xc8>)
 8001722:	f000 fe11 	bl	8002348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001726:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001738:	2306      	movs	r3, #6
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	4806      	ldr	r0, [pc, #24]	; (800175c <HAL_I2S_MspInit+0xcc>)
 8001744:	f000 fe00 	bl	8002348 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001748:	bf00      	nop
 800174a:	3728      	adds	r7, #40	; 0x28
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40003c00 	.word	0x40003c00
 8001754:	40023800 	.word	0x40023800
 8001758:	40020000 	.word	0x40020000
 800175c:	40020800 	.word	0x40020800

08001760 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <HAL_SPI_MspInit+0x84>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d12b      	bne.n	80017da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <HAL_SPI_MspInit+0x88>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	4a17      	ldr	r2, [pc, #92]	; (80017e8 <HAL_SPI_MspInit+0x88>)
 800178c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001790:	6453      	str	r3, [r2, #68]	; 0x44
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_SPI_MspInit+0x88>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_SPI_MspInit+0x88>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <HAL_SPI_MspInit+0x88>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_SPI_MspInit+0x88>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80017ba:	23e0      	movs	r3, #224	; 0xe0
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ca:	2305      	movs	r3, #5
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_SPI_MspInit+0x8c>)
 80017d6:	f000 fdb7 	bl	8002348 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	; 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40013000 	.word	0x40013000
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020000 	.word	0x40020000

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <HardFault_Handler+0x4>

08001804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <MemManage_Handler+0x4>

0800180a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <BusFault_Handler+0x4>

08001810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <UsageFault_Handler+0x4>

08001816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001828:	f000 f8d2 	bl	80019d0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800182c:	f009 f972 	bl	800ab14 <xTaskGetSchedulerState>
 8001830:	4603      	mov	r3, r0
 8001832:	2b01      	cmp	r3, #1
 8001834:	d001      	beq.n	800183a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001836:	f009 ff47 	bl	800b6c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <OTG_FS_IRQHandler+0x10>)
 8001846:	f001 f9c1 	bl	8002bcc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200050d8 	.word	0x200050d8

08001854 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <_sbrk+0x50>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <_sbrk+0x16>
		heap_end = &end;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <_sbrk+0x50>)
 8001866:	4a10      	ldr	r2, [pc, #64]	; (80018a8 <_sbrk+0x54>)
 8001868:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <_sbrk+0x50>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <_sbrk+0x50>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	466a      	mov	r2, sp
 800187a:	4293      	cmp	r3, r2
 800187c:	d907      	bls.n	800188e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800187e:	f00a fd6b 	bl	800c358 <__errno>
 8001882:	4602      	mov	r2, r0
 8001884:	230c      	movs	r3, #12
 8001886:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
 800188c:	e006      	b.n	800189c <_sbrk+0x48>
	}

	heap_end += incr;
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <_sbrk+0x50>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	4a03      	ldr	r2, [pc, #12]	; (80018a4 <_sbrk+0x50>)
 8001898:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000150 	.word	0x20000150
 80018a8:	200053a0 	.word	0x200053a0

080018ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <SystemInit+0x28>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b6:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <SystemInit+0x28>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <SystemInit+0x28>)
 80018c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018c6:	609a      	str	r2, [r3, #8]
#endif
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001910 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018de:	e003      	b.n	80018e8 <LoopCopyDataInit>

080018e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018e6:	3104      	adds	r1, #4

080018e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018e8:	480b      	ldr	r0, [pc, #44]	; (8001918 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018f0:	d3f6      	bcc.n	80018e0 <CopyDataInit>
  ldr  r2, =_sbss
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018f4:	e002      	b.n	80018fc <LoopFillZerobss>

080018f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018f8:	f842 3b04 	str.w	r3, [r2], #4

080018fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001900:	d3f9      	bcc.n	80018f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001902:	f7ff ffd3 	bl	80018ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001906:	f00a fd2d 	bl	800c364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190a:	f7ff f8d9 	bl	8000ac0 <main>
  bx  lr    
 800190e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001910:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001914:	0800c718 	.word	0x0800c718
  ldr  r0, =_sdata
 8001918:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800191c:	20000134 	.word	0x20000134
  ldr  r2, =_sbss
 8001920:	20000134 	.word	0x20000134
  ldr  r3, = _ebss
 8001924:	200053a0 	.word	0x200053a0

08001928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <ADC_IRQHandler>
	...

0800192c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <HAL_Init+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0d      	ldr	r2, [pc, #52]	; (800196c <HAL_Init+0x40>)
 8001936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_Init+0x40>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0a      	ldr	r2, [pc, #40]	; (800196c <HAL_Init+0x40>)
 8001942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_Init+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a07      	ldr	r2, [pc, #28]	; (800196c <HAL_Init+0x40>)
 800194e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001954:	2003      	movs	r0, #3
 8001956:	f000 fcb5 	bl	80022c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195a:	200f      	movs	r0, #15
 800195c:	f000 f808 	bl	8001970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001960:	f7ff fdae 	bl	80014c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023c00 	.word	0x40023c00

08001970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_InitTick+0x54>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_InitTick+0x58>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001986:	fbb3 f3f1 	udiv	r3, r3, r1
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fccd 	bl	800232e <HAL_SYSTICK_Config>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e00e      	b.n	80019bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d80a      	bhi.n	80019ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f000 fc95 	bl	80022da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <HAL_InitTick+0x5c>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e000      	b.n	80019bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200000a0 	.word	0x200000a0
 80019c8:	200000a8 	.word	0x200000a8
 80019cc:	200000a4 	.word	0x200000a4

080019d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_IncTick+0x20>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_IncTick+0x24>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <HAL_IncTick+0x24>)
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	200000a8 	.word	0x200000a8
 80019f4:	20004c8c 	.word	0x20004c8c

080019f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return uwTick;
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_GetTick+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20004c8c 	.word	0x20004c8c

08001a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a18:	f7ff ffee 	bl	80019f8 <HAL_GetTick>
 8001a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a28:	d005      	beq.n	8001a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_Delay+0x40>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a36:	bf00      	nop
 8001a38:	f7ff ffde 	bl	80019f8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d8f7      	bhi.n	8001a38 <HAL_Delay+0x28>
  {
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200000a8 	.word	0x200000a8

08001a54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e033      	b.n	8001ad2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fd50 	bl	8001518 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d118      	bne.n	8001ac4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a9a:	f023 0302 	bic.w	r3, r3, #2
 8001a9e:	f043 0202 	orr.w	r2, r3, #2
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 fa40 	bl	8001f2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f023 0303 	bic.w	r3, r3, #3
 8001aba:	f043 0201 	orr.w	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ac2:	e001      	b.n	8001ac8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_ADC_Start+0x1a>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e0a5      	b.n	8001c42 <HAL_ADC_Start+0x166>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d018      	beq.n	8001b3e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b1c:	4b4c      	ldr	r3, [pc, #304]	; (8001c50 <HAL_ADC_Start+0x174>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a4c      	ldr	r2, [pc, #304]	; (8001c54 <HAL_ADC_Start+0x178>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	0c9a      	lsrs	r2, r3, #18
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b30:	e002      	b.n	8001b38 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f9      	bne.n	8001b32 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d179      	bne.n	8001c40 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d007      	beq.n	8001b7e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b8a:	d106      	bne.n	8001b9a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	f023 0206 	bic.w	r2, r3, #6
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	645a      	str	r2, [r3, #68]	; 0x44
 8001b98:	e002      	b.n	8001ba0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <HAL_ADC_Start+0x17c>)
 8001baa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bb4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 031f 	and.w	r3, r3, #31
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d12a      	bne.n	8001c18 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a25      	ldr	r2, [pc, #148]	; (8001c5c <HAL_ADC_Start+0x180>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d015      	beq.n	8001bf8 <HAL_ADC_Start+0x11c>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a23      	ldr	r2, [pc, #140]	; (8001c60 <HAL_ADC_Start+0x184>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d105      	bne.n	8001be2 <HAL_ADC_Start+0x106>
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_ADC_Start+0x17c>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 031f 	and.w	r3, r3, #31
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00a      	beq.n	8001bf8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a1f      	ldr	r2, [pc, #124]	; (8001c64 <HAL_ADC_Start+0x188>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d129      	bne.n	8001c40 <HAL_ADC_Start+0x164>
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <HAL_ADC_Start+0x17c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	2b0f      	cmp	r3, #15
 8001bf6:	d823      	bhi.n	8001c40 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d11c      	bne.n	8001c40 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	e013      	b.n	8001c40 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0f      	ldr	r2, [pc, #60]	; (8001c5c <HAL_ADC_Start+0x180>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d10e      	bne.n	8001c40 <HAL_ADC_Start+0x164>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d107      	bne.n	8001c40 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c3e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	200000a0 	.word	0x200000a0
 8001c54:	431bde83 	.word	0x431bde83
 8001c58:	40012300 	.word	0x40012300
 8001c5c:	40012000 	.word	0x40012000
 8001c60:	40012100 	.word	0x40012100
 8001c64:	40012200 	.word	0x40012200

08001c68 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_ADC_Stop+0x16>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e021      	b.n	8001cc2 <HAL_ADC_Stop+0x5a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0201 	bic.w	r2, r2, #1
 8001c94:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d109      	bne.n	8001cb8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f043 0201 	orr.w	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x1c>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e105      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x228>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b09      	cmp	r3, #9
 8001d12:	d925      	bls.n	8001d60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68d9      	ldr	r1, [r3, #12]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	4613      	mov	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4413      	add	r3, r2
 8001d28:	3b1e      	subs	r3, #30
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43da      	mvns	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	400a      	ands	r2, r1
 8001d38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68d9      	ldr	r1, [r3, #12]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4403      	add	r3, r0
 8001d52:	3b1e      	subs	r3, #30
 8001d54:	409a      	lsls	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	e022      	b.n	8001da6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6919      	ldr	r1, [r3, #16]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	2207      	movs	r2, #7
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	400a      	ands	r2, r1
 8001d82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6919      	ldr	r1, [r3, #16]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	4618      	mov	r0, r3
 8001d96:	4603      	mov	r3, r0
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4403      	add	r3, r0
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b06      	cmp	r3, #6
 8001dac:	d824      	bhi.n	8001df8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3b05      	subs	r3, #5
 8001dc0:	221f      	movs	r2, #31
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	400a      	ands	r2, r1
 8001dce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	3b05      	subs	r3, #5
 8001dea:	fa00 f203 	lsl.w	r2, r0, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	635a      	str	r2, [r3, #52]	; 0x34
 8001df6:	e04c      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b0c      	cmp	r3, #12
 8001dfe:	d824      	bhi.n	8001e4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	3b23      	subs	r3, #35	; 0x23
 8001e12:	221f      	movs	r2, #31
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43da      	mvns	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	400a      	ands	r2, r1
 8001e20:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	3b23      	subs	r3, #35	; 0x23
 8001e3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	631a      	str	r2, [r3, #48]	; 0x30
 8001e48:	e023      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	3b41      	subs	r3, #65	; 0x41
 8001e5c:	221f      	movs	r2, #31
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	400a      	ands	r2, r1
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	3b41      	subs	r3, #65	; 0x41
 8001e86:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e92:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <HAL_ADC_ConfigChannel+0x234>)
 8001e94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a21      	ldr	r2, [pc, #132]	; (8001f20 <HAL_ADC_ConfigChannel+0x238>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d109      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x1cc>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b12      	cmp	r3, #18
 8001ea6:	d105      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a19      	ldr	r2, [pc, #100]	; (8001f20 <HAL_ADC_ConfigChannel+0x238>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d123      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x21e>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d003      	beq.n	8001ece <HAL_ADC_ConfigChannel+0x1e6>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b11      	cmp	r3, #17
 8001ecc:	d11b      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b10      	cmp	r3, #16
 8001ee0:	d111      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <HAL_ADC_ConfigChannel+0x23c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a10      	ldr	r2, [pc, #64]	; (8001f28 <HAL_ADC_ConfigChannel+0x240>)
 8001ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eec:	0c9a      	lsrs	r2, r3, #18
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ef8:	e002      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f9      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40012300 	.word	0x40012300
 8001f20:	40012000 	.word	0x40012000
 8001f24:	200000a0 	.word	0x200000a0
 8001f28:	431bde83 	.word	0x431bde83

08001f2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f34:	4b79      	ldr	r3, [pc, #484]	; (800211c <ADC_Init+0x1f0>)
 8001f36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	021a      	lsls	r2, r3, #8
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6859      	ldr	r1, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6899      	ldr	r1, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbe:	4a58      	ldr	r2, [pc, #352]	; (8002120 <ADC_Init+0x1f4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d022      	beq.n	800200a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6899      	ldr	r1, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ff4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6899      	ldr	r1, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	e00f      	b.n	800202a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002018:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002028:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0202 	bic.w	r2, r2, #2
 8002038:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6899      	ldr	r1, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7e1b      	ldrb	r3, [r3, #24]
 8002044:	005a      	lsls	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d01b      	beq.n	8002090 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002066:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002076:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6859      	ldr	r1, [r3, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	3b01      	subs	r3, #1
 8002084:	035a      	lsls	r2, r3, #13
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	e007      	b.n	80020a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800209e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	051a      	lsls	r2, r3, #20
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6899      	ldr	r1, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020e2:	025a      	lsls	r2, r3, #9
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6899      	ldr	r1, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	029a      	lsls	r2, r3, #10
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	609a      	str	r2, [r3, #8]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	40012300 	.word	0x40012300
 8002120:	0f000001 	.word	0x0f000001

08002124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800214c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002156:	4a04      	ldr	r2, [pc, #16]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60d3      	str	r3, [r2, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	db0b      	blt.n	80021b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	4907      	ldr	r1, [pc, #28]	; (80021c0 <__NVIC_EnableIRQ+0x38>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2001      	movs	r0, #1
 80021aa:	fa00 f202 	lsl.w	r2, r0, r2
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e100 	.word	0xe000e100

080021c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	db0a      	blt.n	80021ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	490c      	ldr	r1, [pc, #48]	; (8002210 <__NVIC_SetPriority+0x4c>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	440b      	add	r3, r1
 80021e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ec:	e00a      	b.n	8002204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4908      	ldr	r1, [pc, #32]	; (8002214 <__NVIC_SetPriority+0x50>)
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	3b04      	subs	r3, #4
 80021fc:	0112      	lsls	r2, r2, #4
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	440b      	add	r3, r1
 8002202:	761a      	strb	r2, [r3, #24]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000e100 	.word	0xe000e100
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	; 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f1c3 0307 	rsb	r3, r3, #7
 8002232:	2b04      	cmp	r3, #4
 8002234:	bf28      	it	cs
 8002236:	2304      	movcs	r3, #4
 8002238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3304      	adds	r3, #4
 800223e:	2b06      	cmp	r3, #6
 8002240:	d902      	bls.n	8002248 <NVIC_EncodePriority+0x30>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3b03      	subs	r3, #3
 8002246:	e000      	b.n	800224a <NVIC_EncodePriority+0x32>
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	f04f 32ff 	mov.w	r2, #4294967295
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	401a      	ands	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	43d9      	mvns	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	4313      	orrs	r3, r2
         );
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	; 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002290:	d301      	bcc.n	8002296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002292:	2301      	movs	r3, #1
 8002294:	e00f      	b.n	80022b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002296:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <SysTick_Config+0x40>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229e:	210f      	movs	r1, #15
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f7ff ff8e 	bl	80021c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <SysTick_Config+0x40>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ae:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <SysTick_Config+0x40>)
 80022b0:	2207      	movs	r2, #7
 80022b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	e000e010 	.word	0xe000e010

080022c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff29 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ec:	f7ff ff3e 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	6978      	ldr	r0, [r7, #20]
 80022f8:	f7ff ff8e 	bl	8002218 <NVIC_EncodePriority>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff5d 	bl	80021c4 <__NVIC_SetPriority>
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff31 	bl	8002188 <__NVIC_EnableIRQ>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ffa2 	bl	8002280 <SysTick_Config>
 800233c:	4603      	mov	r3, r0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	e16b      	b.n	800263c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002364:	2201      	movs	r2, #1
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	429a      	cmp	r2, r3
 800237e:	f040 815a 	bne.w	8002636 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d00b      	beq.n	80023a2 <HAL_GPIO_Init+0x5a>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d007      	beq.n	80023a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002396:	2b11      	cmp	r3, #17
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b12      	cmp	r3, #18
 80023a0:	d130      	bne.n	8002404 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	2203      	movs	r2, #3
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d8:	2201      	movs	r2, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 0201 	and.w	r2, r3, #1
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0xfc>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b12      	cmp	r3, #18
 8002442:	d123      	bne.n	800248c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	08da      	lsrs	r2, r3, #3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3208      	adds	r2, #8
 800244c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002450:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	220f      	movs	r2, #15
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	08da      	lsrs	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3208      	adds	r2, #8
 8002486:	69b9      	ldr	r1, [r7, #24]
 8002488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2203      	movs	r2, #3
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0203 	and.w	r2, r3, #3
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80b4 	beq.w	8002636 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	4b5f      	ldr	r3, [pc, #380]	; (8002650 <HAL_GPIO_Init+0x308>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	4a5e      	ldr	r2, [pc, #376]	; (8002650 <HAL_GPIO_Init+0x308>)
 80024d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024dc:	6453      	str	r3, [r2, #68]	; 0x44
 80024de:	4b5c      	ldr	r3, [pc, #368]	; (8002650 <HAL_GPIO_Init+0x308>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ea:	4a5a      	ldr	r2, [pc, #360]	; (8002654 <HAL_GPIO_Init+0x30c>)
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	089b      	lsrs	r3, r3, #2
 80024f0:	3302      	adds	r3, #2
 80024f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	220f      	movs	r2, #15
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a51      	ldr	r2, [pc, #324]	; (8002658 <HAL_GPIO_Init+0x310>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d02b      	beq.n	800256e <HAL_GPIO_Init+0x226>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a50      	ldr	r2, [pc, #320]	; (800265c <HAL_GPIO_Init+0x314>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d025      	beq.n	800256a <HAL_GPIO_Init+0x222>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a4f      	ldr	r2, [pc, #316]	; (8002660 <HAL_GPIO_Init+0x318>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d01f      	beq.n	8002566 <HAL_GPIO_Init+0x21e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4e      	ldr	r2, [pc, #312]	; (8002664 <HAL_GPIO_Init+0x31c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d019      	beq.n	8002562 <HAL_GPIO_Init+0x21a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4d      	ldr	r2, [pc, #308]	; (8002668 <HAL_GPIO_Init+0x320>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_GPIO_Init+0x216>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4c      	ldr	r2, [pc, #304]	; (800266c <HAL_GPIO_Init+0x324>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00d      	beq.n	800255a <HAL_GPIO_Init+0x212>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a4b      	ldr	r2, [pc, #300]	; (8002670 <HAL_GPIO_Init+0x328>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <HAL_GPIO_Init+0x20e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a4a      	ldr	r2, [pc, #296]	; (8002674 <HAL_GPIO_Init+0x32c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d101      	bne.n	8002552 <HAL_GPIO_Init+0x20a>
 800254e:	2307      	movs	r3, #7
 8002550:	e00e      	b.n	8002570 <HAL_GPIO_Init+0x228>
 8002552:	2308      	movs	r3, #8
 8002554:	e00c      	b.n	8002570 <HAL_GPIO_Init+0x228>
 8002556:	2306      	movs	r3, #6
 8002558:	e00a      	b.n	8002570 <HAL_GPIO_Init+0x228>
 800255a:	2305      	movs	r3, #5
 800255c:	e008      	b.n	8002570 <HAL_GPIO_Init+0x228>
 800255e:	2304      	movs	r3, #4
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x228>
 8002562:	2303      	movs	r3, #3
 8002564:	e004      	b.n	8002570 <HAL_GPIO_Init+0x228>
 8002566:	2302      	movs	r3, #2
 8002568:	e002      	b.n	8002570 <HAL_GPIO_Init+0x228>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_GPIO_Init+0x228>
 800256e:	2300      	movs	r3, #0
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	f002 0203 	and.w	r2, r2, #3
 8002576:	0092      	lsls	r2, r2, #2
 8002578:	4093      	lsls	r3, r2
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002580:	4934      	ldr	r1, [pc, #208]	; (8002654 <HAL_GPIO_Init+0x30c>)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	089b      	lsrs	r3, r3, #2
 8002586:	3302      	adds	r3, #2
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800258e:	4b3a      	ldr	r3, [pc, #232]	; (8002678 <HAL_GPIO_Init+0x330>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025b2:	4a31      	ldr	r2, [pc, #196]	; (8002678 <HAL_GPIO_Init+0x330>)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025b8:	4b2f      	ldr	r3, [pc, #188]	; (8002678 <HAL_GPIO_Init+0x330>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025dc:	4a26      	ldr	r2, [pc, #152]	; (8002678 <HAL_GPIO_Init+0x330>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025e2:	4b25      	ldr	r3, [pc, #148]	; (8002678 <HAL_GPIO_Init+0x330>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002606:	4a1c      	ldr	r2, [pc, #112]	; (8002678 <HAL_GPIO_Init+0x330>)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800260c:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <HAL_GPIO_Init+0x330>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002630:	4a11      	ldr	r2, [pc, #68]	; (8002678 <HAL_GPIO_Init+0x330>)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3301      	adds	r3, #1
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	2b0f      	cmp	r3, #15
 8002640:	f67f ae90 	bls.w	8002364 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002644:	bf00      	nop
 8002646:	3724      	adds	r7, #36	; 0x24
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	40023800 	.word	0x40023800
 8002654:	40013800 	.word	0x40013800
 8002658:	40020000 	.word	0x40020000
 800265c:	40020400 	.word	0x40020400
 8002660:	40020800 	.word	0x40020800
 8002664:	40020c00 	.word	0x40020c00
 8002668:	40021000 	.word	0x40021000
 800266c:	40021400 	.word	0x40021400
 8002670:	40021800 	.word	0x40021800
 8002674:	40021c00 	.word	0x40021c00
 8002678:	40013c00 	.word	0x40013c00

0800267c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
 8002688:	4613      	mov	r3, r2
 800268a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800268c:	787b      	ldrb	r3, [r7, #1]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002698:	e003      	b.n	80026a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800269a:	887b      	ldrh	r3, [r7, #2]
 800269c:	041a      	lsls	r2, r3, #16
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	619a      	str	r2, [r3, #24]
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80026ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b0:	b08f      	sub	sp, #60	; 0x3c
 80026b2:	af0a      	add	r7, sp, #40	; 0x28
 80026b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e054      	b.n	800276a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f009 fb8e 	bl	800bdfc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2203      	movs	r2, #3
 80026e4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d102      	bne.n	80026fa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f003 f900 	bl	8005904 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	603b      	str	r3, [r7, #0]
 800270a:	687e      	ldr	r6, [r7, #4]
 800270c:	466d      	mov	r5, sp
 800270e:	f106 0410 	add.w	r4, r6, #16
 8002712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800271a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800271e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002722:	1d33      	adds	r3, r6, #4
 8002724:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002726:	6838      	ldr	r0, [r7, #0]
 8002728:	f003 f87a 	bl	8005820 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2101      	movs	r1, #1
 8002732:	4618      	mov	r0, r3
 8002734:	f003 f8f7 	bl	8005926 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	603b      	str	r3, [r7, #0]
 800273e:	687e      	ldr	r6, [r7, #4]
 8002740:	466d      	mov	r5, sp
 8002742:	f106 0410 	add.w	r4, r6, #16
 8002746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800274a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800274c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800274e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002752:	e885 0003 	stmia.w	r5, {r0, r1}
 8002756:	1d33      	adds	r3, r6, #4
 8002758:	cb0e      	ldmia	r3, {r1, r2, r3}
 800275a:	6838      	ldr	r0, [r7, #0]
 800275c:	f003 fa0a 	bl	8005b74 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002772 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002772:	b590      	push	{r4, r7, lr}
 8002774:	b089      	sub	sp, #36	; 0x24
 8002776:	af04      	add	r7, sp, #16
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	4608      	mov	r0, r1
 800277c:	4611      	mov	r1, r2
 800277e:	461a      	mov	r2, r3
 8002780:	4603      	mov	r3, r0
 8002782:	70fb      	strb	r3, [r7, #3]
 8002784:	460b      	mov	r3, r1
 8002786:	70bb      	strb	r3, [r7, #2]
 8002788:	4613      	mov	r3, r2
 800278a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_HCD_HC_Init+0x28>
 8002796:	2302      	movs	r3, #2
 8002798:	e07f      	b.n	800289a <HAL_HCD_HC_Init+0x128>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	440b      	add	r3, r1
 80027b0:	333d      	adds	r3, #61	; 0x3d
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80027b6:	78fa      	ldrb	r2, [r7, #3]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	3338      	adds	r3, #56	; 0x38
 80027c6:	787a      	ldrb	r2, [r7, #1]
 80027c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80027ca:	78fa      	ldrb	r2, [r7, #3]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	440b      	add	r3, r1
 80027d8:	3340      	adds	r3, #64	; 0x40
 80027da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80027dc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	440b      	add	r3, r1
 80027ec:	3339      	adds	r3, #57	; 0x39
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	440b      	add	r3, r1
 8002800:	333f      	adds	r3, #63	; 0x3f
 8002802:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002806:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	78bb      	ldrb	r3, [r7, #2]
 800280c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002810:	b2d8      	uxtb	r0, r3
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	333a      	adds	r3, #58	; 0x3a
 8002820:	4602      	mov	r2, r0
 8002822:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002824:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002828:	2b00      	cmp	r3, #0
 800282a:	da0a      	bge.n	8002842 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	440b      	add	r3, r1
 800283a:	333b      	adds	r3, #59	; 0x3b
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	e009      	b.n	8002856 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	333b      	adds	r3, #59	; 0x3b
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002856:	78fa      	ldrb	r2, [r7, #3]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	440b      	add	r3, r1
 8002864:	333c      	adds	r3, #60	; 0x3c
 8002866:	f897 2020 	ldrb.w	r2, [r7, #32]
 800286a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	787c      	ldrb	r4, [r7, #1]
 8002872:	78ba      	ldrb	r2, [r7, #2]
 8002874:	78f9      	ldrb	r1, [r7, #3]
 8002876:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002878:	9302      	str	r3, [sp, #8]
 800287a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800287e:	9301      	str	r3, [sp, #4]
 8002880:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	4623      	mov	r3, r4
 8002888:	f003 faf6 	bl	8005e78 <USB_HC_Init>
 800288c:	4603      	mov	r3, r0
 800288e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002898:	7bfb      	ldrb	r3, [r7, #15]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd90      	pop	{r4, r7, pc}

080028a2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	460b      	mov	r3, r1
 80028ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_HCD_HC_Halt+0x1e>
 80028bc:	2302      	movs	r3, #2
 80028be:	e00f      	b.n	80028e0 <HAL_HCD_HC_Halt+0x3e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	78fa      	ldrb	r2, [r7, #3]
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f003 fd30 	bl	8006336 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80028de:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	4608      	mov	r0, r1
 80028f2:	4611      	mov	r1, r2
 80028f4:	461a      	mov	r2, r3
 80028f6:	4603      	mov	r3, r0
 80028f8:	70fb      	strb	r3, [r7, #3]
 80028fa:	460b      	mov	r3, r1
 80028fc:	70bb      	strb	r3, [r7, #2]
 80028fe:	4613      	mov	r3, r2
 8002900:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002902:	78fa      	ldrb	r2, [r7, #3]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	440b      	add	r3, r1
 8002910:	333b      	adds	r3, #59	; 0x3b
 8002912:	78ba      	ldrb	r2, [r7, #2]
 8002914:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	440b      	add	r3, r1
 8002924:	333f      	adds	r3, #63	; 0x3f
 8002926:	787a      	ldrb	r2, [r7, #1]
 8002928:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800292a:	7c3b      	ldrb	r3, [r7, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d114      	bne.n	800295a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	440b      	add	r3, r1
 800293e:	3342      	adds	r3, #66	; 0x42
 8002940:	2203      	movs	r2, #3
 8002942:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	440b      	add	r3, r1
 8002952:	333d      	adds	r3, #61	; 0x3d
 8002954:	7f3a      	ldrb	r2, [r7, #28]
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	e009      	b.n	800296e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	440b      	add	r3, r1
 8002968:	3342      	adds	r3, #66	; 0x42
 800296a:	2202      	movs	r2, #2
 800296c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800296e:	787b      	ldrb	r3, [r7, #1]
 8002970:	2b03      	cmp	r3, #3
 8002972:	f200 80d6 	bhi.w	8002b22 <HAL_HCD_HC_SubmitRequest+0x23a>
 8002976:	a201      	add	r2, pc, #4	; (adr r2, 800297c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297c:	0800298d 	.word	0x0800298d
 8002980:	08002b0d 	.word	0x08002b0d
 8002984:	080029f9 	.word	0x080029f9
 8002988:	08002a83 	.word	0x08002a83
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800298c:	7c3b      	ldrb	r3, [r7, #16]
 800298e:	2b01      	cmp	r3, #1
 8002990:	f040 80c9 	bne.w	8002b26 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002994:	78bb      	ldrb	r3, [r7, #2]
 8002996:	2b00      	cmp	r3, #0
 8002998:	f040 80c5 	bne.w	8002b26 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800299c:	8b3b      	ldrh	r3, [r7, #24]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	3351      	adds	r3, #81	; 0x51
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	440b      	add	r3, r1
 80029c4:	3351      	adds	r3, #81	; 0x51
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10a      	bne.n	80029e2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029cc:	78fa      	ldrb	r2, [r7, #3]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	440b      	add	r3, r1
 80029da:	3342      	adds	r3, #66	; 0x42
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80029e0:	e0a1      	b.n	8002b26 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	440b      	add	r3, r1
 80029f0:	3342      	adds	r3, #66	; 0x42
 80029f2:	2202      	movs	r2, #2
 80029f4:	701a      	strb	r2, [r3, #0]
      break;
 80029f6:	e096      	b.n	8002b26 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80029f8:	78bb      	ldrb	r3, [r7, #2]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d120      	bne.n	8002a40 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	440b      	add	r3, r1
 8002a0c:	3351      	adds	r3, #81	; 0x51
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10a      	bne.n	8002a2a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a14:	78fa      	ldrb	r2, [r7, #3]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	440b      	add	r3, r1
 8002a22:	3342      	adds	r3, #66	; 0x42
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002a28:	e07e      	b.n	8002b28 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	440b      	add	r3, r1
 8002a38:	3342      	adds	r3, #66	; 0x42
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	701a      	strb	r2, [r3, #0]
      break;
 8002a3e:	e073      	b.n	8002b28 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3350      	adds	r3, #80	; 0x50
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10a      	bne.n	8002a6c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	3342      	adds	r3, #66	; 0x42
 8002a66:	2200      	movs	r2, #0
 8002a68:	701a      	strb	r2, [r3, #0]
      break;
 8002a6a:	e05d      	b.n	8002b28 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	440b      	add	r3, r1
 8002a7a:	3342      	adds	r3, #66	; 0x42
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	701a      	strb	r2, [r3, #0]
      break;
 8002a80:	e052      	b.n	8002b28 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002a82:	78bb      	ldrb	r3, [r7, #2]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d120      	bne.n	8002aca <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	440b      	add	r3, r1
 8002a96:	3351      	adds	r3, #81	; 0x51
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10a      	bne.n	8002ab4 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	440b      	add	r3, r1
 8002aac:	3342      	adds	r3, #66	; 0x42
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002ab2:	e039      	b.n	8002b28 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	440b      	add	r3, r1
 8002ac2:	3342      	adds	r3, #66	; 0x42
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	701a      	strb	r2, [r3, #0]
      break;
 8002ac8:	e02e      	b.n	8002b28 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3350      	adds	r3, #80	; 0x50
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10a      	bne.n	8002af6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	3342      	adds	r3, #66	; 0x42
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
      break;
 8002af4:	e018      	b.n	8002b28 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002af6:	78fa      	ldrb	r2, [r7, #3]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	3342      	adds	r3, #66	; 0x42
 8002b06:	2202      	movs	r2, #2
 8002b08:	701a      	strb	r2, [r3, #0]
      break;
 8002b0a:	e00d      	b.n	8002b28 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	440b      	add	r3, r1
 8002b1a:	3342      	adds	r3, #66	; 0x42
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
      break;
 8002b20:	e002      	b.n	8002b28 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002b22:	bf00      	nop
 8002b24:	e000      	b.n	8002b28 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002b26:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	440b      	add	r3, r1
 8002b36:	3344      	adds	r3, #68	; 0x44
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	8b39      	ldrh	r1, [r7, #24]
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4403      	add	r3, r0
 8002b4c:	3348      	adds	r3, #72	; 0x48
 8002b4e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002b50:	78fa      	ldrb	r2, [r7, #3]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	335c      	adds	r3, #92	; 0x5c
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	334c      	adds	r3, #76	; 0x4c
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	440b      	add	r3, r1
 8002b86:	3339      	adds	r3, #57	; 0x39
 8002b88:	78fa      	ldrb	r2, [r7, #3]
 8002b8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	440b      	add	r3, r1
 8002b9a:	335d      	adds	r3, #93	; 0x5d
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	3338      	adds	r3, #56	; 0x38
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	18d1      	adds	r1, r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f003 fa66 	bl	800608c <USB_HC_StartXfer>
 8002bc0:	4603      	mov	r3, r0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop

08002bcc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f002 ff83 	bl	8005aee <USB_GetMode>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	f040 80ef 	bne.w	8002dce <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f002 ff67 	bl	8005ac8 <USB_ReadInterrupts>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80e5 	beq.w	8002dcc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f002 ff5e 	bl	8005ac8 <USB_ReadInterrupts>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c16:	d104      	bne.n	8002c22 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f002 ff4e 	bl	8005ac8 <USB_ReadInterrupts>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c36:	d104      	bne.n	8002c42 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f002 ff3e 	bl	8005ac8 <USB_ReadInterrupts>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c56:	d104      	bne.n	8002c62 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f002 ff2e 	bl	8005ac8 <USB_ReadInterrupts>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d103      	bne.n	8002c7e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f002 ff20 	bl	8005ac8 <USB_ReadInterrupts>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c92:	d115      	bne.n	8002cc0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002c9c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d108      	bne.n	8002cc0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f009 f922 	bl	800bef8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2101      	movs	r1, #1
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f003 f816 	bl	8005cec <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f002 feff 	bl	8005ac8 <USB_ReadInterrupts>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cd4:	d102      	bne.n	8002cdc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f001 f966 	bl	8003fa8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f002 fef1 	bl	8005ac8 <USB_ReadInterrupts>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d106      	bne.n	8002cfe <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f009 f8e5 	bl	800bec0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2208      	movs	r2, #8
 8002cfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f002 fee0 	bl	8005ac8 <USB_ReadInterrupts>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d12:	d138      	bne.n	8002d86 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f003 fafb 	bl	8006314 <USB_HC_ReadInterrupt>
 8002d1e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	e025      	b.n	8002d72 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d018      	beq.n	8002d6c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d50:	d106      	bne.n	8002d60 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	4619      	mov	r1, r3
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f8cf 	bl	8002efc <HCD_HC_IN_IRQHandler>
 8002d5e:	e005      	b.n	8002d6c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	4619      	mov	r1, r3
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fcfd 	bl	8003766 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d3d4      	bcc.n	8002d26 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f002 fe9c 	bl	8005ac8 <USB_ReadInterrupts>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b10      	cmp	r3, #16
 8002d98:	d101      	bne.n	8002d9e <HAL_HCD_IRQHandler+0x1d2>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <HAL_HCD_IRQHandler+0x1d4>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d014      	beq.n	8002dce <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0210 	bic.w	r2, r2, #16
 8002db2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f001 f84b 	bl	8003e50 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699a      	ldr	r2, [r3, #24]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0210 	orr.w	r2, r2, #16
 8002dc8:	619a      	str	r2, [r3, #24]
 8002dca:	e000      	b.n	8002dce <HAL_HCD_IRQHandler+0x202>
      return;
 8002dcc:	bf00      	nop
    }
  }
}
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_HCD_Start+0x16>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e013      	b.n	8002e12 <HAL_HCD_Start+0x3e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f002 fd73 	bl	80058e2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2101      	movs	r1, #1
 8002e02:	4618      	mov	r0, r3
 8002e04:	f002 ffd6 	bl	8005db4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_HCD_Stop+0x16>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e00d      	b.n	8002e4c <HAL_HCD_Stop+0x32>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f003 fbb5 	bl	80065ac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f002 ff7d 	bl	8005d60 <USB_ResetPort>
 8002e66:	4603      	mov	r3, r0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	440b      	add	r3, r1
 8002e8a:	335c      	adds	r3, #92	; 0x5c
 8002e8c:	781b      	ldrb	r3, [r3, #0]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	440b      	add	r3, r1
 8002eb4:	334c      	adds	r3, #76	; 0x4c
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f002 ffbf 	bl	8005e54 <USB_GetCurrentFrame>
 8002ed6:	4603      	mov	r3, r0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f002 ff9a 	bl	8005e26 <USB_GetHostSpeed>
 8002ef2:	4603      	mov	r3, r0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d119      	bne.n	8002f60 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	0151      	lsls	r1, r2, #5
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	440a      	add	r2, r1
 8002f54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f58:	f043 0302 	orr.w	r3, r3, #2
 8002f5c:	60d3      	str	r3, [r2, #12]
 8002f5e:	e0ce      	b.n	80030fe <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f76:	d12c      	bne.n	8002fd2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f84:	461a      	mov	r2, r3
 8002f86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	440b      	add	r3, r1
 8002f9a:	335d      	adds	r3, #93	; 0x5d
 8002f9c:	2207      	movs	r2, #7
 8002f9e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	0151      	lsls	r1, r2, #5
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	440a      	add	r2, r1
 8002fb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fba:	f043 0302 	orr.w	r3, r3, #2
 8002fbe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	4611      	mov	r1, r2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 f9b3 	bl	8006336 <USB_HC_Halt>
 8002fd0:	e095      	b.n	80030fe <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	d109      	bne.n	8002ffc <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2320      	movs	r3, #32
 8002ff8:	6093      	str	r3, [r2, #8]
 8002ffa:	e080      	b.n	80030fe <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	4413      	add	r3, r2
 8003004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b08      	cmp	r3, #8
 8003010:	d134      	bne.n	800307c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4413      	add	r3, r2
 800301a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	0151      	lsls	r1, r2, #5
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	440a      	add	r2, r1
 8003028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800302c:	f043 0302 	orr.w	r3, r3, #2
 8003030:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	440b      	add	r3, r1
 8003040:	335d      	adds	r3, #93	; 0x5d
 8003042:	2205      	movs	r2, #5
 8003044:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4413      	add	r3, r2
 800304e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003052:	461a      	mov	r2, r3
 8003054:	2310      	movs	r3, #16
 8003056:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4413      	add	r3, r2
 8003060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003064:	461a      	mov	r2, r3
 8003066:	2308      	movs	r3, #8
 8003068:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f003 f95e 	bl	8006336 <USB_HC_Halt>
 800307a:	e040      	b.n	80030fe <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4413      	add	r3, r2
 8003084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003092:	d134      	bne.n	80030fe <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4413      	add	r3, r2
 800309c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	0151      	lsls	r1, r2, #5
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	440a      	add	r2, r1
 80030aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030ae:	f043 0302 	orr.w	r3, r3, #2
 80030b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f003 f939 	bl	8006336 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d0:	461a      	mov	r2, r3
 80030d2:	2310      	movs	r3, #16
 80030d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	440b      	add	r3, r1
 80030e4:	335d      	adds	r3, #93	; 0x5d
 80030e6:	2208      	movs	r2, #8
 80030e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f6:	461a      	mov	r2, r3
 80030f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030fc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4413      	add	r3, r2
 8003106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003114:	d122      	bne.n	800315c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4413      	add	r3, r2
 800311e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	0151      	lsls	r1, r2, #5
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	440a      	add	r2, r1
 800312c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003130:	f043 0302 	orr.w	r3, r3, #2
 8003134:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	4611      	mov	r1, r2
 8003140:	4618      	mov	r0, r3
 8003142:	f003 f8f8 	bl	8006336 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4413      	add	r3, r2
 800314e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003152:	461a      	mov	r2, r3
 8003154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003158:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800315a:	e300      	b.n	800375e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4413      	add	r3, r2
 8003164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b01      	cmp	r3, #1
 8003170:	f040 80fd 	bne.w	800336e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d01b      	beq.n	80031b4 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	440b      	add	r3, r1
 800318a:	3348      	adds	r3, #72	; 0x48
 800318c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	0159      	lsls	r1, r3, #5
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	440b      	add	r3, r1
 8003196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80031a0:	1ad1      	subs	r1, r2, r3
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4403      	add	r3, r0
 80031b0:	334c      	adds	r3, #76	; 0x4c
 80031b2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	440b      	add	r3, r1
 80031c2:	335d      	adds	r3, #93	; 0x5d
 80031c4:	2201      	movs	r2, #1
 80031c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	440b      	add	r3, r1
 80031d6:	3358      	adds	r3, #88	; 0x58
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e8:	461a      	mov	r2, r3
 80031ea:	2301      	movs	r3, #1
 80031ec:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	440b      	add	r3, r1
 80031fc:	333f      	adds	r3, #63	; 0x3f
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	440b      	add	r3, r1
 8003212:	333f      	adds	r3, #63	; 0x3f
 8003214:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003216:	2b02      	cmp	r3, #2
 8003218:	d121      	bne.n	800325e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4413      	add	r3, r2
 8003222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	0151      	lsls	r1, r2, #5
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	440a      	add	r2, r1
 8003230:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003234:	f043 0302 	orr.w	r3, r3, #2
 8003238:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f003 f876 	bl	8006336 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003256:	461a      	mov	r2, r3
 8003258:	2310      	movs	r3, #16
 800325a:	6093      	str	r3, [r2, #8]
 800325c:	e070      	b.n	8003340 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	440b      	add	r3, r1
 800326c:	333f      	adds	r3, #63	; 0x3f
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d12a      	bne.n	80032ca <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4413      	add	r3, r2
 800327c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	0151      	lsls	r1, r2, #5
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	440a      	add	r2, r1
 800328a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800328e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003292:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	440b      	add	r3, r1
 80032a2:	335c      	adds	r3, #92	; 0x5c
 80032a4:	2201      	movs	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	b2d8      	uxtb	r0, r3
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	440b      	add	r3, r1
 80032ba:	335c      	adds	r3, #92	; 0x5c
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	4601      	mov	r1, r0
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f008 fe26 	bl	800bf14 <HAL_HCD_HC_NotifyURBChange_Callback>
 80032c8:	e03a      	b.n	8003340 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	440b      	add	r3, r1
 80032d8:	333f      	adds	r3, #63	; 0x3f
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d12f      	bne.n	8003340 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	440b      	add	r3, r1
 80032ee:	335c      	adds	r3, #92	; 0x5c
 80032f0:	2201      	movs	r2, #1
 80032f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	440b      	add	r3, r1
 8003302:	3350      	adds	r3, #80	; 0x50
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	f083 0301 	eor.w	r3, r3, #1
 800330a:	b2d8      	uxtb	r0, r3
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4613      	mov	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	440b      	add	r3, r1
 800331a:	3350      	adds	r3, #80	; 0x50
 800331c:	4602      	mov	r2, r0
 800331e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	b2d8      	uxtb	r0, r3
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	440b      	add	r3, r1
 8003332:	335c      	adds	r3, #92	; 0x5c
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	4601      	mov	r1, r0
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f008 fdea 	bl	800bf14 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	440b      	add	r3, r1
 800334e:	3350      	adds	r3, #80	; 0x50
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	f083 0301 	eor.w	r3, r3, #1
 8003356:	b2d8      	uxtb	r0, r3
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	440b      	add	r3, r1
 8003366:	3350      	adds	r3, #80	; 0x50
 8003368:	4602      	mov	r2, r0
 800336a:	701a      	strb	r2, [r3, #0]
}
 800336c:	e1f7      	b.n	800375e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4413      	add	r3, r2
 8003376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b02      	cmp	r3, #2
 8003382:	f040 811a 	bne.w	80035ba <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4413      	add	r3, r2
 800338e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	0151      	lsls	r1, r2, #5
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	440a      	add	r2, r1
 800339c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033a0:	f023 0302 	bic.w	r3, r3, #2
 80033a4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	440b      	add	r3, r1
 80033b4:	335d      	adds	r3, #93	; 0x5d
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d10a      	bne.n	80033d2 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	440b      	add	r3, r1
 80033ca:	335c      	adds	r3, #92	; 0x5c
 80033cc:	2201      	movs	r2, #1
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	e0d9      	b.n	8003586 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	440b      	add	r3, r1
 80033e0:	335d      	adds	r3, #93	; 0x5d
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b05      	cmp	r3, #5
 80033e6:	d10a      	bne.n	80033fe <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	440b      	add	r3, r1
 80033f6:	335c      	adds	r3, #92	; 0x5c
 80033f8:	2205      	movs	r2, #5
 80033fa:	701a      	strb	r2, [r3, #0]
 80033fc:	e0c3      	b.n	8003586 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	440b      	add	r3, r1
 800340c:	335d      	adds	r3, #93	; 0x5d
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b06      	cmp	r3, #6
 8003412:	d00a      	beq.n	800342a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	440b      	add	r3, r1
 8003422:	335d      	adds	r3, #93	; 0x5d
 8003424:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003426:	2b08      	cmp	r3, #8
 8003428:	d156      	bne.n	80034d8 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	440b      	add	r3, r1
 8003438:	3358      	adds	r3, #88	; 0x58
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	1c59      	adds	r1, r3, #1
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4403      	add	r3, r0
 800344c:	3358      	adds	r3, #88	; 0x58
 800344e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	440b      	add	r3, r1
 800345e:	3358      	adds	r3, #88	; 0x58
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b03      	cmp	r3, #3
 8003464:	d914      	bls.n	8003490 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	440b      	add	r3, r1
 8003474:	3358      	adds	r3, #88	; 0x58
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	440b      	add	r3, r1
 8003488:	335c      	adds	r3, #92	; 0x5c
 800348a:	2204      	movs	r2, #4
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	e009      	b.n	80034a4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	440b      	add	r3, r1
 800349e:	335c      	adds	r3, #92	; 0x5c
 80034a0:	2202      	movs	r2, #2
 80034a2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034ba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034c2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d0:	461a      	mov	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	e056      	b.n	8003586 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	440b      	add	r3, r1
 80034e6:	335d      	adds	r3, #93	; 0x5d
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d123      	bne.n	8003536 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	440b      	add	r3, r1
 80034fc:	335c      	adds	r3, #92	; 0x5c
 80034fe:	2202      	movs	r2, #2
 8003500:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4413      	add	r3, r2
 800350a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003518:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003520:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4413      	add	r3, r2
 800352a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352e:	461a      	mov	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	e027      	b.n	8003586 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	440b      	add	r3, r1
 8003544:	335d      	adds	r3, #93	; 0x5d
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b07      	cmp	r3, #7
 800354a:	d11c      	bne.n	8003586 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	440b      	add	r3, r1
 800355a:	3358      	adds	r3, #88	; 0x58
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	1c59      	adds	r1, r3, #1
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4403      	add	r3, r0
 800356e:	3358      	adds	r3, #88	; 0x58
 8003570:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	440b      	add	r3, r1
 8003580:	335c      	adds	r3, #92	; 0x5c
 8003582:	2204      	movs	r2, #4
 8003584:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4413      	add	r3, r2
 800358e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003592:	461a      	mov	r2, r3
 8003594:	2302      	movs	r3, #2
 8003596:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	b2d8      	uxtb	r0, r3
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	440b      	add	r3, r1
 80035aa:	335c      	adds	r3, #92	; 0x5c
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	4601      	mov	r1, r0
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f008 fcae 	bl	800bf14 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80035b8:	e0d1      	b.n	800375e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035cc:	2b80      	cmp	r3, #128	; 0x80
 80035ce:	d13e      	bne.n	800364e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	0151      	lsls	r1, r2, #5
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	440a      	add	r2, r1
 80035e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035ea:	f043 0302 	orr.w	r3, r3, #2
 80035ee:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	440b      	add	r3, r1
 80035fe:	3358      	adds	r3, #88	; 0x58
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	1c59      	adds	r1, r3, #1
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4403      	add	r3, r0
 8003612:	3358      	adds	r3, #88	; 0x58
 8003614:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	440b      	add	r3, r1
 8003624:	335d      	adds	r3, #93	; 0x5d
 8003626:	2206      	movs	r2, #6
 8003628:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	4611      	mov	r1, r2
 8003634:	4618      	mov	r0, r3
 8003636:	f002 fe7e 	bl	8006336 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4413      	add	r3, r2
 8003642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003646:	461a      	mov	r2, r3
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	6093      	str	r3, [r2, #8]
}
 800364c:	e087      	b.n	800375e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4413      	add	r3, r2
 8003656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b10      	cmp	r3, #16
 8003662:	d17c      	bne.n	800375e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	440b      	add	r3, r1
 8003672:	333f      	adds	r3, #63	; 0x3f
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b03      	cmp	r3, #3
 8003678:	d122      	bne.n	80036c0 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	440b      	add	r3, r1
 8003688:	3358      	adds	r3, #88	; 0x58
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4413      	add	r3, r2
 8003696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	0151      	lsls	r1, r2, #5
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	440a      	add	r2, r1
 80036a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036a8:	f043 0302 	orr.w	r3, r3, #2
 80036ac:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	4611      	mov	r1, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f002 fe3c 	bl	8006336 <USB_HC_Halt>
 80036be:	e045      	b.n	800374c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	440b      	add	r3, r1
 80036ce:	333f      	adds	r3, #63	; 0x3f
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	440b      	add	r3, r1
 80036e4:	333f      	adds	r3, #63	; 0x3f
 80036e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d12f      	bne.n	800374c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	440b      	add	r3, r1
 80036fa:	3358      	adds	r3, #88	; 0x58
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d121      	bne.n	800374c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	440b      	add	r3, r1
 8003716:	335d      	adds	r3, #93	; 0x5d
 8003718:	2203      	movs	r2, #3
 800371a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4413      	add	r3, r2
 8003724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	0151      	lsls	r1, r2, #5
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	440a      	add	r2, r1
 8003732:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003736:	f043 0302 	orr.w	r3, r3, #2
 800373a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f002 fdf5 	bl	8006336 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4413      	add	r3, r2
 8003754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003758:	461a      	mov	r2, r3
 800375a:	2310      	movs	r3, #16
 800375c:	6093      	str	r3, [r2, #8]
}
 800375e:	bf00      	nop
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b086      	sub	sp, #24
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	460b      	mov	r3, r1
 8003770:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4413      	add	r3, r2
 8003788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b04      	cmp	r3, #4
 8003794:	d119      	bne.n	80037ca <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4413      	add	r3, r2
 800379e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a2:	461a      	mov	r2, r3
 80037a4:	2304      	movs	r3, #4
 80037a6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	0151      	lsls	r1, r2, #5
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	440a      	add	r2, r1
 80037be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037c2:	f043 0302 	orr.w	r3, r3, #2
 80037c6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80037c8:	e33e      	b.n	8003e48 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b20      	cmp	r3, #32
 80037de:	d141      	bne.n	8003864 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ec:	461a      	mov	r2, r3
 80037ee:	2320      	movs	r3, #32
 80037f0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	440b      	add	r3, r1
 8003800:	333d      	adds	r3, #61	; 0x3d
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b01      	cmp	r3, #1
 8003806:	f040 831f 	bne.w	8003e48 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	440b      	add	r3, r1
 8003818:	333d      	adds	r3, #61	; 0x3d
 800381a:	2200      	movs	r2, #0
 800381c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	440b      	add	r3, r1
 800382c:	335c      	adds	r3, #92	; 0x5c
 800382e:	2202      	movs	r2, #2
 8003830:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4413      	add	r3, r2
 800383a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	0151      	lsls	r1, r2, #5
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	440a      	add	r2, r1
 8003848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800384c:	f043 0302 	orr.w	r3, r3, #2
 8003850:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	4611      	mov	r1, r2
 800385c:	4618      	mov	r0, r3
 800385e:	f002 fd6a 	bl	8006336 <USB_HC_Halt>
}
 8003862:	e2f1      	b.n	8003e48 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4413      	add	r3, r2
 800386c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003876:	2b40      	cmp	r3, #64	; 0x40
 8003878:	d13f      	bne.n	80038fa <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	440b      	add	r3, r1
 8003888:	335d      	adds	r3, #93	; 0x5d
 800388a:	2204      	movs	r2, #4
 800388c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	440b      	add	r3, r1
 800389c:	333d      	adds	r3, #61	; 0x3d
 800389e:	2201      	movs	r2, #1
 80038a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	440b      	add	r3, r1
 80038b0:	3358      	adds	r3, #88	; 0x58
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	0151      	lsls	r1, r2, #5
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	440a      	add	r2, r1
 80038cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038d0:	f043 0302 	orr.w	r3, r3, #2
 80038d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	4611      	mov	r1, r2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f002 fd28 	bl	8006336 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f2:	461a      	mov	r2, r3
 80038f4:	2340      	movs	r3, #64	; 0x40
 80038f6:	6093      	str	r3, [r2, #8]
}
 80038f8:	e2a6      	b.n	8003e48 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	4413      	add	r3, r2
 8003902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800390c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003910:	d122      	bne.n	8003958 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4413      	add	r3, r2
 800391a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	0151      	lsls	r1, r2, #5
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	440a      	add	r2, r1
 8003928:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800392c:	f043 0302 	orr.w	r3, r3, #2
 8003930:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	4611      	mov	r1, r2
 800393c:	4618      	mov	r0, r3
 800393e:	f002 fcfa 	bl	8006336 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4413      	add	r3, r2
 800394a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394e:	461a      	mov	r2, r3
 8003950:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003954:	6093      	str	r3, [r2, #8]
}
 8003956:	e277      	b.n	8003e48 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4413      	add	r3, r2
 8003960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b01      	cmp	r3, #1
 800396c:	d135      	bne.n	80039da <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	440b      	add	r3, r1
 800397c:	3358      	adds	r3, #88	; 0x58
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4413      	add	r3, r2
 800398a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	0151      	lsls	r1, r2, #5
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	440a      	add	r2, r1
 8003998:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800399c:	f043 0302 	orr.w	r3, r3, #2
 80039a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f002 fcc2 	bl	8006336 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039be:	461a      	mov	r2, r3
 80039c0:	2301      	movs	r3, #1
 80039c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	440b      	add	r3, r1
 80039d2:	335d      	adds	r3, #93	; 0x5d
 80039d4:	2201      	movs	r2, #1
 80039d6:	701a      	strb	r2, [r3, #0]
}
 80039d8:	e236      	b.n	8003e48 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d12b      	bne.n	8003a48 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fc:	461a      	mov	r2, r3
 80039fe:	2308      	movs	r3, #8
 8003a00:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	0151      	lsls	r1, r2, #5
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	440a      	add	r2, r1
 8003a18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a1c:	f043 0302 	orr.w	r3, r3, #2
 8003a20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f002 fc82 	bl	8006336 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	440b      	add	r3, r1
 8003a40:	335d      	adds	r3, #93	; 0x5d
 8003a42:	2205      	movs	r2, #5
 8003a44:	701a      	strb	r2, [r3, #0]
}
 8003a46:	e1ff      	b.n	8003e48 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b10      	cmp	r3, #16
 8003a5c:	d155      	bne.n	8003b0a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	440b      	add	r3, r1
 8003a6c:	3358      	adds	r3, #88	; 0x58
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	440b      	add	r3, r1
 8003a80:	335d      	adds	r3, #93	; 0x5d
 8003a82:	2203      	movs	r2, #3
 8003a84:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	440b      	add	r3, r1
 8003a94:	333d      	adds	r3, #61	; 0x3d
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d114      	bne.n	8003ac6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	440b      	add	r3, r1
 8003aaa:	333c      	adds	r3, #60	; 0x3c
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	440b      	add	r3, r1
 8003ac0:	333d      	adds	r3, #61	; 0x3d
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	0151      	lsls	r1, r2, #5
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	440a      	add	r2, r1
 8003adc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ae0:	f043 0302 	orr.w	r3, r3, #2
 8003ae4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	4611      	mov	r1, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f002 fc20 	bl	8006336 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b02:	461a      	mov	r2, r3
 8003b04:	2310      	movs	r3, #16
 8003b06:	6093      	str	r3, [r2, #8]
}
 8003b08:	e19e      	b.n	8003e48 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1c:	2b80      	cmp	r3, #128	; 0x80
 8003b1e:	d12b      	bne.n	8003b78 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	0151      	lsls	r1, r2, #5
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	440a      	add	r2, r1
 8003b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b3a:	f043 0302 	orr.w	r3, r3, #2
 8003b3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	4611      	mov	r1, r2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f002 fbf3 	bl	8006336 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	440b      	add	r3, r1
 8003b5e:	335d      	adds	r3, #93	; 0x5d
 8003b60:	2206      	movs	r2, #6
 8003b62:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b70:	461a      	mov	r2, r3
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	6093      	str	r3, [r2, #8]
}
 8003b76:	e167      	b.n	8003e48 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	015a      	lsls	r2, r3, #5
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8e:	d135      	bne.n	8003bfc <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	0151      	lsls	r1, r2, #5
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	440a      	add	r2, r1
 8003ba6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003baa:	f043 0302 	orr.w	r3, r3, #2
 8003bae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	4611      	mov	r1, r2
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f002 fbbb 	bl	8006336 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2310      	movs	r3, #16
 8003bd0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bde:	461a      	mov	r2, r3
 8003be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003be4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	440b      	add	r3, r1
 8003bf4:	335d      	adds	r3, #93	; 0x5d
 8003bf6:	2208      	movs	r2, #8
 8003bf8:	701a      	strb	r2, [r3, #0]
}
 8003bfa:	e125      	b.n	8003e48 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	f040 811a 	bne.w	8003e48 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	0151      	lsls	r1, r2, #5
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	440a      	add	r2, r1
 8003c2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c2e:	f023 0302 	bic.w	r3, r3, #2
 8003c32:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	440b      	add	r3, r1
 8003c42:	335d      	adds	r3, #93	; 0x5d
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d137      	bne.n	8003cba <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	440b      	add	r3, r1
 8003c58:	335c      	adds	r3, #92	; 0x5c
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	440b      	add	r3, r1
 8003c6c:	333f      	adds	r3, #63	; 0x3f
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d00b      	beq.n	8003c8c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	440b      	add	r3, r1
 8003c82:	333f      	adds	r3, #63	; 0x3f
 8003c84:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	f040 80c5 	bne.w	8003e16 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	440b      	add	r3, r1
 8003c9a:	3351      	adds	r3, #81	; 0x51
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	f083 0301 	eor.w	r3, r3, #1
 8003ca2:	b2d8      	uxtb	r0, r3
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	440b      	add	r3, r1
 8003cb2:	3351      	adds	r3, #81	; 0x51
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	701a      	strb	r2, [r3, #0]
 8003cb8:	e0ad      	b.n	8003e16 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	440b      	add	r3, r1
 8003cc8:	335d      	adds	r3, #93	; 0x5d
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d10a      	bne.n	8003ce6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	440b      	add	r3, r1
 8003cde:	335c      	adds	r3, #92	; 0x5c
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	701a      	strb	r2, [r3, #0]
 8003ce4:	e097      	b.n	8003e16 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4613      	mov	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	440b      	add	r3, r1
 8003cf4:	335d      	adds	r3, #93	; 0x5d
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d10a      	bne.n	8003d12 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	440b      	add	r3, r1
 8003d0a:	335c      	adds	r3, #92	; 0x5c
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	701a      	strb	r2, [r3, #0]
 8003d10:	e081      	b.n	8003e16 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	440b      	add	r3, r1
 8003d20:	335d      	adds	r3, #93	; 0x5d
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b05      	cmp	r3, #5
 8003d26:	d10a      	bne.n	8003d3e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	440b      	add	r3, r1
 8003d36:	335c      	adds	r3, #92	; 0x5c
 8003d38:	2205      	movs	r2, #5
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	e06b      	b.n	8003e16 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4613      	mov	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	440b      	add	r3, r1
 8003d4c:	335d      	adds	r3, #93	; 0x5d
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b06      	cmp	r3, #6
 8003d52:	d00a      	beq.n	8003d6a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	440b      	add	r3, r1
 8003d62:	335d      	adds	r3, #93	; 0x5d
 8003d64:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d155      	bne.n	8003e16 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	440b      	add	r3, r1
 8003d78:	3358      	adds	r3, #88	; 0x58
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	1c59      	adds	r1, r3, #1
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	4403      	add	r3, r0
 8003d8c:	3358      	adds	r3, #88	; 0x58
 8003d8e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	440b      	add	r3, r1
 8003d9e:	3358      	adds	r3, #88	; 0x58
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d914      	bls.n	8003dd0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	440b      	add	r3, r1
 8003db4:	3358      	adds	r3, #88	; 0x58
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	440b      	add	r3, r1
 8003dc8:	335c      	adds	r3, #92	; 0x5c
 8003dca:	2204      	movs	r2, #4
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	e009      	b.n	8003de4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	440b      	add	r3, r1
 8003dde:	335c      	adds	r3, #92	; 0x5c
 8003de0:	2202      	movs	r2, #2
 8003de2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dfa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e02:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e10:	461a      	mov	r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e22:	461a      	mov	r2, r3
 8003e24:	2302      	movs	r3, #2
 8003e26:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	b2d8      	uxtb	r0, r3
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	440b      	add	r3, r1
 8003e3a:	335c      	adds	r3, #92	; 0x5c
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4601      	mov	r1, r0
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f008 f866 	bl	800bf14 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003e48:	bf00      	nop
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08a      	sub	sp, #40	; 0x28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	f003 030f 	and.w	r3, r3, #15
 8003e70:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	0c5b      	lsrs	r3, r3, #17
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e84:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d003      	beq.n	8003e94 <HCD_RXQLVL_IRQHandler+0x44>
 8003e8c:	2b05      	cmp	r3, #5
 8003e8e:	f000 8082 	beq.w	8003f96 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003e92:	e083      	b.n	8003f9c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d07f      	beq.n	8003f9a <HCD_RXQLVL_IRQHandler+0x14a>
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3344      	adds	r3, #68	; 0x44
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d074      	beq.n	8003f9a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	440b      	add	r3, r1
 8003ec2:	3344      	adds	r3, #68	; 0x44
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	b292      	uxth	r2, r2
 8003eca:	4619      	mov	r1, r3
 8003ecc:	f001 fdd3 	bl	8005a76 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	440b      	add	r3, r1
 8003ede:	3344      	adds	r3, #68	; 0x44
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	18d1      	adds	r1, r2, r3
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4613      	mov	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	4403      	add	r3, r0
 8003ef4:	3344      	adds	r3, #68	; 0x44
 8003ef6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4613      	mov	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	440b      	add	r3, r1
 8003f06:	334c      	adds	r3, #76	; 0x4c
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	18d1      	adds	r1, r2, r3
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4613      	mov	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4403      	add	r3, r0
 8003f1c:	334c      	adds	r3, #76	; 0x4c
 8003f1e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <HCD_RXQLVL_IRQHandler+0x154>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d031      	beq.n	8003f9a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f4c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f54:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f62:	461a      	mov	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	440b      	add	r3, r1
 8003f76:	3350      	adds	r3, #80	; 0x50
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	f083 0301 	eor.w	r3, r3, #1
 8003f7e:	b2d8      	uxtb	r0, r3
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	440b      	add	r3, r1
 8003f8e:	3350      	adds	r3, #80	; 0x50
 8003f90:	4602      	mov	r2, r0
 8003f92:	701a      	strb	r2, [r3, #0]
      break;
 8003f94:	e001      	b.n	8003f9a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003f96:	bf00      	nop
 8003f98:	e000      	b.n	8003f9c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003f9a:	bf00      	nop
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	3728      	adds	r7, #40	; 0x28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	1ff80000 	.word	0x1ff80000

08003fa8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003fd4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d10b      	bne.n	8003ff8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d102      	bne.n	8003ff0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f007 ff76 	bl	800bedc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f043 0302 	orr.w	r3, r3, #2
 8003ff6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d132      	bne.n	8004068 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f043 0308 	orr.w	r3, r3, #8
 8004008:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b04      	cmp	r3, #4
 8004012:	d126      	bne.n	8004062 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d113      	bne.n	8004044 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004022:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004026:	d106      	bne.n	8004036 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2102      	movs	r1, #2
 800402e:	4618      	mov	r0, r3
 8004030:	f001 fe5c 	bl	8005cec <USB_InitFSLSPClkSel>
 8004034:	e011      	b.n	800405a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2101      	movs	r1, #1
 800403c:	4618      	mov	r0, r3
 800403e:	f001 fe55 	bl	8005cec <USB_InitFSLSPClkSel>
 8004042:	e00a      	b.n	800405a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d106      	bne.n	800405a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004052:	461a      	mov	r2, r3
 8004054:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004058:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f007 ff6c 	bl	800bf38 <HAL_HCD_PortEnabled_Callback>
 8004060:	e002      	b.n	8004068 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f007 ff76 	bl	800bf54 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b20      	cmp	r3, #32
 8004070:	d103      	bne.n	800407a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f043 0320 	orr.w	r3, r3, #32
 8004078:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004080:	461a      	mov	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	6013      	str	r3, [r2, #0]
}
 8004086:	bf00      	nop
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e11f      	b.n	80042e2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fd faa2 	bl	8001600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2224      	movs	r2, #36	; 0x24
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0201 	bic.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040f4:	f001 f9de 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 80040f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	4a7b      	ldr	r2, [pc, #492]	; (80042ec <HAL_I2C_Init+0x25c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d807      	bhi.n	8004114 <HAL_I2C_Init+0x84>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4a7a      	ldr	r2, [pc, #488]	; (80042f0 <HAL_I2C_Init+0x260>)
 8004108:	4293      	cmp	r3, r2
 800410a:	bf94      	ite	ls
 800410c:	2301      	movls	r3, #1
 800410e:	2300      	movhi	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	e006      	b.n	8004122 <HAL_I2C_Init+0x92>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4a77      	ldr	r2, [pc, #476]	; (80042f4 <HAL_I2C_Init+0x264>)
 8004118:	4293      	cmp	r3, r2
 800411a:	bf94      	ite	ls
 800411c:	2301      	movls	r3, #1
 800411e:	2300      	movhi	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e0db      	b.n	80042e2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4a72      	ldr	r2, [pc, #456]	; (80042f8 <HAL_I2C_Init+0x268>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	0c9b      	lsrs	r3, r3, #18
 8004134:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	430a      	orrs	r2, r1
 8004148:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4a64      	ldr	r2, [pc, #400]	; (80042ec <HAL_I2C_Init+0x25c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d802      	bhi.n	8004164 <HAL_I2C_Init+0xd4>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	3301      	adds	r3, #1
 8004162:	e009      	b.n	8004178 <HAL_I2C_Init+0xe8>
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	4a63      	ldr	r2, [pc, #396]	; (80042fc <HAL_I2C_Init+0x26c>)
 8004170:	fba2 2303 	umull	r2, r3, r2, r3
 8004174:	099b      	lsrs	r3, r3, #6
 8004176:	3301      	adds	r3, #1
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6812      	ldr	r2, [r2, #0]
 800417c:	430b      	orrs	r3, r1
 800417e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800418a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4956      	ldr	r1, [pc, #344]	; (80042ec <HAL_I2C_Init+0x25c>)
 8004194:	428b      	cmp	r3, r1
 8004196:	d80d      	bhi.n	80041b4 <HAL_I2C_Init+0x124>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	1e59      	subs	r1, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80041a6:	3301      	adds	r3, #1
 80041a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	bf38      	it	cc
 80041b0:	2304      	movcc	r3, #4
 80041b2:	e04f      	b.n	8004254 <HAL_I2C_Init+0x1c4>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d111      	bne.n	80041e0 <HAL_I2C_Init+0x150>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	1e58      	subs	r0, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6859      	ldr	r1, [r3, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	440b      	add	r3, r1
 80041ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ce:	3301      	adds	r3, #1
 80041d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	bf0c      	ite	eq
 80041d8:	2301      	moveq	r3, #1
 80041da:	2300      	movne	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	e012      	b.n	8004206 <HAL_I2C_Init+0x176>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1e58      	subs	r0, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6859      	ldr	r1, [r3, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	0099      	lsls	r1, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041f6:	3301      	adds	r3, #1
 80041f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_I2C_Init+0x17e>
 800420a:	2301      	movs	r3, #1
 800420c:	e022      	b.n	8004254 <HAL_I2C_Init+0x1c4>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10e      	bne.n	8004234 <HAL_I2C_Init+0x1a4>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1e58      	subs	r0, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6859      	ldr	r1, [r3, #4]
 800421e:	460b      	mov	r3, r1
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	440b      	add	r3, r1
 8004224:	fbb0 f3f3 	udiv	r3, r0, r3
 8004228:	3301      	adds	r3, #1
 800422a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800422e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004232:	e00f      	b.n	8004254 <HAL_I2C_Init+0x1c4>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	1e58      	subs	r0, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6859      	ldr	r1, [r3, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	0099      	lsls	r1, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	fbb0 f3f3 	udiv	r3, r0, r3
 800424a:	3301      	adds	r3, #1
 800424c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	6809      	ldr	r1, [r1, #0]
 8004258:	4313      	orrs	r3, r2
 800425a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69da      	ldr	r2, [r3, #28]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004282:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6911      	ldr	r1, [r2, #16]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	68d2      	ldr	r2, [r2, #12]
 800428e:	4311      	orrs	r1, r2
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	430b      	orrs	r3, r1
 8004296:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0201 	orr.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	000186a0 	.word	0x000186a0
 80042f0:	001e847f 	.word	0x001e847f
 80042f4:	003d08ff 	.word	0x003d08ff
 80042f8:	431bde83 	.word	0x431bde83
 80042fc:	10624dd3 	.word	0x10624dd3

08004300 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e128      	b.n	8004564 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a90      	ldr	r2, [pc, #576]	; (800456c <HAL_I2S_Init+0x26c>)
 800432a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7fd f9af 	bl	8001690 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2202      	movs	r2, #2
 8004336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6812      	ldr	r2, [r2, #0]
 8004344:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004348:	f023 030f 	bic.w	r3, r3, #15
 800434c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2202      	movs	r2, #2
 8004354:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	2b02      	cmp	r3, #2
 800435c:	d060      	beq.n	8004420 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004366:	2310      	movs	r3, #16
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	e001      	b.n	8004370 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800436c:	2320      	movs	r3, #32
 800436e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b20      	cmp	r3, #32
 8004376:	d802      	bhi.n	800437e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800437e:	2001      	movs	r0, #1
 8004380:	f001 f98e 	bl	80056a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004384:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800438e:	d125      	bne.n	80043dc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d010      	beq.n	80043ba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	fbb2 f2f3 	udiv	r2, r2, r3
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	461a      	mov	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b4:	3305      	adds	r3, #5
 80043b6:	613b      	str	r3, [r7, #16]
 80043b8:	e01f      	b.n	80043fa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	461a      	mov	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d6:	3305      	adds	r3, #5
 80043d8:	613b      	str	r3, [r7, #16]
 80043da:	e00e      	b.n	80043fa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	461a      	mov	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f6:	3305      	adds	r3, #5
 80043f8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4a5c      	ldr	r2, [pc, #368]	; (8004570 <HAL_I2S_Init+0x270>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	08db      	lsrs	r3, r3, #3
 8004404:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	085b      	lsrs	r3, r3, #1
 8004416:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	e003      	b.n	8004428 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004420:	2302      	movs	r3, #2
 8004422:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d902      	bls.n	8004434 <HAL_I2S_Init+0x134>
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	2bff      	cmp	r3, #255	; 0xff
 8004432:	d907      	bls.n	8004444 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004438:	f043 0210 	orr.w	r2, r3, #16
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e08f      	b.n	8004564 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	ea42 0103 	orr.w	r1, r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	430a      	orrs	r2, r1
 8004456:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004462:	f023 030f 	bic.w	r3, r3, #15
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6851      	ldr	r1, [r2, #4]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6892      	ldr	r2, [r2, #8]
 800446e:	4311      	orrs	r1, r2
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	68d2      	ldr	r2, [r2, #12]
 8004474:	4311      	orrs	r1, r2
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6992      	ldr	r2, [r2, #24]
 800447a:	430a      	orrs	r2, r1
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004486:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d161      	bne.n	8004554 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a38      	ldr	r2, [pc, #224]	; (8004574 <HAL_I2S_Init+0x274>)
 8004494:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a37      	ldr	r2, [pc, #220]	; (8004578 <HAL_I2S_Init+0x278>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d101      	bne.n	80044a4 <HAL_I2S_Init+0x1a4>
 80044a0:	4b36      	ldr	r3, [pc, #216]	; (800457c <HAL_I2S_Init+0x27c>)
 80044a2:	e001      	b.n	80044a8 <HAL_I2S_Init+0x1a8>
 80044a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	4932      	ldr	r1, [pc, #200]	; (8004578 <HAL_I2S_Init+0x278>)
 80044b0:	428a      	cmp	r2, r1
 80044b2:	d101      	bne.n	80044b8 <HAL_I2S_Init+0x1b8>
 80044b4:	4a31      	ldr	r2, [pc, #196]	; (800457c <HAL_I2S_Init+0x27c>)
 80044b6:	e001      	b.n	80044bc <HAL_I2S_Init+0x1bc>
 80044b8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80044bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80044c0:	f023 030f 	bic.w	r3, r3, #15
 80044c4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2b      	ldr	r2, [pc, #172]	; (8004578 <HAL_I2S_Init+0x278>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d101      	bne.n	80044d4 <HAL_I2S_Init+0x1d4>
 80044d0:	4b2a      	ldr	r3, [pc, #168]	; (800457c <HAL_I2S_Init+0x27c>)
 80044d2:	e001      	b.n	80044d8 <HAL_I2S_Init+0x1d8>
 80044d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044d8:	2202      	movs	r2, #2
 80044da:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a25      	ldr	r2, [pc, #148]	; (8004578 <HAL_I2S_Init+0x278>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d101      	bne.n	80044ea <HAL_I2S_Init+0x1ea>
 80044e6:	4b25      	ldr	r3, [pc, #148]	; (800457c <HAL_I2S_Init+0x27c>)
 80044e8:	e001      	b.n	80044ee <HAL_I2S_Init+0x1ee>
 80044ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044fa:	d003      	beq.n	8004504 <HAL_I2S_Init+0x204>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d103      	bne.n	800450c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	e001      	b.n	8004510 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800450c:	2300      	movs	r3, #0
 800450e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	b299      	uxth	r1, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004526:	4303      	orrs	r3, r0
 8004528:	b29b      	uxth	r3, r3
 800452a:	430b      	orrs	r3, r1
 800452c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800452e:	4313      	orrs	r3, r2
 8004530:	b29a      	uxth	r2, r3
 8004532:	897b      	ldrh	r3, [r7, #10]
 8004534:	4313      	orrs	r3, r2
 8004536:	b29b      	uxth	r3, r3
 8004538:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800453c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a0d      	ldr	r2, [pc, #52]	; (8004578 <HAL_I2S_Init+0x278>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d101      	bne.n	800454c <HAL_I2S_Init+0x24c>
 8004548:	4b0c      	ldr	r3, [pc, #48]	; (800457c <HAL_I2S_Init+0x27c>)
 800454a:	e001      	b.n	8004550 <HAL_I2S_Init+0x250>
 800454c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004550:	897a      	ldrh	r2, [r7, #10]
 8004552:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3720      	adds	r7, #32
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	08004677 	.word	0x08004677
 8004570:	cccccccd 	.word	0xcccccccd
 8004574:	0800478d 	.word	0x0800478d
 8004578:	40003800 	.word	0x40003800
 800457c:	40003400 	.word	0x40003400

08004580 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	881a      	ldrh	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	1c9a      	adds	r2, r3, #2
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10e      	bne.n	8004610 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004600:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff ffb8 	bl	8004580 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004610:	bf00      	nop
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	b292      	uxth	r2, r2
 800462c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004632:	1c9a      	adds	r2, r3, #2
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10e      	bne.n	800466e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800465e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7ff ff93 	bl	8004594 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b086      	sub	sp, #24
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b04      	cmp	r3, #4
 8004690:	d13a      	bne.n	8004708 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b01      	cmp	r3, #1
 800469a:	d109      	bne.n	80046b0 <I2S_IRQHandler+0x3a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b40      	cmp	r3, #64	; 0x40
 80046a8:	d102      	bne.n	80046b0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff ffb4 	bl	8004618 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b6:	2b40      	cmp	r3, #64	; 0x40
 80046b8:	d126      	bne.n	8004708 <I2S_IRQHandler+0x92>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d11f      	bne.n	8004708 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046d8:	2300      	movs	r3, #0
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fa:	f043 0202 	orr.w	r2, r3, #2
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff ff50 	bl	80045a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b03      	cmp	r3, #3
 8004712:	d136      	bne.n	8004782 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b02      	cmp	r3, #2
 800471c:	d109      	bne.n	8004732 <I2S_IRQHandler+0xbc>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004728:	2b80      	cmp	r3, #128	; 0x80
 800472a:	d102      	bne.n	8004732 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff ff45 	bl	80045bc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b08      	cmp	r3, #8
 800473a:	d122      	bne.n	8004782 <I2S_IRQHandler+0x10c>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b20      	cmp	r3, #32
 8004748:	d11b      	bne.n	8004782 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004758:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004774:	f043 0204 	orr.w	r2, r3, #4
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff ff13 	bl	80045a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004782:	bf00      	nop
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4aa2      	ldr	r2, [pc, #648]	; (8004a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d101      	bne.n	80047aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80047a6:	4ba2      	ldr	r3, [pc, #648]	; (8004a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047a8:	e001      	b.n	80047ae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80047aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a9b      	ldr	r2, [pc, #620]	; (8004a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d101      	bne.n	80047c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80047c4:	4b9a      	ldr	r3, [pc, #616]	; (8004a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047c6:	e001      	b.n	80047cc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80047c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d8:	d004      	beq.n	80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f040 8099 	bne.w	8004916 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d107      	bne.n	80047fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f925 	bl	8004a48 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b01      	cmp	r3, #1
 8004806:	d107      	bne.n	8004818 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f9c8 	bl	8004ba8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481e:	2b40      	cmp	r3, #64	; 0x40
 8004820:	d13a      	bne.n	8004898 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f003 0320 	and.w	r3, r3, #32
 8004828:	2b00      	cmp	r3, #0
 800482a:	d035      	beq.n	8004898 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a7e      	ldr	r2, [pc, #504]	; (8004a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d101      	bne.n	800483a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004836:	4b7e      	ldr	r3, [pc, #504]	; (8004a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004838:	e001      	b.n	800483e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800483a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4979      	ldr	r1, [pc, #484]	; (8004a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004846:	428b      	cmp	r3, r1
 8004848:	d101      	bne.n	800484e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800484a:	4b79      	ldr	r3, [pc, #484]	; (8004a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800484c:	e001      	b.n	8004852 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800484e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004852:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004856:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004866:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	f043 0202 	orr.w	r2, r3, #2
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff fe88 	bl	80045a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b08      	cmp	r3, #8
 80048a0:	f040 80be 	bne.w	8004a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 80b8 	beq.w	8004a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a59      	ldr	r2, [pc, #356]	; (8004a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d101      	bne.n	80048ce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80048ca:	4b59      	ldr	r3, [pc, #356]	; (8004a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80048cc:	e001      	b.n	80048d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80048ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4954      	ldr	r1, [pc, #336]	; (8004a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80048da:	428b      	cmp	r3, r1
 80048dc:	d101      	bne.n	80048e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80048de:	4b54      	ldr	r3, [pc, #336]	; (8004a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80048e0:	e001      	b.n	80048e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80048e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048ea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80048ec:	2300      	movs	r3, #0
 80048ee:	60bb      	str	r3, [r7, #8]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	60bb      	str	r3, [r7, #8]
 80048f8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004906:	f043 0204 	orr.w	r2, r3, #4
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff fe4a 	bl	80045a8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004914:	e084      	b.n	8004a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b02      	cmp	r3, #2
 800491e:	d107      	bne.n	8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f8be 	bl	8004aac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b01      	cmp	r3, #1
 8004938:	d107      	bne.n	800494a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f8fd 	bl	8004b44 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004950:	2b40      	cmp	r3, #64	; 0x40
 8004952:	d12f      	bne.n	80049b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b00      	cmp	r3, #0
 800495c:	d02a      	beq.n	80049b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800496c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a2e      	ldr	r2, [pc, #184]	; (8004a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d101      	bne.n	800497c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004978:	4b2d      	ldr	r3, [pc, #180]	; (8004a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800497a:	e001      	b.n	8004980 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800497c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4929      	ldr	r1, [pc, #164]	; (8004a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004988:	428b      	cmp	r3, r1
 800498a:	d101      	bne.n	8004990 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800498c:	4b28      	ldr	r3, [pc, #160]	; (8004a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800498e:	e001      	b.n	8004994 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004990:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004994:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004998:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a6:	f043 0202 	orr.w	r2, r3, #2
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7ff fdfa 	bl	80045a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d131      	bne.n	8004a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d02c      	beq.n	8004a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a17      	ldr	r2, [pc, #92]	; (8004a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d101      	bne.n	80049d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80049d2:	4b17      	ldr	r3, [pc, #92]	; (8004a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80049d4:	e001      	b.n	80049da <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80049d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4912      	ldr	r1, [pc, #72]	; (8004a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80049e2:	428b      	cmp	r3, r1
 80049e4:	d101      	bne.n	80049ea <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80049e6:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80049e8:	e001      	b.n	80049ee <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80049ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049f2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a02:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a10:	f043 0204 	orr.w	r2, r3, #4
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff fdc5 	bl	80045a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a1e:	e000      	b.n	8004a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a20:	bf00      	nop
}
 8004a22:	bf00      	nop
 8004a24:	3720      	adds	r7, #32
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40003800 	.word	0x40003800
 8004a30:	40003400 	.word	0x40003400

08004a34 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	1c99      	adds	r1, r3, #2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6251      	str	r1, [r2, #36]	; 0x24
 8004a5a:	881a      	ldrh	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d113      	bne.n	8004aa2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d106      	bne.n	8004aa2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff ffc9 	bl	8004a34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004aa2:	bf00      	nop
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	1c99      	adds	r1, r3, #2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6251      	str	r1, [r2, #36]	; 0x24
 8004abe:	8819      	ldrh	r1, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1d      	ldr	r2, [pc, #116]	; (8004b3c <I2SEx_TxISR_I2SExt+0x90>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d101      	bne.n	8004ace <I2SEx_TxISR_I2SExt+0x22>
 8004aca:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <I2SEx_TxISR_I2SExt+0x94>)
 8004acc:	e001      	b.n	8004ad2 <I2SEx_TxISR_I2SExt+0x26>
 8004ace:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ad2:	460a      	mov	r2, r1
 8004ad4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d121      	bne.n	8004b32 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a12      	ldr	r2, [pc, #72]	; (8004b3c <I2SEx_TxISR_I2SExt+0x90>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d101      	bne.n	8004afc <I2SEx_TxISR_I2SExt+0x50>
 8004af8:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <I2SEx_TxISR_I2SExt+0x94>)
 8004afa:	e001      	b.n	8004b00 <I2SEx_TxISR_I2SExt+0x54>
 8004afc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	490d      	ldr	r1, [pc, #52]	; (8004b3c <I2SEx_TxISR_I2SExt+0x90>)
 8004b08:	428b      	cmp	r3, r1
 8004b0a:	d101      	bne.n	8004b10 <I2SEx_TxISR_I2SExt+0x64>
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <I2SEx_TxISR_I2SExt+0x94>)
 8004b0e:	e001      	b.n	8004b14 <I2SEx_TxISR_I2SExt+0x68>
 8004b10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b18:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d106      	bne.n	8004b32 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff ff81 	bl	8004a34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40003800 	.word	0x40003800
 8004b40:	40003400 	.word	0x40003400

08004b44 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68d8      	ldr	r0, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	1c99      	adds	r1, r3, #2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004b5c:	b282      	uxth	r2, r0
 8004b5e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d113      	bne.n	8004ba0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b86:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff ff4a 	bl	8004a34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ba0:	bf00      	nop
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a20      	ldr	r2, [pc, #128]	; (8004c38 <I2SEx_RxISR_I2SExt+0x90>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d101      	bne.n	8004bbe <I2SEx_RxISR_I2SExt+0x16>
 8004bba:	4b20      	ldr	r3, [pc, #128]	; (8004c3c <I2SEx_RxISR_I2SExt+0x94>)
 8004bbc:	e001      	b.n	8004bc2 <I2SEx_RxISR_I2SExt+0x1a>
 8004bbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bc2:	68d8      	ldr	r0, [r3, #12]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc8:	1c99      	adds	r1, r3, #2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004bce:	b282      	uxth	r2, r0
 8004bd0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d121      	bne.n	8004c2e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a12      	ldr	r2, [pc, #72]	; (8004c38 <I2SEx_RxISR_I2SExt+0x90>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d101      	bne.n	8004bf8 <I2SEx_RxISR_I2SExt+0x50>
 8004bf4:	4b11      	ldr	r3, [pc, #68]	; (8004c3c <I2SEx_RxISR_I2SExt+0x94>)
 8004bf6:	e001      	b.n	8004bfc <I2SEx_RxISR_I2SExt+0x54>
 8004bf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	490d      	ldr	r1, [pc, #52]	; (8004c38 <I2SEx_RxISR_I2SExt+0x90>)
 8004c04:	428b      	cmp	r3, r1
 8004c06:	d101      	bne.n	8004c0c <I2SEx_RxISR_I2SExt+0x64>
 8004c08:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <I2SEx_RxISR_I2SExt+0x94>)
 8004c0a:	e001      	b.n	8004c10 <I2SEx_RxISR_I2SExt+0x68>
 8004c0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c14:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d106      	bne.n	8004c2e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff ff03 	bl	8004a34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c2e:	bf00      	nop
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40003800 	.word	0x40003800
 8004c3c:	40003400 	.word	0x40003400

08004c40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e25b      	b.n	800510a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d075      	beq.n	8004d4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c5e:	4ba3      	ldr	r3, [pc, #652]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 030c 	and.w	r3, r3, #12
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d00c      	beq.n	8004c84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c6a:	4ba0      	ldr	r3, [pc, #640]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d112      	bne.n	8004c9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c76:	4b9d      	ldr	r3, [pc, #628]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c82:	d10b      	bne.n	8004c9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c84:	4b99      	ldr	r3, [pc, #612]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d05b      	beq.n	8004d48 <HAL_RCC_OscConfig+0x108>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d157      	bne.n	8004d48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e236      	b.n	800510a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca4:	d106      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x74>
 8004ca6:	4b91      	ldr	r3, [pc, #580]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a90      	ldr	r2, [pc, #576]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	e01d      	b.n	8004cf0 <HAL_RCC_OscConfig+0xb0>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cbc:	d10c      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x98>
 8004cbe:	4b8b      	ldr	r3, [pc, #556]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a8a      	ldr	r2, [pc, #552]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	4b88      	ldr	r3, [pc, #544]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a87      	ldr	r2, [pc, #540]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	e00b      	b.n	8004cf0 <HAL_RCC_OscConfig+0xb0>
 8004cd8:	4b84      	ldr	r3, [pc, #528]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a83      	ldr	r2, [pc, #524]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	4b81      	ldr	r3, [pc, #516]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a80      	ldr	r2, [pc, #512]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d013      	beq.n	8004d20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf8:	f7fc fe7e 	bl	80019f8 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d00:	f7fc fe7a 	bl	80019f8 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b64      	cmp	r3, #100	; 0x64
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e1fb      	b.n	800510a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d12:	4b76      	ldr	r3, [pc, #472]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0f0      	beq.n	8004d00 <HAL_RCC_OscConfig+0xc0>
 8004d1e:	e014      	b.n	8004d4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d20:	f7fc fe6a 	bl	80019f8 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d28:	f7fc fe66 	bl	80019f8 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b64      	cmp	r3, #100	; 0x64
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e1e7      	b.n	800510a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d3a:	4b6c      	ldr	r3, [pc, #432]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f0      	bne.n	8004d28 <HAL_RCC_OscConfig+0xe8>
 8004d46:	e000      	b.n	8004d4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d063      	beq.n	8004e1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d56:	4b65      	ldr	r3, [pc, #404]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 030c 	and.w	r3, r3, #12
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00b      	beq.n	8004d7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d62:	4b62      	ldr	r3, [pc, #392]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d11c      	bne.n	8004da8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d6e:	4b5f      	ldr	r3, [pc, #380]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d116      	bne.n	8004da8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d7a:	4b5c      	ldr	r3, [pc, #368]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d005      	beq.n	8004d92 <HAL_RCC_OscConfig+0x152>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d001      	beq.n	8004d92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e1bb      	b.n	800510a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d92:	4b56      	ldr	r3, [pc, #344]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	4952      	ldr	r1, [pc, #328]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004da6:	e03a      	b.n	8004e1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d020      	beq.n	8004df2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004db0:	4b4f      	ldr	r3, [pc, #316]	; (8004ef0 <HAL_RCC_OscConfig+0x2b0>)
 8004db2:	2201      	movs	r2, #1
 8004db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db6:	f7fc fe1f 	bl	80019f8 <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dbe:	f7fc fe1b 	bl	80019f8 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e19c      	b.n	800510a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd0:	4b46      	ldr	r3, [pc, #280]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0f0      	beq.n	8004dbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ddc:	4b43      	ldr	r3, [pc, #268]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	4940      	ldr	r1, [pc, #256]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	600b      	str	r3, [r1, #0]
 8004df0:	e015      	b.n	8004e1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004df2:	4b3f      	ldr	r3, [pc, #252]	; (8004ef0 <HAL_RCC_OscConfig+0x2b0>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df8:	f7fc fdfe 	bl	80019f8 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e00:	f7fc fdfa 	bl	80019f8 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e17b      	b.n	800510a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e12:	4b36      	ldr	r3, [pc, #216]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f0      	bne.n	8004e00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d030      	beq.n	8004e8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d016      	beq.n	8004e60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e32:	4b30      	ldr	r3, [pc, #192]	; (8004ef4 <HAL_RCC_OscConfig+0x2b4>)
 8004e34:	2201      	movs	r2, #1
 8004e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e38:	f7fc fdde 	bl	80019f8 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e3e:	e008      	b.n	8004e52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e40:	f7fc fdda 	bl	80019f8 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e15b      	b.n	800510a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e52:	4b26      	ldr	r3, [pc, #152]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0f0      	beq.n	8004e40 <HAL_RCC_OscConfig+0x200>
 8004e5e:	e015      	b.n	8004e8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e60:	4b24      	ldr	r3, [pc, #144]	; (8004ef4 <HAL_RCC_OscConfig+0x2b4>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e66:	f7fc fdc7 	bl	80019f8 <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e6e:	f7fc fdc3 	bl	80019f8 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e144      	b.n	800510a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e80:	4b1a      	ldr	r3, [pc, #104]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1f0      	bne.n	8004e6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 80a0 	beq.w	8004fda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e9e:	4b13      	ldr	r3, [pc, #76]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10f      	bne.n	8004eca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60bb      	str	r3, [r7, #8]
 8004eae:	4b0f      	ldr	r3, [pc, #60]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	4a0e      	ldr	r2, [pc, #56]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eba:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <HAL_RCC_OscConfig+0x2ac>)
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec2:	60bb      	str	r3, [r7, #8]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eca:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <HAL_RCC_OscConfig+0x2b8>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d121      	bne.n	8004f1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ed6:	4b08      	ldr	r3, [pc, #32]	; (8004ef8 <HAL_RCC_OscConfig+0x2b8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a07      	ldr	r2, [pc, #28]	; (8004ef8 <HAL_RCC_OscConfig+0x2b8>)
 8004edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ee2:	f7fc fd89 	bl	80019f8 <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee8:	e011      	b.n	8004f0e <HAL_RCC_OscConfig+0x2ce>
 8004eea:	bf00      	nop
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	42470000 	.word	0x42470000
 8004ef4:	42470e80 	.word	0x42470e80
 8004ef8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004efc:	f7fc fd7c 	bl	80019f8 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e0fd      	b.n	800510a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0e:	4b81      	ldr	r3, [pc, #516]	; (8005114 <HAL_RCC_OscConfig+0x4d4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f0      	beq.n	8004efc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d106      	bne.n	8004f30 <HAL_RCC_OscConfig+0x2f0>
 8004f22:	4b7d      	ldr	r3, [pc, #500]	; (8005118 <HAL_RCC_OscConfig+0x4d8>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	4a7c      	ldr	r2, [pc, #496]	; (8005118 <HAL_RCC_OscConfig+0x4d8>)
 8004f28:	f043 0301 	orr.w	r3, r3, #1
 8004f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f2e:	e01c      	b.n	8004f6a <HAL_RCC_OscConfig+0x32a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b05      	cmp	r3, #5
 8004f36:	d10c      	bne.n	8004f52 <HAL_RCC_OscConfig+0x312>
 8004f38:	4b77      	ldr	r3, [pc, #476]	; (8005118 <HAL_RCC_OscConfig+0x4d8>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3c:	4a76      	ldr	r2, [pc, #472]	; (8005118 <HAL_RCC_OscConfig+0x4d8>)
 8004f3e:	f043 0304 	orr.w	r3, r3, #4
 8004f42:	6713      	str	r3, [r2, #112]	; 0x70
 8004f44:	4b74      	ldr	r3, [pc, #464]	; (8005118 <HAL_RCC_OscConfig+0x4d8>)
 8004f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f48:	4a73      	ldr	r2, [pc, #460]	; (8005118 <HAL_RCC_OscConfig+0x4d8>)
 8004f4a:	f043 0301 	orr.w	r3, r3, #1
 8004f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f50:	e00b      	b.n	8004f6a <HAL_RCC_OscConfig+0x32a>
 8004f52:	4b71      	ldr	r3, [pc, #452]	; (8005118 <HAL_RCC_OscConfig+0x4d8>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f56:	4a70      	ldr	r2, [pc, #448]	; (8005118 <HAL_RCC_OscConfig+0x4d8>)
 8004f58:	f023 0301 	bic.w	r3, r3, #1
 8004f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f5e:	4b6e      	ldr	r3, [pc, #440]	; (8005118 <HAL_RCC_OscConfig+0x4d8>)
 8004f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f62:	4a6d      	ldr	r2, [pc, #436]	; (8005118 <HAL_RCC_OscConfig+0x4d8>)
 8004f64:	f023 0304 	bic.w	r3, r3, #4
 8004f68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d015      	beq.n	8004f9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f72:	f7fc fd41 	bl	80019f8 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f78:	e00a      	b.n	8004f90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f7a:	f7fc fd3d 	bl	80019f8 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e0bc      	b.n	800510a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f90:	4b61      	ldr	r3, [pc, #388]	; (8005118 <HAL_RCC_OscConfig+0x4d8>)
 8004f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0ee      	beq.n	8004f7a <HAL_RCC_OscConfig+0x33a>
 8004f9c:	e014      	b.n	8004fc8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f9e:	f7fc fd2b 	bl	80019f8 <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa4:	e00a      	b.n	8004fbc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fa6:	f7fc fd27 	bl	80019f8 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e0a6      	b.n	800510a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fbc:	4b56      	ldr	r3, [pc, #344]	; (8005118 <HAL_RCC_OscConfig+0x4d8>)
 8004fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1ee      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fc8:	7dfb      	ldrb	r3, [r7, #23]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d105      	bne.n	8004fda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fce:	4b52      	ldr	r3, [pc, #328]	; (8005118 <HAL_RCC_OscConfig+0x4d8>)
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	4a51      	ldr	r2, [pc, #324]	; (8005118 <HAL_RCC_OscConfig+0x4d8>)
 8004fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 8092 	beq.w	8005108 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fe4:	4b4c      	ldr	r3, [pc, #304]	; (8005118 <HAL_RCC_OscConfig+0x4d8>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 030c 	and.w	r3, r3, #12
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d05c      	beq.n	80050aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d141      	bne.n	800507c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff8:	4b48      	ldr	r3, [pc, #288]	; (800511c <HAL_RCC_OscConfig+0x4dc>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffe:	f7fc fcfb 	bl	80019f8 <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005006:	f7fc fcf7 	bl	80019f8 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e078      	b.n	800510a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005018:	4b3f      	ldr	r3, [pc, #252]	; (8005118 <HAL_RCC_OscConfig+0x4d8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1f0      	bne.n	8005006 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	019b      	lsls	r3, r3, #6
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503a:	085b      	lsrs	r3, r3, #1
 800503c:	3b01      	subs	r3, #1
 800503e:	041b      	lsls	r3, r3, #16
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005046:	061b      	lsls	r3, r3, #24
 8005048:	4933      	ldr	r1, [pc, #204]	; (8005118 <HAL_RCC_OscConfig+0x4d8>)
 800504a:	4313      	orrs	r3, r2
 800504c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800504e:	4b33      	ldr	r3, [pc, #204]	; (800511c <HAL_RCC_OscConfig+0x4dc>)
 8005050:	2201      	movs	r2, #1
 8005052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005054:	f7fc fcd0 	bl	80019f8 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800505c:	f7fc fccc 	bl	80019f8 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e04d      	b.n	800510a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800506e:	4b2a      	ldr	r3, [pc, #168]	; (8005118 <HAL_RCC_OscConfig+0x4d8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f0      	beq.n	800505c <HAL_RCC_OscConfig+0x41c>
 800507a:	e045      	b.n	8005108 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800507c:	4b27      	ldr	r3, [pc, #156]	; (800511c <HAL_RCC_OscConfig+0x4dc>)
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005082:	f7fc fcb9 	bl	80019f8 <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800508a:	f7fc fcb5 	bl	80019f8 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e036      	b.n	800510a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800509c:	4b1e      	ldr	r3, [pc, #120]	; (8005118 <HAL_RCC_OscConfig+0x4d8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1f0      	bne.n	800508a <HAL_RCC_OscConfig+0x44a>
 80050a8:	e02e      	b.n	8005108 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e029      	b.n	800510a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050b6:	4b18      	ldr	r3, [pc, #96]	; (8005118 <HAL_RCC_OscConfig+0x4d8>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d11c      	bne.n	8005104 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d115      	bne.n	8005104 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050de:	4013      	ands	r3, r2
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d10d      	bne.n	8005104 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d106      	bne.n	8005104 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005100:	429a      	cmp	r2, r3
 8005102:	d001      	beq.n	8005108 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e000      	b.n	800510a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	40007000 	.word	0x40007000
 8005118:	40023800 	.word	0x40023800
 800511c:	42470060 	.word	0x42470060

08005120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e0cc      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005134:	4b68      	ldr	r3, [pc, #416]	; (80052d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 030f 	and.w	r3, r3, #15
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d90c      	bls.n	800515c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005142:	4b65      	ldr	r3, [pc, #404]	; (80052d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800514a:	4b63      	ldr	r3, [pc, #396]	; (80052d8 <HAL_RCC_ClockConfig+0x1b8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d001      	beq.n	800515c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e0b8      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d020      	beq.n	80051aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005174:	4b59      	ldr	r3, [pc, #356]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	4a58      	ldr	r2, [pc, #352]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 800517a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800517e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0308 	and.w	r3, r3, #8
 8005188:	2b00      	cmp	r3, #0
 800518a:	d005      	beq.n	8005198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800518c:	4b53      	ldr	r3, [pc, #332]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	4a52      	ldr	r2, [pc, #328]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005198:	4b50      	ldr	r3, [pc, #320]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	494d      	ldr	r1, [pc, #308]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d044      	beq.n	8005240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d107      	bne.n	80051ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051be:	4b47      	ldr	r3, [pc, #284]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d119      	bne.n	80051fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e07f      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d003      	beq.n	80051de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d107      	bne.n	80051ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051de:	4b3f      	ldr	r3, [pc, #252]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d109      	bne.n	80051fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e06f      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ee:	4b3b      	ldr	r3, [pc, #236]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e067      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051fe:	4b37      	ldr	r3, [pc, #220]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f023 0203 	bic.w	r2, r3, #3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	4934      	ldr	r1, [pc, #208]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 800520c:	4313      	orrs	r3, r2
 800520e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005210:	f7fc fbf2 	bl	80019f8 <HAL_GetTick>
 8005214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005216:	e00a      	b.n	800522e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005218:	f7fc fbee 	bl	80019f8 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	f241 3288 	movw	r2, #5000	; 0x1388
 8005226:	4293      	cmp	r3, r2
 8005228:	d901      	bls.n	800522e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e04f      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800522e:	4b2b      	ldr	r3, [pc, #172]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 020c 	and.w	r2, r3, #12
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	429a      	cmp	r2, r3
 800523e:	d1eb      	bne.n	8005218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005240:	4b25      	ldr	r3, [pc, #148]	; (80052d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 030f 	and.w	r3, r3, #15
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d20c      	bcs.n	8005268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524e:	4b22      	ldr	r3, [pc, #136]	; (80052d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005256:	4b20      	ldr	r3, [pc, #128]	; (80052d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d001      	beq.n	8005268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e032      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d008      	beq.n	8005286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005274:	4b19      	ldr	r3, [pc, #100]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	4916      	ldr	r1, [pc, #88]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	4313      	orrs	r3, r2
 8005284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d009      	beq.n	80052a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005292:	4b12      	ldr	r3, [pc, #72]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	490e      	ldr	r1, [pc, #56]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052a6:	f000 f821 	bl	80052ec <HAL_RCC_GetSysClockFreq>
 80052aa:	4601      	mov	r1, r0
 80052ac:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	091b      	lsrs	r3, r3, #4
 80052b2:	f003 030f 	and.w	r3, r3, #15
 80052b6:	4a0a      	ldr	r2, [pc, #40]	; (80052e0 <HAL_RCC_ClockConfig+0x1c0>)
 80052b8:	5cd3      	ldrb	r3, [r2, r3]
 80052ba:	fa21 f303 	lsr.w	r3, r1, r3
 80052be:	4a09      	ldr	r2, [pc, #36]	; (80052e4 <HAL_RCC_ClockConfig+0x1c4>)
 80052c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052c2:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <HAL_RCC_ClockConfig+0x1c8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fc fb52 	bl	8001970 <HAL_InitTick>

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40023c00 	.word	0x40023c00
 80052dc:	40023800 	.word	0x40023800
 80052e0:	0800c6f0 	.word	0x0800c6f0
 80052e4:	200000a0 	.word	0x200000a0
 80052e8:	200000a4 	.word	0x200000a4

080052ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	607b      	str	r3, [r7, #4]
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	2300      	movs	r3, #0
 80052fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005302:	4b63      	ldr	r3, [pc, #396]	; (8005490 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 030c 	and.w	r3, r3, #12
 800530a:	2b04      	cmp	r3, #4
 800530c:	d007      	beq.n	800531e <HAL_RCC_GetSysClockFreq+0x32>
 800530e:	2b08      	cmp	r3, #8
 8005310:	d008      	beq.n	8005324 <HAL_RCC_GetSysClockFreq+0x38>
 8005312:	2b00      	cmp	r3, #0
 8005314:	f040 80b4 	bne.w	8005480 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005318:	4b5e      	ldr	r3, [pc, #376]	; (8005494 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800531a:	60bb      	str	r3, [r7, #8]
       break;
 800531c:	e0b3      	b.n	8005486 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800531e:	4b5e      	ldr	r3, [pc, #376]	; (8005498 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005320:	60bb      	str	r3, [r7, #8]
      break;
 8005322:	e0b0      	b.n	8005486 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005324:	4b5a      	ldr	r3, [pc, #360]	; (8005490 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800532c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800532e:	4b58      	ldr	r3, [pc, #352]	; (8005490 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d04a      	beq.n	80053d0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800533a:	4b55      	ldr	r3, [pc, #340]	; (8005490 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	099b      	lsrs	r3, r3, #6
 8005340:	f04f 0400 	mov.w	r4, #0
 8005344:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	ea03 0501 	and.w	r5, r3, r1
 8005350:	ea04 0602 	and.w	r6, r4, r2
 8005354:	4629      	mov	r1, r5
 8005356:	4632      	mov	r2, r6
 8005358:	f04f 0300 	mov.w	r3, #0
 800535c:	f04f 0400 	mov.w	r4, #0
 8005360:	0154      	lsls	r4, r2, #5
 8005362:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005366:	014b      	lsls	r3, r1, #5
 8005368:	4619      	mov	r1, r3
 800536a:	4622      	mov	r2, r4
 800536c:	1b49      	subs	r1, r1, r5
 800536e:	eb62 0206 	sbc.w	r2, r2, r6
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	f04f 0400 	mov.w	r4, #0
 800537a:	0194      	lsls	r4, r2, #6
 800537c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005380:	018b      	lsls	r3, r1, #6
 8005382:	1a5b      	subs	r3, r3, r1
 8005384:	eb64 0402 	sbc.w	r4, r4, r2
 8005388:	f04f 0100 	mov.w	r1, #0
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	00e2      	lsls	r2, r4, #3
 8005392:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005396:	00d9      	lsls	r1, r3, #3
 8005398:	460b      	mov	r3, r1
 800539a:	4614      	mov	r4, r2
 800539c:	195b      	adds	r3, r3, r5
 800539e:	eb44 0406 	adc.w	r4, r4, r6
 80053a2:	f04f 0100 	mov.w	r1, #0
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	0262      	lsls	r2, r4, #9
 80053ac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80053b0:	0259      	lsls	r1, r3, #9
 80053b2:	460b      	mov	r3, r1
 80053b4:	4614      	mov	r4, r2
 80053b6:	4618      	mov	r0, r3
 80053b8:	4621      	mov	r1, r4
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f04f 0400 	mov.w	r4, #0
 80053c0:	461a      	mov	r2, r3
 80053c2:	4623      	mov	r3, r4
 80053c4:	f7fa ff04 	bl	80001d0 <__aeabi_uldivmod>
 80053c8:	4603      	mov	r3, r0
 80053ca:	460c      	mov	r4, r1
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	e049      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053d0:	4b2f      	ldr	r3, [pc, #188]	; (8005490 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	099b      	lsrs	r3, r3, #6
 80053d6:	f04f 0400 	mov.w	r4, #0
 80053da:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053de:	f04f 0200 	mov.w	r2, #0
 80053e2:	ea03 0501 	and.w	r5, r3, r1
 80053e6:	ea04 0602 	and.w	r6, r4, r2
 80053ea:	4629      	mov	r1, r5
 80053ec:	4632      	mov	r2, r6
 80053ee:	f04f 0300 	mov.w	r3, #0
 80053f2:	f04f 0400 	mov.w	r4, #0
 80053f6:	0154      	lsls	r4, r2, #5
 80053f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80053fc:	014b      	lsls	r3, r1, #5
 80053fe:	4619      	mov	r1, r3
 8005400:	4622      	mov	r2, r4
 8005402:	1b49      	subs	r1, r1, r5
 8005404:	eb62 0206 	sbc.w	r2, r2, r6
 8005408:	f04f 0300 	mov.w	r3, #0
 800540c:	f04f 0400 	mov.w	r4, #0
 8005410:	0194      	lsls	r4, r2, #6
 8005412:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005416:	018b      	lsls	r3, r1, #6
 8005418:	1a5b      	subs	r3, r3, r1
 800541a:	eb64 0402 	sbc.w	r4, r4, r2
 800541e:	f04f 0100 	mov.w	r1, #0
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	00e2      	lsls	r2, r4, #3
 8005428:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800542c:	00d9      	lsls	r1, r3, #3
 800542e:	460b      	mov	r3, r1
 8005430:	4614      	mov	r4, r2
 8005432:	195b      	adds	r3, r3, r5
 8005434:	eb44 0406 	adc.w	r4, r4, r6
 8005438:	f04f 0100 	mov.w	r1, #0
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	02a2      	lsls	r2, r4, #10
 8005442:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005446:	0299      	lsls	r1, r3, #10
 8005448:	460b      	mov	r3, r1
 800544a:	4614      	mov	r4, r2
 800544c:	4618      	mov	r0, r3
 800544e:	4621      	mov	r1, r4
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f04f 0400 	mov.w	r4, #0
 8005456:	461a      	mov	r2, r3
 8005458:	4623      	mov	r3, r4
 800545a:	f7fa feb9 	bl	80001d0 <__aeabi_uldivmod>
 800545e:	4603      	mov	r3, r0
 8005460:	460c      	mov	r4, r1
 8005462:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005464:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	0c1b      	lsrs	r3, r3, #16
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	3301      	adds	r3, #1
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	fbb2 f3f3 	udiv	r3, r2, r3
 800547c:	60bb      	str	r3, [r7, #8]
      break;
 800547e:	e002      	b.n	8005486 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005480:	4b04      	ldr	r3, [pc, #16]	; (8005494 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005482:	60bb      	str	r3, [r7, #8]
      break;
 8005484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005486:	68bb      	ldr	r3, [r7, #8]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005490:	40023800 	.word	0x40023800
 8005494:	00f42400 	.word	0x00f42400
 8005498:	007a1200 	.word	0x007a1200

0800549c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054a0:	4b03      	ldr	r3, [pc, #12]	; (80054b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80054a2:	681b      	ldr	r3, [r3, #0]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	200000a0 	.word	0x200000a0

080054b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054b8:	f7ff fff0 	bl	800549c <HAL_RCC_GetHCLKFreq>
 80054bc:	4601      	mov	r1, r0
 80054be:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	0a9b      	lsrs	r3, r3, #10
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	4a03      	ldr	r2, [pc, #12]	; (80054d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ca:	5cd3      	ldrb	r3, [r2, r3]
 80054cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40023800 	.word	0x40023800
 80054d8:	0800c700 	.word	0x0800c700

080054dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d105      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005500:	2b00      	cmp	r3, #0
 8005502:	d035      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005504:	4b62      	ldr	r3, [pc, #392]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005506:	2200      	movs	r2, #0
 8005508:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800550a:	f7fc fa75 	bl	80019f8 <HAL_GetTick>
 800550e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005510:	e008      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005512:	f7fc fa71 	bl	80019f8 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e0b0      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005524:	4b5b      	ldr	r3, [pc, #364]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1f0      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	019a      	lsls	r2, r3, #6
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	071b      	lsls	r3, r3, #28
 800553c:	4955      	ldr	r1, [pc, #340]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005544:	4b52      	ldr	r3, [pc, #328]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005546:	2201      	movs	r2, #1
 8005548:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800554a:	f7fc fa55 	bl	80019f8 <HAL_GetTick>
 800554e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005550:	e008      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005552:	f7fc fa51 	bl	80019f8 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d901      	bls.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e090      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005564:	4b4b      	ldr	r3, [pc, #300]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0f0      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 8083 	beq.w	8005684 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800557e:	2300      	movs	r3, #0
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	4b44      	ldr	r3, [pc, #272]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	4a43      	ldr	r2, [pc, #268]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800558c:	6413      	str	r3, [r2, #64]	; 0x40
 800558e:	4b41      	ldr	r3, [pc, #260]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800559a:	4b3f      	ldr	r3, [pc, #252]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a3e      	ldr	r2, [pc, #248]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055a6:	f7fc fa27 	bl	80019f8 <HAL_GetTick>
 80055aa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055ac:	e008      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055ae:	f7fc fa23 	bl	80019f8 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e062      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055c0:	4b35      	ldr	r3, [pc, #212]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0f0      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055cc:	4b31      	ldr	r3, [pc, #196]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d02f      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d028      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055ea:	4b2a      	ldr	r3, [pc, #168]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055f4:	4b29      	ldr	r3, [pc, #164]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055fa:	4b28      	ldr	r3, [pc, #160]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005600:	4a24      	ldr	r2, [pc, #144]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005606:	4b23      	ldr	r3, [pc, #140]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b01      	cmp	r3, #1
 8005610:	d114      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005612:	f7fc f9f1 	bl	80019f8 <HAL_GetTick>
 8005616:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005618:	e00a      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800561a:	f7fc f9ed 	bl	80019f8 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	f241 3288 	movw	r2, #5000	; 0x1388
 8005628:	4293      	cmp	r3, r2
 800562a:	d901      	bls.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e02a      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005630:	4b18      	ldr	r3, [pc, #96]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0ee      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005644:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005648:	d10d      	bne.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800564a:	4b12      	ldr	r3, [pc, #72]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800565a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800565e:	490d      	ldr	r1, [pc, #52]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005660:	4313      	orrs	r3, r2
 8005662:	608b      	str	r3, [r1, #8]
 8005664:	e005      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005666:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	4a0a      	ldr	r2, [pc, #40]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800566c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005670:	6093      	str	r3, [r2, #8]
 8005672:	4b08      	ldr	r3, [pc, #32]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005674:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800567e:	4905      	ldr	r1, [pc, #20]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005680:	4313      	orrs	r3, r2
 8005682:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	42470068 	.word	0x42470068
 8005694:	40023800 	.word	0x40023800
 8005698:	40007000 	.word	0x40007000
 800569c:	42470e40 	.word	0x42470e40

080056a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d13d      	bne.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80056be:	4b22      	ldr	r3, [pc, #136]	; (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056c6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d004      	beq.n	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d12f      	bne.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80056d2:	4b1e      	ldr	r3, [pc, #120]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80056d4:	617b      	str	r3, [r7, #20]
          break;
 80056d6:	e02f      	b.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80056d8:	4b1b      	ldr	r3, [pc, #108]	; (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056e4:	d108      	bne.n	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056e6:	4b18      	ldr	r3, [pc, #96]	; (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056ee:	4a18      	ldr	r2, [pc, #96]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f4:	613b      	str	r3, [r7, #16]
 80056f6:	e007      	b.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056f8:	4b13      	ldr	r3, [pc, #76]	; (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005700:	4a14      	ldr	r2, [pc, #80]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005702:	fbb2 f3f3 	udiv	r3, r2, r3
 8005706:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005708:	4b0f      	ldr	r3, [pc, #60]	; (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800570a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800570e:	099b      	lsrs	r3, r3, #6
 8005710:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	fb02 f303 	mul.w	r3, r2, r3
 800571a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800571c:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800571e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005722:	0f1b      	lsrs	r3, r3, #28
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	fbb2 f3f3 	udiv	r3, r2, r3
 800572e:	617b      	str	r3, [r7, #20]
          break;
 8005730:	e002      	b.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	617b      	str	r3, [r7, #20]
          break;
 8005736:	bf00      	nop
        }
      }
      break;
 8005738:	bf00      	nop
    }
  }
  return frequency;
 800573a:	697b      	ldr	r3, [r7, #20]
}
 800573c:	4618      	mov	r0, r3
 800573e:	371c      	adds	r7, #28
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	40023800 	.word	0x40023800
 800574c:	00bb8000 	.word	0x00bb8000
 8005750:	007a1200 	.word	0x007a1200
 8005754:	00f42400 	.word	0x00f42400

08005758 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e056      	b.n	8005818 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d106      	bne.n	800578a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7fb ffeb 	bl	8001760 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2202      	movs	r2, #2
 800578e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057a0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	431a      	orrs	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	431a      	orrs	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	ea42 0103 	orr.w	r1, r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	0c1b      	lsrs	r3, r3, #16
 80057e8:	f003 0104 	and.w	r1, r3, #4
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	69da      	ldr	r2, [r3, #28]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005806:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005820:	b084      	sub	sp, #16
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	f107 001c 	add.w	r0, r7, #28
 800582e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	2b01      	cmp	r3, #1
 8005836:	d122      	bne.n	800587e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800584c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005862:	2b01      	cmp	r3, #1
 8005864:	d105      	bne.n	8005872 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f94a 	bl	8005b0c <USB_CoreReset>
 8005878:	4603      	mov	r3, r0
 800587a:	73fb      	strb	r3, [r7, #15]
 800587c:	e01a      	b.n	80058b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f93e 	bl	8005b0c <USB_CoreReset>
 8005890:	4603      	mov	r3, r0
 8005892:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005896:	2b00      	cmp	r3, #0
 8005898:	d106      	bne.n	80058a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	639a      	str	r2, [r3, #56]	; 0x38
 80058a6:	e005      	b.n	80058b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d10b      	bne.n	80058d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f043 0206 	orr.w	r2, r3, #6
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f043 0220 	orr.w	r2, r3, #32
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058de:	b004      	add	sp, #16
 80058e0:	4770      	bx	lr

080058e2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f043 0201 	orr.w	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f023 0201 	bic.w	r2, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b082      	sub	sp, #8
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	460b      	mov	r3, r1
 8005930:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800593e:	78fb      	ldrb	r3, [r7, #3]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d106      	bne.n	8005952 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	60da      	str	r2, [r3, #12]
 8005950:	e00b      	b.n	800596a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005952:	78fb      	ldrb	r3, [r7, #3]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d106      	bne.n	8005966 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	60da      	str	r2, [r3, #12]
 8005964:	e001      	b.n	800596a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e003      	b.n	8005972 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800596a:	2032      	movs	r0, #50	; 0x32
 800596c:	f7fc f850 	bl	8001a10 <HAL_Delay>

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
	...

0800597c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	019b      	lsls	r3, r3, #6
 800598e:	f043 0220 	orr.w	r2, r3, #32
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	3301      	adds	r3, #1
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4a09      	ldr	r2, [pc, #36]	; (80059c4 <USB_FlushTxFifo+0x48>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d901      	bls.n	80059a8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e006      	b.n	80059b6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	f003 0320 	and.w	r3, r3, #32
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	d0f0      	beq.n	8005996 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	00030d40 	.word	0x00030d40

080059c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2210      	movs	r2, #16
 80059d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3301      	adds	r3, #1
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4a09      	ldr	r2, [pc, #36]	; (8005a08 <USB_FlushRxFifo+0x40>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d901      	bls.n	80059ec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e006      	b.n	80059fa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	f003 0310 	and.w	r3, r3, #16
 80059f4:	2b10      	cmp	r3, #16
 80059f6:	d0f0      	beq.n	80059da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	00030d40 	.word	0x00030d40

08005a0c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b089      	sub	sp, #36	; 0x24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	4611      	mov	r1, r2
 8005a18:	461a      	mov	r2, r3
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	71fb      	strb	r3, [r7, #7]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005a2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d11a      	bne.n	8005a68 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a32:	88bb      	ldrh	r3, [r7, #4]
 8005a34:	3303      	adds	r3, #3
 8005a36:	089b      	lsrs	r3, r3, #2
 8005a38:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	e00f      	b.n	8005a60 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a40:	79fb      	ldrb	r3, [r7, #7]
 8005a42:	031a      	lsls	r2, r3, #12
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	3304      	adds	r3, #4
 8005a58:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	61bb      	str	r3, [r7, #24]
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d3eb      	bcc.n	8005a40 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3724      	adds	r7, #36	; 0x24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b089      	sub	sp, #36	; 0x24
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	60f8      	str	r0, [r7, #12]
 8005a7e:	60b9      	str	r1, [r7, #8]
 8005a80:	4613      	mov	r3, r2
 8005a82:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005a8c:	88fb      	ldrh	r3, [r7, #6]
 8005a8e:	3303      	adds	r3, #3
 8005a90:	089b      	lsrs	r3, r3, #2
 8005a92:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005a94:	2300      	movs	r3, #0
 8005a96:	61bb      	str	r3, [r7, #24]
 8005a98:	e00b      	b.n	8005ab2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	601a      	str	r2, [r3, #0]
    pDest++;
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	61bb      	str	r3, [r7, #24]
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d3ef      	bcc.n	8005a9a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005aba:	69fb      	ldr	r3, [r7, #28]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3724      	adds	r7, #36	; 0x24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4013      	ands	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f003 0301 	and.w	r3, r3, #1
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
	...

08005b0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4a13      	ldr	r2, [pc, #76]	; (8005b70 <USB_CoreReset+0x64>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d901      	bls.n	8005b2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e01b      	b.n	8005b62 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	daf2      	bge.n	8005b18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f043 0201 	orr.w	r2, r3, #1
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3301      	adds	r3, #1
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4a09      	ldr	r2, [pc, #36]	; (8005b70 <USB_CoreReset+0x64>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d901      	bls.n	8005b54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e006      	b.n	8005b62 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d0f0      	beq.n	8005b42 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	00030d40 	.word	0x00030d40

08005b74 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b74:	b084      	sub	sp, #16
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	f107 001c 	add.w	r0, r7, #28
 8005b82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b90:	461a      	mov	r2, r3
 8005b92:	2300      	movs	r3, #0
 8005b94:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d018      	beq.n	8005bf8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d10a      	bne.n	8005be2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bda:	f043 0304 	orr.w	r3, r3, #4
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	e014      	b.n	8005c0c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bf0:	f023 0304 	bic.w	r3, r3, #4
 8005bf4:	6013      	str	r3, [r2, #0]
 8005bf6:	e009      	b.n	8005c0c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c06:	f023 0304 	bic.w	r3, r3, #4
 8005c0a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005c0c:	2110      	movs	r1, #16
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7ff feb4 	bl	800597c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7ff fed7 	bl	80059c8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	e015      	b.n	8005c4c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c32:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c40:	461a      	mov	r2, r3
 8005c42:	2300      	movs	r3, #0
 8005c44:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d3e5      	bcc.n	8005c20 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005c54:	2101      	movs	r1, #1
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f8ac 	bl	8005db4 <USB_DriveVbus>

  HAL_Delay(200U);
 8005c5c:	20c8      	movs	r0, #200	; 0xc8
 8005c5e:	f7fb fed7 	bl	8001a10 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c6e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00b      	beq.n	8005c94 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c82:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a14      	ldr	r2, [pc, #80]	; (8005cd8 <USB_HostInit+0x164>)
 8005c88:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a13      	ldr	r2, [pc, #76]	; (8005cdc <USB_HostInit+0x168>)
 8005c8e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005c92:	e009      	b.n	8005ca8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2280      	movs	r2, #128	; 0x80
 8005c98:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a10      	ldr	r2, [pc, #64]	; (8005ce0 <USB_HostInit+0x16c>)
 8005c9e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a10      	ldr	r2, [pc, #64]	; (8005ce4 <USB_HostInit+0x170>)
 8005ca4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d105      	bne.n	8005cba <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	f043 0210 	orr.w	r2, r3, #16
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <USB_HostInit+0x174>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cd2:	b004      	add	sp, #16
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	01000200 	.word	0x01000200
 8005cdc:	00e00300 	.word	0x00e00300
 8005ce0:	00600080 	.word	0x00600080
 8005ce4:	004000e0 	.word	0x004000e0
 8005ce8:	a3200008 	.word	0xa3200008

08005cec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d0a:	f023 0303 	bic.w	r3, r3, #3
 8005d0e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	68f9      	ldr	r1, [r7, #12]
 8005d20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d24:	4313      	orrs	r3, r2
 8005d26:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d107      	bne.n	8005d3e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d34:	461a      	mov	r2, r3
 8005d36:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d3a:	6053      	str	r3, [r2, #4]
 8005d3c:	e009      	b.n	8005d52 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d106      	bne.n	8005d52 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005d50:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005d80:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d8e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005d90:	2064      	movs	r0, #100	; 0x64
 8005d92:	f7fb fe3d 	bl	8001a10 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005da2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005da4:	200a      	movs	r0, #10
 8005da6:	f7fb fe33 	bl	8001a10 <HAL_Delay>

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005dd8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d109      	bne.n	8005df8 <USB_DriveVbus+0x44>
 8005de4:	78fb      	ldrb	r3, [r7, #3]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d106      	bne.n	8005df8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005df2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005df6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e02:	d109      	bne.n	8005e18 <USB_DriveVbus+0x64>
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d106      	bne.n	8005e18 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e16:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	0c5b      	lsrs	r3, r3, #17
 8005e44:	f003 0303 	and.w	r3, r3, #3
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	b29b      	uxth	r3, r3
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
	...

08005e78 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	4608      	mov	r0, r1
 8005e82:	4611      	mov	r1, r2
 8005e84:	461a      	mov	r2, r3
 8005e86:	4603      	mov	r3, r0
 8005e88:	70fb      	strb	r3, [r7, #3]
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	70bb      	strb	r3, [r7, #2]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005e9a:	78fb      	ldrb	r3, [r7, #3]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8005eac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005eae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d87e      	bhi.n	8005fb4 <USB_HC_Init+0x13c>
 8005eb6:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <USB_HC_Init+0x44>)
 8005eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebc:	08005ecd 	.word	0x08005ecd
 8005ec0:	08005f77 	.word	0x08005f77
 8005ec4:	08005ecd 	.word	0x08005ecd
 8005ec8:	08005f39 	.word	0x08005f39
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ecc:	78fb      	ldrb	r3, [r7, #3]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed8:	461a      	mov	r2, r3
 8005eda:	f240 439d 	movw	r3, #1181	; 0x49d
 8005ede:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ee0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	da10      	bge.n	8005f0a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ee8:	78fb      	ldrb	r3, [r7, #3]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	78fa      	ldrb	r2, [r7, #3]
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f06:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005f08:	e057      	b.n	8005fba <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d051      	beq.n	8005fba <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	78fa      	ldrb	r2, [r7, #3]
 8005f26:	0151      	lsls	r1, r2, #5
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	440a      	add	r2, r1
 8005f2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f30:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f34:	60d3      	str	r3, [r2, #12]
      break;
 8005f36:	e040      	b.n	8005fba <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f44:	461a      	mov	r2, r3
 8005f46:	f240 639d 	movw	r3, #1693	; 0x69d
 8005f4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	da34      	bge.n	8005fbe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f54:	78fb      	ldrb	r3, [r7, #3]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	78fa      	ldrb	r2, [r7, #3]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f72:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005f74:	e023      	b.n	8005fbe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f82:	461a      	mov	r2, r3
 8005f84:	f240 2325 	movw	r3, #549	; 0x225
 8005f88:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	da17      	bge.n	8005fc2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	78fa      	ldrb	r2, [r7, #3]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fac:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005fb0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005fb2:	e006      	b.n	8005fc2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8005fb8:	e004      	b.n	8005fc4 <USB_HC_Init+0x14c>
      break;
 8005fba:	bf00      	nop
 8005fbc:	e002      	b.n	8005fc4 <USB_HC_Init+0x14c>
      break;
 8005fbe:	bf00      	nop
 8005fc0:	e000      	b.n	8005fc4 <USB_HC_Init+0x14c>
      break;
 8005fc2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fca:	699a      	ldr	r2, [r3, #24]
 8005fcc:	78fb      	ldrb	r3, [r7, #3]
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd8:	68b9      	ldr	r1, [r7, #8]
 8005fda:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005fee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	da03      	bge.n	8005ffe <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ffa:	613b      	str	r3, [r7, #16]
 8005ffc:	e001      	b.n	8006002 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006002:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006006:	2b02      	cmp	r3, #2
 8006008:	d103      	bne.n	8006012 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800600a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	e001      	b.n	8006016 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006016:	787b      	ldrb	r3, [r7, #1]
 8006018:	059b      	lsls	r3, r3, #22
 800601a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800601e:	78bb      	ldrb	r3, [r7, #2]
 8006020:	02db      	lsls	r3, r3, #11
 8006022:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006026:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006028:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800602c:	049b      	lsls	r3, r3, #18
 800602e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006032:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006034:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006036:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800603a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006040:	78fb      	ldrb	r3, [r7, #3]
 8006042:	0159      	lsls	r1, r3, #5
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	440b      	add	r3, r1
 8006048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006052:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006054:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006058:	2b03      	cmp	r3, #3
 800605a:	d10f      	bne.n	800607c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800605c:	78fb      	ldrb	r3, [r7, #3]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4413      	add	r3, r2
 8006064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	78fa      	ldrb	r2, [r7, #3]
 800606c:	0151      	lsls	r1, r2, #5
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	440a      	add	r2, r1
 8006072:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006076:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800607a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800607c:	7dfb      	ldrb	r3, [r7, #23]
}
 800607e:	4618      	mov	r0, r3
 8006080:	371c      	adds	r7, #28
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop

0800608c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08c      	sub	sp, #48	; 0x30
 8006090:	af02      	add	r7, sp, #8
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	4613      	mov	r3, r2
 8006098:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	785b      	ldrb	r3, [r3, #1]
 80060a2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80060a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060a8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d028      	beq.n	8006108 <USB_HC_StartXfer+0x7c>
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	791b      	ldrb	r3, [r3, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d124      	bne.n	8006108 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80060be:	79fb      	ldrb	r3, [r7, #7]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10b      	bne.n	80060dc <USB_HC_StartXfer+0x50>
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	795b      	ldrb	r3, [r3, #5]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d107      	bne.n	80060dc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	785b      	ldrb	r3, [r3, #1]
 80060d0:	4619      	mov	r1, r3
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 fa2e 	bl	8006534 <USB_DoPing>
      return HAL_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	e112      	b.n	8006302 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80060dc:	79fb      	ldrb	r3, [r7, #7]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d112      	bne.n	8006108 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	69fa      	ldr	r2, [r7, #28]
 80060f2:	0151      	lsls	r1, r2, #5
 80060f4:	6a3a      	ldr	r2, [r7, #32]
 80060f6:	440a      	add	r2, r1
 80060f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060fc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006100:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2200      	movs	r2, #0
 8006106:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d018      	beq.n	8006142 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	8912      	ldrh	r2, [r2, #8]
 8006118:	4413      	add	r3, r2
 800611a:	3b01      	subs	r3, #1
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	8912      	ldrh	r2, [r2, #8]
 8006120:	fbb3 f3f2 	udiv	r3, r3, r2
 8006124:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006126:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006128:	8b7b      	ldrh	r3, [r7, #26]
 800612a:	429a      	cmp	r2, r3
 800612c:	d90b      	bls.n	8006146 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800612e:	8b7b      	ldrh	r3, [r7, #26]
 8006130:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006132:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	8912      	ldrh	r2, [r2, #8]
 8006138:	fb02 f203 	mul.w	r2, r2, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	611a      	str	r2, [r3, #16]
 8006140:	e001      	b.n	8006146 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006142:	2301      	movs	r3, #1
 8006144:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	78db      	ldrb	r3, [r3, #3]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d006      	beq.n	800615c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800614e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	8912      	ldrh	r2, [r2, #8]
 8006154:	fb02 f203 	mul.w	r2, r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006164:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006166:	04d9      	lsls	r1, r3, #19
 8006168:	4b68      	ldr	r3, [pc, #416]	; (800630c <USB_HC_StartXfer+0x280>)
 800616a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800616c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	7a9b      	ldrb	r3, [r3, #10]
 8006172:	075b      	lsls	r3, r3, #29
 8006174:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006178:	69f9      	ldr	r1, [r7, #28]
 800617a:	0148      	lsls	r0, r1, #5
 800617c:	6a39      	ldr	r1, [r7, #32]
 800617e:	4401      	add	r1, r0
 8006180:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006184:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006186:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006188:	79fb      	ldrb	r3, [r7, #7]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d009      	beq.n	80061a2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	68d9      	ldr	r1, [r3, #12]
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	4413      	add	r3, r2
 800619a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619e:	460a      	mov	r2, r1
 80061a0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	bf0c      	ite	eq
 80061b2:	2301      	moveq	r3, #1
 80061b4:	2300      	movne	r3, #0
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	69fa      	ldr	r2, [r7, #28]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	6a3a      	ldr	r2, [r7, #32]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061d8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	7e7b      	ldrb	r3, [r7, #25]
 80061ea:	075b      	lsls	r3, r3, #29
 80061ec:	69f9      	ldr	r1, [r7, #28]
 80061ee:	0148      	lsls	r0, r1, #5
 80061f0:	6a39      	ldr	r1, [r7, #32]
 80061f2:	4401      	add	r1, r0
 80061f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80061f8:	4313      	orrs	r3, r2
 80061fa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	4413      	add	r3, r2
 8006204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a41      	ldr	r2, [pc, #260]	; (8006310 <USB_HC_StartXfer+0x284>)
 800620c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800620e:	4b40      	ldr	r3, [pc, #256]	; (8006310 <USB_HC_StartXfer+0x284>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006216:	4a3e      	ldr	r2, [pc, #248]	; (8006310 <USB_HC_StartXfer+0x284>)
 8006218:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	78db      	ldrb	r3, [r3, #3]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d006      	beq.n	8006230 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006222:	4b3b      	ldr	r3, [pc, #236]	; (8006310 <USB_HC_StartXfer+0x284>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800622a:	4a39      	ldr	r2, [pc, #228]	; (8006310 <USB_HC_StartXfer+0x284>)
 800622c:	6013      	str	r3, [r2, #0]
 800622e:	e005      	b.n	800623c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006230:	4b37      	ldr	r3, [pc, #220]	; (8006310 <USB_HC_StartXfer+0x284>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006238:	4a35      	ldr	r2, [pc, #212]	; (8006310 <USB_HC_StartXfer+0x284>)
 800623a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800623c:	4b34      	ldr	r3, [pc, #208]	; (8006310 <USB_HC_StartXfer+0x284>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006244:	4a32      	ldr	r2, [pc, #200]	; (8006310 <USB_HC_StartXfer+0x284>)
 8006246:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	4413      	add	r3, r2
 8006250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006254:	461a      	mov	r2, r3
 8006256:	4b2e      	ldr	r3, [pc, #184]	; (8006310 <USB_HC_StartXfer+0x284>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d14e      	bne.n	8006300 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	78db      	ldrb	r3, [r3, #3]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d14a      	bne.n	8006300 <USB_HC_StartXfer+0x274>
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d046      	beq.n	8006300 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	79db      	ldrb	r3, [r3, #7]
 8006276:	2b03      	cmp	r3, #3
 8006278:	d830      	bhi.n	80062dc <USB_HC_StartXfer+0x250>
 800627a:	a201      	add	r2, pc, #4	; (adr r2, 8006280 <USB_HC_StartXfer+0x1f4>)
 800627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006280:	08006291 	.word	0x08006291
 8006284:	080062b5 	.word	0x080062b5
 8006288:	08006291 	.word	0x08006291
 800628c:	080062b5 	.word	0x080062b5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	3303      	adds	r3, #3
 8006296:	089b      	lsrs	r3, r3, #2
 8006298:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800629a:	8afa      	ldrh	r2, [r7, #22]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d91c      	bls.n	80062e0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	f043 0220 	orr.w	r2, r3, #32
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	619a      	str	r2, [r3, #24]
          }
          break;
 80062b2:	e015      	b.n	80062e0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	3303      	adds	r3, #3
 80062ba:	089b      	lsrs	r3, r3, #2
 80062bc:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80062be:	8afa      	ldrh	r2, [r7, #22]
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d90a      	bls.n	80062e4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	619a      	str	r2, [r3, #24]
          }
          break;
 80062da:	e003      	b.n	80062e4 <USB_HC_StartXfer+0x258>

        default:
          break;
 80062dc:	bf00      	nop
 80062de:	e002      	b.n	80062e6 <USB_HC_StartXfer+0x25a>
          break;
 80062e0:	bf00      	nop
 80062e2:	e000      	b.n	80062e6 <USB_HC_StartXfer+0x25a>
          break;
 80062e4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	68d9      	ldr	r1, [r3, #12]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	785a      	ldrb	r2, [r3, #1]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	b298      	uxth	r0, r3
 80062f4:	2300      	movs	r3, #0
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	4603      	mov	r3, r0
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f7ff fb86 	bl	8005a0c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3728      	adds	r7, #40	; 0x28
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	1ff80000 	.word	0x1ff80000
 8006310:	20000154 	.word	0x20000154

08006314 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	b29b      	uxth	r3, r3
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006336:	b480      	push	{r7}
 8006338:	b087      	sub	sp, #28
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	460b      	mov	r3, r1
 8006340:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800634a:	2300      	movs	r3, #0
 800634c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	4413      	add	r3, r2
 8006356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	0c9b      	lsrs	r3, r3, #18
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <USB_HC_Halt+0x3a>
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b02      	cmp	r3, #2
 800636e:	d16c      	bne.n	800644a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	4413      	add	r3, r2
 8006378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	0151      	lsls	r1, r2, #5
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	440a      	add	r2, r1
 8006386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800638a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800638e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d143      	bne.n	8006424 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	0151      	lsls	r1, r2, #5
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	440a      	add	r2, r1
 80063b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	0151      	lsls	r1, r2, #5
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	440a      	add	r2, r1
 80063f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063fa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	3301      	adds	r3, #1
 8006400:	617b      	str	r3, [r7, #20]
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006408:	d81d      	bhi.n	8006446 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	4413      	add	r3, r2
 8006412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800641c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006420:	d0ec      	beq.n	80063fc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006422:	e080      	b.n	8006526 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	4413      	add	r3, r2
 800642c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	0151      	lsls	r1, r2, #5
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	440a      	add	r2, r1
 800643a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800643e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006442:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006444:	e06f      	b.n	8006526 <USB_HC_Halt+0x1f0>
          break;
 8006446:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006448:	e06d      	b.n	8006526 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	4413      	add	r3, r2
 8006452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	0151      	lsls	r1, r2, #5
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	440a      	add	r2, r1
 8006460:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006464:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006468:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d143      	bne.n	8006502 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	4413      	add	r3, r2
 8006482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	440a      	add	r2, r1
 8006490:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006498:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	0151      	lsls	r1, r2, #5
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	440a      	add	r2, r1
 80064b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064b8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	0151      	lsls	r1, r2, #5
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	440a      	add	r2, r1
 80064d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064d8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	3301      	adds	r3, #1
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064e6:	d81d      	bhi.n	8006524 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064fe:	d0ec      	beq.n	80064da <USB_HC_Halt+0x1a4>
 8006500:	e011      	b.n	8006526 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	4413      	add	r3, r2
 800650a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	0151      	lsls	r1, r2, #5
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	440a      	add	r2, r1
 8006518:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800651c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	e000      	b.n	8006526 <USB_HC_Halt+0x1f0>
          break;
 8006524:	bf00      	nop
    }
  }

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	371c      	adds	r7, #28
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006544:	78fb      	ldrb	r3, [r7, #3]
 8006546:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006548:	2301      	movs	r3, #1
 800654a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	04da      	lsls	r2, r3, #19
 8006550:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <USB_DoPing+0x74>)
 8006552:	4013      	ands	r3, r2
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	0151      	lsls	r1, r2, #5
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	440a      	add	r2, r1
 800655c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006560:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006564:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	4413      	add	r3, r2
 800656e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800657c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006584:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	4413      	add	r3, r2
 800658e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006592:	461a      	mov	r2, r3
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	371c      	adds	r7, #28
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	1ff80000 	.word	0x1ff80000

080065ac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7ff f9a1 	bl	8005904 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80065c2:	2110      	movs	r1, #16
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff f9d9 	bl	800597c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7ff f9fc 	bl	80059c8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80065d0:	2300      	movs	r3, #0
 80065d2:	613b      	str	r3, [r7, #16]
 80065d4:	e01f      	b.n	8006616 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065fc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4413      	add	r3, r2
 8006606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660a:	461a      	mov	r2, r3
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	3301      	adds	r3, #1
 8006614:	613b      	str	r3, [r7, #16]
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2b0f      	cmp	r3, #15
 800661a:	d9dc      	bls.n	80065d6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800661c:	2300      	movs	r3, #0
 800661e:	613b      	str	r3, [r7, #16]
 8006620:	e034      	b.n	800668c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4413      	add	r3, r2
 800662a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006638:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006640:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006648:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4413      	add	r3, r2
 8006652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006656:	461a      	mov	r2, r3
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	3301      	adds	r3, #1
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006668:	d80c      	bhi.n	8006684 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4413      	add	r3, r2
 8006672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800667c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006680:	d0ec      	beq.n	800665c <USB_StopHost+0xb0>
 8006682:	e000      	b.n	8006686 <USB_StopHost+0xda>
        break;
 8006684:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	3301      	adds	r3, #1
 800668a:	613b      	str	r3, [r7, #16]
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	2b0f      	cmp	r3, #15
 8006690:	d9c7      	bls.n	8006622 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006698:	461a      	mov	r2, r3
 800669a:	f04f 33ff 	mov.w	r3, #4294967295
 800669e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f04f 32ff 	mov.w	r2, #4294967295
 80066a6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff f91a 	bl	80058e2 <USB_EnableGlobalInt>

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80066b8:	b590      	push	{r4, r7, lr}
 80066ba:	b089      	sub	sp, #36	; 0x24
 80066bc:	af04      	add	r7, sp, #16
 80066be:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80066c0:	2301      	movs	r3, #1
 80066c2:	2202      	movs	r2, #2
 80066c4:	2102      	movs	r1, #2
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fcb4 	bl	8007034 <USBH_FindInterface>
 80066cc:	4603      	mov	r3, r0
 80066ce:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	2bff      	cmp	r3, #255	; 0xff
 80066d4:	d002      	beq.n	80066dc <USBH_CDC_InterfaceInit+0x24>
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d901      	bls.n	80066e0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80066dc:	2302      	movs	r3, #2
 80066de:	e13d      	b.n	800695c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
 80066e2:	4619      	mov	r1, r3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fc89 	bl	8006ffc <USBH_SelectInterface>
 80066ea:	4603      	mov	r3, r0
 80066ec:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80066ee:	7bbb      	ldrb	r3, [r7, #14]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80066f4:	2302      	movs	r3, #2
 80066f6:	e131      	b.n	800695c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80066fe:	2050      	movs	r0, #80	; 0x50
 8006700:	f005 fe54 	bl	800c3ac <malloc>
 8006704:	4603      	mov	r3, r0
 8006706:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006718:	2302      	movs	r3, #2
 800671a:	e11f      	b.n	800695c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800671c:	2250      	movs	r2, #80	; 0x50
 800671e:	2100      	movs	r1, #0
 8006720:	68b8      	ldr	r0, [r7, #8]
 8006722:	f005 fe5e 	bl	800c3e2 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	211a      	movs	r1, #26
 800672c:	fb01 f303 	mul.w	r3, r1, r3
 8006730:	4413      	add	r3, r2
 8006732:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	b25b      	sxtb	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	da15      	bge.n	800676a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800673e:	7bfb      	ldrb	r3, [r7, #15]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	211a      	movs	r1, #26
 8006744:	fb01 f303 	mul.w	r3, r1, r3
 8006748:	4413      	add	r3, r2
 800674a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800674e:	781a      	ldrb	r2, [r3, #0]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	211a      	movs	r1, #26
 800675a:	fb01 f303 	mul.w	r3, r1, r3
 800675e:	4413      	add	r3, r2
 8006760:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006764:	881a      	ldrh	r2, [r3, #0]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	785b      	ldrb	r3, [r3, #1]
 800676e:	4619      	mov	r1, r3
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f002 f890 	bl	8008896 <USBH_AllocPipe>
 8006776:	4603      	mov	r3, r0
 8006778:	461a      	mov	r2, r3
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	7819      	ldrb	r1, [r3, #0]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	7858      	ldrb	r0, [r3, #1]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	8952      	ldrh	r2, [r2, #10]
 8006796:	9202      	str	r2, [sp, #8]
 8006798:	2203      	movs	r2, #3
 800679a:	9201      	str	r2, [sp, #4]
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	4623      	mov	r3, r4
 80067a0:	4602      	mov	r2, r0
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f002 f848 	bl	8008838 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2200      	movs	r2, #0
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f005 fd4b 	bl	800c24c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80067b6:	2300      	movs	r3, #0
 80067b8:	2200      	movs	r2, #0
 80067ba:	210a      	movs	r1, #10
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fc39 	bl	8007034 <USBH_FindInterface>
 80067c2:	4603      	mov	r3, r0
 80067c4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	2bff      	cmp	r3, #255	; 0xff
 80067ca:	d002      	beq.n	80067d2 <USBH_CDC_InterfaceInit+0x11a>
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d901      	bls.n	80067d6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80067d2:	2302      	movs	r3, #2
 80067d4:	e0c2      	b.n	800695c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	211a      	movs	r1, #26
 80067dc:	fb01 f303 	mul.w	r3, r1, r3
 80067e0:	4413      	add	r3, r2
 80067e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	b25b      	sxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	da16      	bge.n	800681c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	211a      	movs	r1, #26
 80067f4:	fb01 f303 	mul.w	r3, r1, r3
 80067f8:	4413      	add	r3, r2
 80067fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067fe:	781a      	ldrb	r2, [r3, #0]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	211a      	movs	r1, #26
 800680a:	fb01 f303 	mul.w	r3, r1, r3
 800680e:	4413      	add	r3, r2
 8006810:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006814:	881a      	ldrh	r2, [r3, #0]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	835a      	strh	r2, [r3, #26]
 800681a:	e015      	b.n	8006848 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800681c:	7bfb      	ldrb	r3, [r7, #15]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	211a      	movs	r1, #26
 8006822:	fb01 f303 	mul.w	r3, r1, r3
 8006826:	4413      	add	r3, r2
 8006828:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800682c:	781a      	ldrb	r2, [r3, #0]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006832:	7bfb      	ldrb	r3, [r7, #15]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	211a      	movs	r1, #26
 8006838:	fb01 f303 	mul.w	r3, r1, r3
 800683c:	4413      	add	r3, r2
 800683e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006842:	881a      	ldrh	r2, [r3, #0]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006848:	7bfb      	ldrb	r3, [r7, #15]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	211a      	movs	r1, #26
 800684e:	fb01 f303 	mul.w	r3, r1, r3
 8006852:	4413      	add	r3, r2
 8006854:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	b25b      	sxtb	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	da16      	bge.n	800688e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	211a      	movs	r1, #26
 8006866:	fb01 f303 	mul.w	r3, r1, r3
 800686a:	4413      	add	r3, r2
 800686c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006870:	781a      	ldrb	r2, [r3, #0]
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006876:	7bfb      	ldrb	r3, [r7, #15]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	211a      	movs	r1, #26
 800687c:	fb01 f303 	mul.w	r3, r1, r3
 8006880:	4413      	add	r3, r2
 8006882:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006886:	881a      	ldrh	r2, [r3, #0]
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	835a      	strh	r2, [r3, #26]
 800688c:	e015      	b.n	80068ba <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800688e:	7bfb      	ldrb	r3, [r7, #15]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	211a      	movs	r1, #26
 8006894:	fb01 f303 	mul.w	r3, r1, r3
 8006898:	4413      	add	r3, r2
 800689a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800689e:	781a      	ldrb	r2, [r3, #0]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	211a      	movs	r1, #26
 80068aa:	fb01 f303 	mul.w	r3, r1, r3
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80068b4:	881a      	ldrh	r2, [r3, #0]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	7b9b      	ldrb	r3, [r3, #14]
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 ffe8 	bl	8008896 <USBH_AllocPipe>
 80068c6:	4603      	mov	r3, r0
 80068c8:	461a      	mov	r2, r3
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	7bdb      	ldrb	r3, [r3, #15]
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f001 ffde 	bl	8008896 <USBH_AllocPipe>
 80068da:	4603      	mov	r3, r0
 80068dc:	461a      	mov	r2, r3
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	7b59      	ldrb	r1, [r3, #13]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	7b98      	ldrb	r0, [r3, #14]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	8b12      	ldrh	r2, [r2, #24]
 80068fa:	9202      	str	r2, [sp, #8]
 80068fc:	2202      	movs	r2, #2
 80068fe:	9201      	str	r2, [sp, #4]
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	4623      	mov	r3, r4
 8006904:	4602      	mov	r2, r0
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f001 ff96 	bl	8008838 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	7b19      	ldrb	r1, [r3, #12]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	7bd8      	ldrb	r0, [r3, #15]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	8b52      	ldrh	r2, [r2, #26]
 8006924:	9202      	str	r2, [sp, #8]
 8006926:	2202      	movs	r2, #2
 8006928:	9201      	str	r2, [sp, #4]
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	4623      	mov	r3, r4
 800692e:	4602      	mov	r2, r0
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f001 ff81 	bl	8008838 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	7b5b      	ldrb	r3, [r3, #13]
 8006942:	2200      	movs	r2, #0
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f005 fc80 	bl	800c24c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	7b1b      	ldrb	r3, [r3, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f005 fc79 	bl	800c24c <USBH_LL_SetToggle>

  return USBH_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	bd90      	pop	{r4, r7, pc}

08006964 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00e      	beq.n	800699c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 ff76 	bl	8008876 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 ffa1 	bl	80088d8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	7b1b      	ldrb	r3, [r3, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00e      	beq.n	80069c2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	7b1b      	ldrb	r3, [r3, #12]
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f001 ff63 	bl	8008876 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	7b1b      	ldrb	r3, [r3, #12]
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f001 ff8e 	bl	80088d8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	7b5b      	ldrb	r3, [r3, #13]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00e      	beq.n	80069e8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	7b5b      	ldrb	r3, [r3, #13]
 80069ce:	4619      	mov	r1, r3
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f001 ff50 	bl	8008876 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	7b5b      	ldrb	r3, [r3, #13]
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 ff7b 	bl	80088d8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00b      	beq.n	8006a0c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f005 fcdd 	bl	800c3bc <free>
    phost->pActiveClass->pData = 0U;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a08:	2200      	movs	r2, #0
 8006a0a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3340      	adds	r3, #64	; 0x40
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f8b1 	bl	8006b96 <GetLineCoding>
 8006a34:	4603      	mov	r3, r0
 8006a36:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006a38:	7afb      	ldrb	r3, [r7, #11]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d105      	bne.n	8006a4a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a44:	2102      	movs	r1, #2
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006a4a:	7afb      	ldrb	r3, [r7, #11]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006a60:	2300      	movs	r3, #0
 8006a62:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006a74:	2b04      	cmp	r3, #4
 8006a76:	d877      	bhi.n	8006b68 <USBH_CDC_Process+0x114>
 8006a78:	a201      	add	r2, pc, #4	; (adr r2, 8006a80 <USBH_CDC_Process+0x2c>)
 8006a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7e:	bf00      	nop
 8006a80:	08006a95 	.word	0x08006a95
 8006a84:	08006a9b 	.word	0x08006a9b
 8006a88:	08006acb 	.word	0x08006acb
 8006a8c:	08006b3f 	.word	0x08006b3f
 8006a90:	08006b4d 	.word	0x08006b4d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	73fb      	strb	r3, [r7, #15]
      break;
 8006a98:	e06d      	b.n	8006b76 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f897 	bl	8006bd4 <SetLineCoding>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006aaa:	7bbb      	ldrb	r3, [r7, #14]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d104      	bne.n	8006aba <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ab8:	e058      	b.n	8006b6c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006aba:	7bbb      	ldrb	r3, [r7, #14]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d055      	beq.n	8006b6c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2204      	movs	r2, #4
 8006ac4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ac8:	e050      	b.n	8006b6c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	3340      	adds	r3, #64	; 0x40
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f860 	bl	8006b96 <GetLineCoding>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ada:	7bbb      	ldrb	r3, [r7, #14]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d126      	bne.n	8006b2e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af2:	791b      	ldrb	r3, [r3, #4]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d13b      	bne.n	8006b70 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b02:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d133      	bne.n	8006b70 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b12:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d12b      	bne.n	8006b70 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b20:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d124      	bne.n	8006b70 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f984 	bl	8006e34 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b2c:	e020      	b.n	8006b70 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006b2e:	7bbb      	ldrb	r3, [r7, #14]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d01d      	beq.n	8006b70 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2204      	movs	r2, #4
 8006b38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b3c:	e018      	b.n	8006b70 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f867 	bl	8006c12 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f8f8 	bl	8006d3a <CDC_ProcessReception>
      break;
 8006b4a:	e014      	b.n	8006b76 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f001 f94f 	bl	8007df2 <USBH_ClrFeature>
 8006b54:	4603      	mov	r3, r0
 8006b56:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b58:	7bbb      	ldrb	r3, [r7, #14]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10a      	bne.n	8006b74 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006b66:	e005      	b.n	8006b74 <USBH_CDC_Process+0x120>

    default:
      break;
 8006b68:	bf00      	nop
 8006b6a:	e004      	b.n	8006b76 <USBH_CDC_Process+0x122>
      break;
 8006b6c:	bf00      	nop
 8006b6e:	e002      	b.n	8006b76 <USBH_CDC_Process+0x122>
      break;
 8006b70:	bf00      	nop
 8006b72:	e000      	b.n	8006b76 <USBH_CDC_Process+0x122>
      break;
 8006b74:	bf00      	nop

  }

  return status;
 8006b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b082      	sub	sp, #8
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	22a1      	movs	r2, #161	; 0xa1
 8006ba4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2221      	movs	r2, #33	; 0x21
 8006baa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2207      	movs	r2, #7
 8006bbc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2207      	movs	r2, #7
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 faf4 	bl	80081b2 <USBH_CtlReq>
 8006bca:	4603      	mov	r3, r0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2221      	movs	r2, #33	; 0x21
 8006be2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2220      	movs	r2, #32
 8006be8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2207      	movs	r2, #7
 8006bfa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2207      	movs	r2, #7
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f001 fad5 	bl	80081b2 <USBH_CtlReq>
 8006c08:	4603      	mov	r3, r0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b086      	sub	sp, #24
 8006c16:	af02      	add	r7, sp, #8
 8006c18:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c24:	2300      	movs	r3, #0
 8006c26:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d002      	beq.n	8006c38 <CDC_ProcessTransmission+0x26>
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d025      	beq.n	8006c82 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8006c36:	e07c      	b.n	8006d32 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	8b12      	ldrh	r2, [r2, #24]
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d90c      	bls.n	8006c5e <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	69d9      	ldr	r1, [r3, #28]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8b1a      	ldrh	r2, [r3, #24]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	7b58      	ldrb	r0, [r3, #13]
 8006c50:	2301      	movs	r3, #1
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	4603      	mov	r3, r0
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 fdab 	bl	80087b2 <USBH_BulkSendData>
 8006c5c:	e00c      	b.n	8006c78 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	7b58      	ldrb	r0, [r3, #13]
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	4603      	mov	r3, r0
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f001 fd9d 	bl	80087b2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c80:	e057      	b.n	8006d32 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	7b5b      	ldrb	r3, [r3, #13]
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f005 fab5 	bl	800c1f8 <USBH_LL_GetURBState>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006c92:	7afb      	ldrb	r3, [r7, #11]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d136      	bne.n	8006d06 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	8b12      	ldrh	r2, [r2, #24]
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d90e      	bls.n	8006cc2 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	8b12      	ldrh	r2, [r2, #24]
 8006cac:	1a9a      	subs	r2, r3, r2
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	8b12      	ldrh	r2, [r2, #24]
 8006cba:	441a      	add	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	61da      	str	r2, [r3, #28]
 8006cc0:	e002      	b.n	8006cc8 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d004      	beq.n	8006cda <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006cd8:	e006      	b.n	8006ce8 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f892 	bl	8006e0c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2204      	movs	r2, #4
 8006cec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f002 f860 	bl	8008dc4 <osMessageQueuePut>
      break;
 8006d04:	e014      	b.n	8006d30 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8006d06:	7afb      	ldrb	r3, [r7, #11]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d111      	bne.n	8006d30 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2204      	movs	r2, #4
 8006d18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006d28:	2300      	movs	r3, #0
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f002 f84a 	bl	8008dc4 <osMessageQueuePut>
      break;
 8006d30:	bf00      	nop
  }
}
 8006d32:	bf00      	nop
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b086      	sub	sp, #24
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d002      	beq.n	8006d60 <CDC_ProcessReception+0x26>
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	d00e      	beq.n	8006d7c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006d5e:	e051      	b.n	8006e04 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	6a19      	ldr	r1, [r3, #32]
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	8b5a      	ldrh	r2, [r3, #26]
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	7b1b      	ldrb	r3, [r3, #12]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f001 fd45 	bl	80087fc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2204      	movs	r2, #4
 8006d76:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006d7a:	e043      	b.n	8006e04 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	7b1b      	ldrb	r3, [r3, #12]
 8006d80:	4619      	mov	r1, r3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f005 fa38 	bl	800c1f8 <USBH_LL_GetURBState>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006d8c:	7cfb      	ldrb	r3, [r7, #19]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d137      	bne.n	8006e02 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	7b1b      	ldrb	r3, [r3, #12]
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f005 f99b 	bl	800c0d4 <USBH_LL_GetLastXferSize>
 8006d9e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d016      	beq.n	8006dd8 <CDC_ProcessReception+0x9e>
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	8b5b      	ldrh	r3, [r3, #26]
 8006dae:	461a      	mov	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d910      	bls.n	8006dd8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	1ad2      	subs	r2, r2, r3
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	6a1a      	ldr	r2, [r3, #32]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	441a      	add	r2, r3
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2203      	movs	r2, #3
 8006dd2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8006dd6:	e006      	b.n	8006de6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f81d 	bl	8006e20 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2204      	movs	r2, #4
 8006dea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f001 ffe1 	bl	8008dc4 <osMessageQueuePut>
      break;
 8006e02:	bf00      	nop
  }
}
 8006e04:	bf00      	nop
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	4613      	mov	r3, r2
 8006e54:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e044      	b.n	8006eea <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	79fa      	ldrb	r2, [r7, #7]
 8006e64:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 f841 	bl	8006f00 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8006eac:	2200      	movs	r2, #0
 8006eae:	2104      	movs	r1, #4
 8006eb0:	2010      	movs	r0, #16
 8006eb2:	f001 ff01 	bl	8008cb8 <osMessageQueueNew>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8006ebe:	4b0d      	ldr	r3, [pc, #52]	; (8006ef4 <USBH_Init+0xac>)
 8006ec0:	4a0d      	ldr	r2, [pc, #52]	; (8006ef8 <USBH_Init+0xb0>)
 8006ec2:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8006ec4:	4b0b      	ldr	r3, [pc, #44]	; (8006ef4 <USBH_Init+0xac>)
 8006ec6:	2280      	movs	r2, #128	; 0x80
 8006ec8:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8006eca:	4b0a      	ldr	r3, [pc, #40]	; (8006ef4 <USBH_Init+0xac>)
 8006ecc:	2218      	movs	r2, #24
 8006ece:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8006ed0:	4a08      	ldr	r2, [pc, #32]	; (8006ef4 <USBH_Init+0xac>)
 8006ed2:	68f9      	ldr	r1, [r7, #12]
 8006ed4:	4809      	ldr	r0, [pc, #36]	; (8006efc <USBH_Init+0xb4>)
 8006ed6:	f001 fddb 	bl	8008a90 <osThreadNew>
 8006eda:	4602      	mov	r2, r0
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f005 f844 	bl	800bf70 <USBH_LL_Init>

  return USBH_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20004c90 	.word	0x20004c90
 8006ef8:	0800c5e8 	.word	0x0800c5e8
 8006efc:	08007b69 	.word	0x08007b69

08006f00 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	e009      	b.n	8006f26 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	33e0      	adds	r3, #224	; 0xe0
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3301      	adds	r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b0e      	cmp	r3, #14
 8006f2a:	d9f2      	bls.n	8006f12 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	e009      	b.n	8006f46 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	3301      	adds	r3, #1
 8006f44:	60fb      	str	r3, [r7, #12]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f4c:	d3f1      	bcc.n	8006f32 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2240      	movs	r2, #64	; 0x40
 8006f72:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d016      	beq.n	8006fea <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10e      	bne.n	8006fe4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fcc:	1c59      	adds	r1, r3, #1
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	33de      	adds	r3, #222	; 0xde
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	73fb      	strb	r3, [r7, #15]
 8006fe2:	e004      	b.n	8006fee <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	73fb      	strb	r3, [r7, #15]
 8006fe8:	e001      	b.n	8006fee <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006fea:	2302      	movs	r3, #2
 8006fec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007012:	78fa      	ldrb	r2, [r7, #3]
 8007014:	429a      	cmp	r2, r3
 8007016:	d204      	bcs.n	8007022 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	78fa      	ldrb	r2, [r7, #3]
 800701c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007020:	e001      	b.n	8007026 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007022:	2302      	movs	r3, #2
 8007024:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007026:	7bfb      	ldrb	r3, [r7, #15]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007034:	b480      	push	{r7}
 8007036:	b087      	sub	sp, #28
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	4608      	mov	r0, r1
 800703e:	4611      	mov	r1, r2
 8007040:	461a      	mov	r2, r3
 8007042:	4603      	mov	r3, r0
 8007044:	70fb      	strb	r3, [r7, #3]
 8007046:	460b      	mov	r3, r1
 8007048:	70bb      	strb	r3, [r7, #2]
 800704a:	4613      	mov	r3, r2
 800704c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007052:	2300      	movs	r3, #0
 8007054:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800705c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800705e:	e025      	b.n	80070ac <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007060:	7dfb      	ldrb	r3, [r7, #23]
 8007062:	221a      	movs	r2, #26
 8007064:	fb02 f303 	mul.w	r3, r2, r3
 8007068:	3308      	adds	r3, #8
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	4413      	add	r3, r2
 800706e:	3302      	adds	r3, #2
 8007070:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	795b      	ldrb	r3, [r3, #5]
 8007076:	78fa      	ldrb	r2, [r7, #3]
 8007078:	429a      	cmp	r2, r3
 800707a:	d002      	beq.n	8007082 <USBH_FindInterface+0x4e>
 800707c:	78fb      	ldrb	r3, [r7, #3]
 800707e:	2bff      	cmp	r3, #255	; 0xff
 8007080:	d111      	bne.n	80070a6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007086:	78ba      	ldrb	r2, [r7, #2]
 8007088:	429a      	cmp	r2, r3
 800708a:	d002      	beq.n	8007092 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800708c:	78bb      	ldrb	r3, [r7, #2]
 800708e:	2bff      	cmp	r3, #255	; 0xff
 8007090:	d109      	bne.n	80070a6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007096:	787a      	ldrb	r2, [r7, #1]
 8007098:	429a      	cmp	r2, r3
 800709a:	d002      	beq.n	80070a2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800709c:	787b      	ldrb	r3, [r7, #1]
 800709e:	2bff      	cmp	r3, #255	; 0xff
 80070a0:	d101      	bne.n	80070a6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80070a2:	7dfb      	ldrb	r3, [r7, #23]
 80070a4:	e006      	b.n	80070b4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80070a6:	7dfb      	ldrb	r3, [r7, #23]
 80070a8:	3301      	adds	r3, #1
 80070aa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d9d6      	bls.n	8007060 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80070b2:	23ff      	movs	r3, #255	; 0xff
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	371c      	adds	r7, #28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f004 ff8d 	bl	800bfe8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80070ce:	2101      	movs	r1, #1
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f005 f8a4 	bl	800c21e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b088      	sub	sp, #32
 80070e4:	af04      	add	r7, sp, #16
 80070e6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80070e8:	2302      	movs	r3, #2
 80070ea:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d102      	bne.n	8007102 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2203      	movs	r2, #3
 8007100:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b0b      	cmp	r3, #11
 800710a:	f200 823c 	bhi.w	8007586 <USBH_Process+0x4a6>
 800710e:	a201      	add	r2, pc, #4	; (adr r2, 8007114 <USBH_Process+0x34>)
 8007110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007114:	08007145 	.word	0x08007145
 8007118:	08007193 	.word	0x08007193
 800711c:	08007217 	.word	0x08007217
 8007120:	08007505 	.word	0x08007505
 8007124:	08007587 	.word	0x08007587
 8007128:	080072d7 	.word	0x080072d7
 800712c:	0800748f 	.word	0x0800748f
 8007130:	08007329 	.word	0x08007329
 8007134:	08007365 	.word	0x08007365
 8007138:	0800739f 	.word	0x0800739f
 800713c:	080073e7 	.word	0x080073e7
 8007140:	080074ed 	.word	0x080074ed
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 821c 	beq.w	800758a <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007158:	20c8      	movs	r0, #200	; 0xc8
 800715a:	f005 f8aa 	bl	800c2b2 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f004 ff9d 	bl	800c09e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007188:	2300      	movs	r3, #0
 800718a:	2200      	movs	r2, #0
 800718c:	f001 fe1a 	bl	8008dc4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007190:	e1fb      	b.n	800758a <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007198:	2b01      	cmp	r3, #1
 800719a:	d107      	bne.n	80071ac <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	e025      	b.n	80071f8 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071b6:	d914      	bls.n	80071e2 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80071be:	3301      	adds	r3, #1
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d903      	bls.n	80071da <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	220d      	movs	r2, #13
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	e00e      	b.n	80071f8 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	701a      	strb	r2, [r3, #0]
 80071e0:	e00a      	b.n	80071f8 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071e8:	f103 020a 	add.w	r2, r3, #10
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80071f2:	200a      	movs	r0, #10
 80071f4:	f005 f85d 	bl	800c2b2 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800720c:	2300      	movs	r3, #0
 800720e:	2200      	movs	r2, #0
 8007210:	f001 fdd8 	bl	8008dc4 <osMessageQueuePut>
#endif
#endif
      break;
 8007214:	e1c0      	b.n	8007598 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800721c:	2b00      	cmp	r3, #0
 800721e:	d005      	beq.n	800722c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007226:	2104      	movs	r1, #4
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800722c:	2064      	movs	r0, #100	; 0x64
 800722e:	f005 f840 	bl	800c2b2 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f004 ff0e 	bl	800c054 <USBH_LL_GetSpeed>
 8007238:	4603      	mov	r3, r0
 800723a:	461a      	mov	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2205      	movs	r2, #5
 8007246:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007248:	2100      	movs	r1, #0
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f001 fb23 	bl	8008896 <USBH_AllocPipe>
 8007250:	4603      	mov	r3, r0
 8007252:	461a      	mov	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007258:	2180      	movs	r1, #128	; 0x80
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f001 fb1b 	bl	8008896 <USBH_AllocPipe>
 8007260:	4603      	mov	r3, r0
 8007262:	461a      	mov	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	7919      	ldrb	r1, [r3, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800727c:	b292      	uxth	r2, r2
 800727e:	9202      	str	r2, [sp, #8]
 8007280:	2200      	movs	r2, #0
 8007282:	9201      	str	r2, [sp, #4]
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	4603      	mov	r3, r0
 8007288:	2280      	movs	r2, #128	; 0x80
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 fad4 	bl	8008838 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	7959      	ldrb	r1, [r3, #5]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80072a4:	b292      	uxth	r2, r2
 80072a6:	9202      	str	r2, [sp, #8]
 80072a8:	2200      	movs	r2, #0
 80072aa:	9201      	str	r2, [sp, #4]
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	4603      	mov	r3, r0
 80072b0:	2200      	movs	r2, #0
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 fac0 	bl	8008838 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80072cc:	2300      	movs	r3, #0
 80072ce:	2200      	movs	r2, #0
 80072d0:	f001 fd78 	bl	8008dc4 <osMessageQueuePut>
#endif
#endif
      break;
 80072d4:	e160      	b.n	8007598 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f964 	bl	80075a4 <USBH_HandleEnum>
 80072dc:	4603      	mov	r3, r0
 80072de:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f040 8152 	bne.w	800758e <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d103      	bne.n	8007304 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2208      	movs	r2, #8
 8007300:	701a      	strb	r2, [r3, #0]
 8007302:	e002      	b.n	800730a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2207      	movs	r2, #7
 8007308:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2205      	movs	r2, #5
 800730e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800731e:	2300      	movs	r3, #0
 8007320:	2200      	movs	r2, #0
 8007322:	f001 fd4f 	bl	8008dc4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007326:	e132      	b.n	800758e <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 812f 	beq.w	8007592 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800733a:	2101      	movs	r1, #1
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2208      	movs	r2, #8
 8007344:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2205      	movs	r2, #5
 800734a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800735a:	2300      	movs	r3, #0
 800735c:	2200      	movs	r2, #0
 800735e:	f001 fd31 	bl	8008dc4 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8007362:	e116      	b.n	8007592 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800736a:	b29b      	uxth	r3, r3
 800736c:	4619      	mov	r1, r3
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fcf8 	bl	8007d64 <USBH_SetCfg>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d102      	bne.n	8007380 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2209      	movs	r2, #9
 800737e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007394:	2300      	movs	r3, #0
 8007396:	2200      	movs	r2, #0
 8007398:	f001 fd14 	bl	8008dc4 <osMessageQueuePut>
#endif
#endif
      break;
 800739c:	e0fc      	b.n	8007598 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80073a4:	f003 0320 	and.w	r3, r3, #32
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80073ac:	2101      	movs	r1, #1
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fcfb 	bl	8007daa <USBH_SetFeature>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d106      	bne.n	80073c8 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	220a      	movs	r2, #10
 80073be:	701a      	strb	r2, [r3, #0]
 80073c0:	e002      	b.n	80073c8 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	220a      	movs	r2, #10
 80073c6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80073dc:	2300      	movs	r3, #0
 80073de:	2200      	movs	r2, #0
 80073e0:	f001 fcf0 	bl	8008dc4 <osMessageQueuePut>
#endif
#endif
      break;
 80073e4:	e0d8      	b.n	8007598 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d03f      	beq.n	8007470 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80073f8:	2300      	movs	r3, #0
 80073fa:	73fb      	strb	r3, [r7, #15]
 80073fc:	e016      	b.n	800742c <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80073fe:	7bfa      	ldrb	r2, [r7, #15]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	32de      	adds	r2, #222	; 0xde
 8007404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007408:	791a      	ldrb	r2, [r3, #4]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007410:	429a      	cmp	r2, r3
 8007412:	d108      	bne.n	8007426 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007414:	7bfa      	ldrb	r2, [r7, #15]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	32de      	adds	r2, #222	; 0xde
 800741a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007424:	e005      	b.n	8007432 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	3301      	adds	r3, #1
 800742a:	73fb      	strb	r3, [r7, #15]
 800742c:	7bfb      	ldrb	r3, [r7, #15]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0e5      	beq.n	80073fe <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007438:	2b00      	cmp	r3, #0
 800743a:	d016      	beq.n	800746a <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	4798      	blx	r3
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d109      	bne.n	8007462 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2206      	movs	r2, #6
 8007452:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800745a:	2103      	movs	r1, #3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	4798      	blx	r3
 8007460:	e006      	b.n	8007470 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	220d      	movs	r2, #13
 8007466:	701a      	strb	r2, [r3, #0]
 8007468:	e002      	b.n	8007470 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	220d      	movs	r2, #13
 800746e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2205      	movs	r2, #5
 8007474:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007484:	2300      	movs	r3, #0
 8007486:	2200      	movs	r2, #0
 8007488:	f001 fc9c 	bl	8008dc4 <osMessageQueuePut>
#endif
#endif
      break;
 800748c:	e084      	b.n	8007598 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007494:	2b00      	cmp	r3, #0
 8007496:	d017      	beq.n	80074c8 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	4798      	blx	r3
 80074a4:	4603      	mov	r3, r0
 80074a6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d103      	bne.n	80074b8 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	220b      	movs	r2, #11
 80074b4:	701a      	strb	r2, [r3, #0]
 80074b6:	e00a      	b.n	80074ce <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 80074b8:	7bbb      	ldrb	r3, [r7, #14]
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d106      	bne.n	80074ce <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	220d      	movs	r2, #13
 80074c4:	701a      	strb	r2, [r3, #0]
 80074c6:	e002      	b.n	80074ce <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	220d      	movs	r2, #13
 80074cc:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2205      	movs	r2, #5
 80074d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80074e2:	2300      	movs	r3, #0
 80074e4:	2200      	movs	r2, #0
 80074e6:	f001 fc6d 	bl	8008dc4 <osMessageQueuePut>
#endif
#endif
      break;
 80074ea:	e055      	b.n	8007598 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d04f      	beq.n	8007596 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	4798      	blx	r3
      }
      break;
 8007502:	e048      	b.n	8007596 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff fcf7 	bl	8006f00 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007518:	2b00      	cmp	r3, #0
 800751a:	d009      	beq.n	8007530 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007536:	2b00      	cmp	r3, #0
 8007538:	d005      	beq.n	8007546 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007540:	2105      	movs	r1, #5
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b01      	cmp	r3, #1
 8007550:	d107      	bne.n	8007562 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7ff fdb0 	bl	80070c0 <USBH_Start>
 8007560:	e002      	b.n	8007568 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f004 fd40 	bl	800bfe8 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800757c:	2300      	movs	r3, #0
 800757e:	2200      	movs	r2, #0
 8007580:	f001 fc20 	bl	8008dc4 <osMessageQueuePut>
#endif
#endif
      break;
 8007584:	e008      	b.n	8007598 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8007586:	bf00      	nop
 8007588:	e006      	b.n	8007598 <USBH_Process+0x4b8>
      break;
 800758a:	bf00      	nop
 800758c:	e004      	b.n	8007598 <USBH_Process+0x4b8>
      break;
 800758e:	bf00      	nop
 8007590:	e002      	b.n	8007598 <USBH_Process+0x4b8>
    break;
 8007592:	bf00      	nop
 8007594:	e000      	b.n	8007598 <USBH_Process+0x4b8>
      break;
 8007596:	bf00      	nop
  }
  return USBH_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop

080075a4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af04      	add	r7, sp, #16
 80075aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075ac:	2301      	movs	r3, #1
 80075ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80075b0:	2301      	movs	r3, #1
 80075b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	785b      	ldrb	r3, [r3, #1]
 80075b8:	2b07      	cmp	r3, #7
 80075ba:	f200 8208 	bhi.w	80079ce <USBH_HandleEnum+0x42a>
 80075be:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <USBH_HandleEnum+0x20>)
 80075c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c4:	080075e5 	.word	0x080075e5
 80075c8:	080076a3 	.word	0x080076a3
 80075cc:	0800770d 	.word	0x0800770d
 80075d0:	0800779b 	.word	0x0800779b
 80075d4:	08007805 	.word	0x08007805
 80075d8:	08007875 	.word	0x08007875
 80075dc:	08007911 	.word	0x08007911
 80075e0:	0800798f 	.word	0x0800798f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80075e4:	2108      	movs	r1, #8
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 faec 	bl	8007bc4 <USBH_Get_DevDesc>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d130      	bne.n	8007658 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	7919      	ldrb	r1, [r3, #4]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800761a:	b292      	uxth	r2, r2
 800761c:	9202      	str	r2, [sp, #8]
 800761e:	2200      	movs	r2, #0
 8007620:	9201      	str	r2, [sp, #4]
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	4603      	mov	r3, r0
 8007626:	2280      	movs	r2, #128	; 0x80
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f001 f905 	bl	8008838 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	7959      	ldrb	r1, [r3, #5]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007642:	b292      	uxth	r2, r2
 8007644:	9202      	str	r2, [sp, #8]
 8007646:	2200      	movs	r2, #0
 8007648:	9201      	str	r2, [sp, #4]
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	4603      	mov	r3, r0
 800764e:	2200      	movs	r2, #0
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 f8f1 	bl	8008838 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007656:	e1bc      	b.n	80079d2 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007658:	7bbb      	ldrb	r3, [r7, #14]
 800765a:	2b03      	cmp	r3, #3
 800765c:	f040 81b9 	bne.w	80079d2 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007666:	3301      	adds	r3, #1
 8007668:	b2da      	uxtb	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007676:	2b03      	cmp	r3, #3
 8007678:	d903      	bls.n	8007682 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	220d      	movs	r2, #13
 800767e:	701a      	strb	r2, [r3, #0]
      break;
 8007680:	e1a7      	b.n	80079d2 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	795b      	ldrb	r3, [r3, #5]
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f001 f925 	bl	80088d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	791b      	ldrb	r3, [r3, #4]
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f001 f91f 	bl	80088d8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	701a      	strb	r2, [r3, #0]
      break;
 80076a0:	e197      	b.n	80079d2 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80076a2:	2112      	movs	r1, #18
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fa8d 	bl	8007bc4 <USBH_Get_DevDesc>
 80076aa:	4603      	mov	r3, r0
 80076ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d103      	bne.n	80076bc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076ba:	e18c      	b.n	80079d6 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
 80076be:	2b03      	cmp	r3, #3
 80076c0:	f040 8189 	bne.w	80079d6 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076ca:	3301      	adds	r3, #1
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d903      	bls.n	80076e6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	220d      	movs	r2, #13
 80076e2:	701a      	strb	r2, [r3, #0]
      break;
 80076e4:	e177      	b.n	80079d6 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	795b      	ldrb	r3, [r3, #5]
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f001 f8f3 	bl	80088d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	791b      	ldrb	r3, [r3, #4]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 f8ed 	bl	80088d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	701a      	strb	r2, [r3, #0]
      break;
 800770a:	e164      	b.n	80079d6 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800770c:	2101      	movs	r1, #1
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fb04 	bl	8007d1c <USBH_SetAddress>
 8007714:	4603      	mov	r3, r0
 8007716:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007718:	7bbb      	ldrb	r3, [r7, #14]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d132      	bne.n	8007784 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800771e:	2002      	movs	r0, #2
 8007720:	f004 fdc7 	bl	800c2b2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2203      	movs	r2, #3
 8007730:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	7919      	ldrb	r1, [r3, #4]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007746:	b292      	uxth	r2, r2
 8007748:	9202      	str	r2, [sp, #8]
 800774a:	2200      	movs	r2, #0
 800774c:	9201      	str	r2, [sp, #4]
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	4603      	mov	r3, r0
 8007752:	2280      	movs	r2, #128	; 0x80
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f001 f86f 	bl	8008838 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	7959      	ldrb	r1, [r3, #5]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800776e:	b292      	uxth	r2, r2
 8007770:	9202      	str	r2, [sp, #8]
 8007772:	2200      	movs	r2, #0
 8007774:	9201      	str	r2, [sp, #4]
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	4603      	mov	r3, r0
 800777a:	2200      	movs	r2, #0
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f001 f85b 	bl	8008838 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007782:	e12a      	b.n	80079da <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	2b03      	cmp	r3, #3
 8007788:	f040 8127 	bne.w	80079da <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	220d      	movs	r2, #13
 8007790:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	705a      	strb	r2, [r3, #1]
      break;
 8007798:	e11f      	b.n	80079da <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800779a:	2109      	movs	r1, #9
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fa39 	bl	8007c14 <USBH_Get_CfgDesc>
 80077a2:	4603      	mov	r3, r0
 80077a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077a6:	7bbb      	ldrb	r3, [r7, #14]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d103      	bne.n	80077b4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2204      	movs	r2, #4
 80077b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077b2:	e114      	b.n	80079de <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	f040 8111 	bne.w	80079de <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077c2:	3301      	adds	r3, #1
 80077c4:	b2da      	uxtb	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d903      	bls.n	80077de <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	220d      	movs	r2, #13
 80077da:	701a      	strb	r2, [r3, #0]
      break;
 80077dc:	e0ff      	b.n	80079de <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	795b      	ldrb	r3, [r3, #5]
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 f877 	bl	80088d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	791b      	ldrb	r3, [r3, #4]
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 f871 	bl	80088d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	701a      	strb	r2, [r3, #0]
      break;
 8007802:	e0ec      	b.n	80079de <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fa01 	bl	8007c14 <USBH_Get_CfgDesc>
 8007812:	4603      	mov	r3, r0
 8007814:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007816:	7bbb      	ldrb	r3, [r7, #14]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d103      	bne.n	8007824 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2205      	movs	r2, #5
 8007820:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007822:	e0de      	b.n	80079e2 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007824:	7bbb      	ldrb	r3, [r7, #14]
 8007826:	2b03      	cmp	r3, #3
 8007828:	f040 80db 	bne.w	80079e2 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007832:	3301      	adds	r3, #1
 8007834:	b2da      	uxtb	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007842:	2b03      	cmp	r3, #3
 8007844:	d903      	bls.n	800784e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	220d      	movs	r2, #13
 800784a:	701a      	strb	r2, [r3, #0]
      break;
 800784c:	e0c9      	b.n	80079e2 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	795b      	ldrb	r3, [r3, #5]
 8007852:	4619      	mov	r1, r3
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 f83f 	bl	80088d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	791b      	ldrb	r3, [r3, #4]
 800785e:	4619      	mov	r1, r3
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f001 f839 	bl	80088d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	701a      	strb	r2, [r3, #0]
      break;
 8007872:	e0b6      	b.n	80079e2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800787a:	2b00      	cmp	r3, #0
 800787c:	d036      	beq.n	80078ec <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800788a:	23ff      	movs	r3, #255	; 0xff
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f9e5 	bl	8007c5c <USBH_Get_StringDesc>
 8007892:	4603      	mov	r3, r0
 8007894:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d111      	bne.n	80078c0 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2206      	movs	r2, #6
 80078a0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2205      	movs	r2, #5
 80078a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80078b6:	2300      	movs	r3, #0
 80078b8:	2200      	movs	r2, #0
 80078ba:	f001 fa83 	bl	8008dc4 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80078be:	e092      	b.n	80079e6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	f040 808f 	bne.w	80079e6 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2206      	movs	r2, #6
 80078cc:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2205      	movs	r2, #5
 80078d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80078e2:	2300      	movs	r3, #0
 80078e4:	2200      	movs	r2, #0
 80078e6:	f001 fa6d 	bl	8008dc4 <osMessageQueuePut>
      break;
 80078ea:	e07c      	b.n	80079e6 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2206      	movs	r2, #6
 80078f0:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2205      	movs	r2, #5
 80078f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007906:	2300      	movs	r3, #0
 8007908:	2200      	movs	r2, #0
 800790a:	f001 fa5b 	bl	8008dc4 <osMessageQueuePut>
      break;
 800790e:	e06a      	b.n	80079e6 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007916:	2b00      	cmp	r3, #0
 8007918:	d027      	beq.n	800796a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007926:	23ff      	movs	r3, #255	; 0xff
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f997 	bl	8007c5c <USBH_Get_StringDesc>
 800792e:	4603      	mov	r3, r0
 8007930:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d103      	bne.n	8007940 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2207      	movs	r2, #7
 800793c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800793e:	e054      	b.n	80079ea <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	2b03      	cmp	r3, #3
 8007944:	d151      	bne.n	80079ea <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2207      	movs	r2, #7
 800794a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2205      	movs	r2, #5
 8007950:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007960:	2300      	movs	r3, #0
 8007962:	2200      	movs	r2, #0
 8007964:	f001 fa2e 	bl	8008dc4 <osMessageQueuePut>
      break;
 8007968:	e03f      	b.n	80079ea <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2207      	movs	r2, #7
 800796e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2205      	movs	r2, #5
 8007974:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007984:	2300      	movs	r3, #0
 8007986:	2200      	movs	r2, #0
 8007988:	f001 fa1c 	bl	8008dc4 <osMessageQueuePut>
      break;
 800798c:	e02d      	b.n	80079ea <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007994:	2b00      	cmp	r3, #0
 8007996:	d017      	beq.n	80079c8 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80079a4:	23ff      	movs	r3, #255	; 0xff
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f958 	bl	8007c5c <USBH_Get_StringDesc>
 80079ac:	4603      	mov	r3, r0
 80079ae:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d102      	bne.n	80079bc <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80079ba:	e018      	b.n	80079ee <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	2b03      	cmp	r3, #3
 80079c0:	d115      	bne.n	80079ee <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	73fb      	strb	r3, [r7, #15]
      break;
 80079c6:	e012      	b.n	80079ee <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	73fb      	strb	r3, [r7, #15]
      break;
 80079cc:	e00f      	b.n	80079ee <USBH_HandleEnum+0x44a>

    default:
      break;
 80079ce:	bf00      	nop
 80079d0:	e00e      	b.n	80079f0 <USBH_HandleEnum+0x44c>
      break;
 80079d2:	bf00      	nop
 80079d4:	e00c      	b.n	80079f0 <USBH_HandleEnum+0x44c>
      break;
 80079d6:	bf00      	nop
 80079d8:	e00a      	b.n	80079f0 <USBH_HandleEnum+0x44c>
      break;
 80079da:	bf00      	nop
 80079dc:	e008      	b.n	80079f0 <USBH_HandleEnum+0x44c>
      break;
 80079de:	bf00      	nop
 80079e0:	e006      	b.n	80079f0 <USBH_HandleEnum+0x44c>
      break;
 80079e2:	bf00      	nop
 80079e4:	e004      	b.n	80079f0 <USBH_HandleEnum+0x44c>
      break;
 80079e6:	bf00      	nop
 80079e8:	e002      	b.n	80079f0 <USBH_HandleEnum+0x44c>
      break;
 80079ea:	bf00      	nop
 80079ec:	e000      	b.n	80079f0 <USBH_HandleEnum+0x44c>
      break;
 80079ee:	bf00      	nop
  }
  return Status;
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop

080079fc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007a0e:	bf00      	nop
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr

08007a1a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f804 	bl	8007a3e <USBH_HandleSof>
}
 8007a36:	bf00      	nop
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b082      	sub	sp, #8
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b0b      	cmp	r3, #11
 8007a4e:	d10a      	bne.n	8007a66 <USBH_HandleSof+0x28>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d005      	beq.n	8007a66 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	4798      	blx	r3
  }
}
 8007a66:	bf00      	nop
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b082      	sub	sp, #8
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007a92:	2300      	movs	r3, #0
 8007a94:	2200      	movs	r2, #0
 8007a96:	f001 f995 	bl	8008dc4 <osMessageQueuePut>
#endif
#endif

  return;
 8007a9a:	bf00      	nop
}
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b083      	sub	sp, #12
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007ab2:	bf00      	nop
}
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b082      	sub	sp, #8
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007af2:	2300      	movs	r3, #0
 8007af4:	2200      	movs	r2, #0
 8007af6:	f001 f965 	bl	8008dc4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f004 fa7a 	bl	800c01e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	791b      	ldrb	r3, [r3, #4]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fed1 	bl	80088d8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	795b      	ldrb	r3, [r3, #5]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fecb 	bl	80088d8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007b56:	2300      	movs	r3, #0
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f001 f933 	bl	8008dc4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b80:	2200      	movs	r2, #0
 8007b82:	f001 f993 	bl	8008eac <osMessageQueueGet>
 8007b86:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1f0      	bne.n	8007b70 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7ff faa6 	bl	80070e0 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007b94:	e7ec      	b.n	8007b70 <USBH_Process_OS+0x8>

08007b96 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f001 f905 	bl	8008dc4 <osMessageQueuePut>
#endif

  return USBH_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af02      	add	r7, sp, #8
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007bd6:	78fb      	ldrb	r3, [r7, #3]
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007be2:	2100      	movs	r1, #0
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f864 	bl	8007cb2 <USBH_GetDescriptor>
 8007bea:	4603      	mov	r3, r0
 8007bec:	73fb      	strb	r3, [r7, #15]
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10a      	bne.n	8007c0a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c00:	78fa      	ldrb	r2, [r7, #3]
 8007c02:	b292      	uxth	r2, r2
 8007c04:	4619      	mov	r1, r3
 8007c06:	f000 f918 	bl	8007e3a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af02      	add	r7, sp, #8
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	331c      	adds	r3, #28
 8007c24:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007c26:	887b      	ldrh	r3, [r7, #2]
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c30:	2100      	movs	r1, #0
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f83d 	bl	8007cb2 <USBH_GetDescriptor>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	72fb      	strb	r3, [r7, #11]
 8007c3c:	7afb      	ldrb	r3, [r7, #11]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d107      	bne.n	8007c52 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007c48:	887a      	ldrh	r2, [r7, #2]
 8007c4a:	68f9      	ldr	r1, [r7, #12]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 f964 	bl	8007f1a <USBH_ParseCfgDesc>
  }

  return status;
 8007c52:	7afb      	ldrb	r3, [r7, #11]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b088      	sub	sp, #32
 8007c60:	af02      	add	r7, sp, #8
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	607a      	str	r2, [r7, #4]
 8007c66:	461a      	mov	r2, r3
 8007c68:	460b      	mov	r3, r1
 8007c6a:	72fb      	strb	r3, [r7, #11]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007c70:	7afb      	ldrb	r3, [r7, #11]
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007c78:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007c80:	893b      	ldrh	r3, [r7, #8]
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	460b      	mov	r3, r1
 8007c86:	2100      	movs	r1, #0
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f000 f812 	bl	8007cb2 <USBH_GetDescriptor>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	75fb      	strb	r3, [r7, #23]
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d107      	bne.n	8007ca8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c9e:	893a      	ldrh	r2, [r7, #8]
 8007ca0:	6879      	ldr	r1, [r7, #4]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 fa37 	bl	8008116 <USBH_ParseStringDesc>
  }

  return status;
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b084      	sub	sp, #16
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	60f8      	str	r0, [r7, #12]
 8007cba:	607b      	str	r3, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	72fb      	strb	r3, [r7, #11]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	789b      	ldrb	r3, [r3, #2]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d11c      	bne.n	8007d06 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007ccc:	7afb      	ldrb	r3, [r7, #11]
 8007cce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2206      	movs	r2, #6
 8007cdc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	893a      	ldrh	r2, [r7, #8]
 8007ce2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007ce4:	893b      	ldrh	r3, [r7, #8]
 8007ce6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007cea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cee:	d104      	bne.n	8007cfa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f240 4209 	movw	r2, #1033	; 0x409
 8007cf6:	829a      	strh	r2, [r3, #20]
 8007cf8:	e002      	b.n	8007d00 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8b3a      	ldrh	r2, [r7, #24]
 8007d04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007d06:	8b3b      	ldrh	r3, [r7, #24]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	6879      	ldr	r1, [r7, #4]
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 fa50 	bl	80081b2 <USBH_CtlReq>
 8007d12:	4603      	mov	r3, r0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	460b      	mov	r3, r1
 8007d26:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	789b      	ldrb	r3, [r3, #2]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d10f      	bne.n	8007d50 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2205      	movs	r2, #5
 8007d3a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007d3c:	78fb      	ldrb	r3, [r7, #3]
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007d50:	2200      	movs	r2, #0
 8007d52:	2100      	movs	r1, #0
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fa2c 	bl	80081b2 <USBH_CtlReq>
 8007d5a:	4603      	mov	r3, r0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	789b      	ldrb	r3, [r3, #2]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d10e      	bne.n	8007d96 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2209      	movs	r2, #9
 8007d82:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	887a      	ldrh	r2, [r7, #2]
 8007d88:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007d96:	2200      	movs	r2, #0
 8007d98:	2100      	movs	r1, #0
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fa09 	bl	80081b2 <USBH_CtlReq>
 8007da0:	4603      	mov	r3, r0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	460b      	mov	r3, r1
 8007db4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	789b      	ldrb	r3, [r3, #2]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d10f      	bne.n	8007dde <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2203      	movs	r2, #3
 8007dc8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007dca:	78fb      	ldrb	r3, [r7, #3]
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007dde:	2200      	movs	r2, #0
 8007de0:	2100      	movs	r1, #0
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f9e5 	bl	80081b2 <USBH_CtlReq>
 8007de8:	4603      	mov	r3, r0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b082      	sub	sp, #8
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	789b      	ldrb	r3, [r3, #2]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d10f      	bne.n	8007e26 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2202      	movs	r2, #2
 8007e0a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007e18:	78fb      	ldrb	r3, [r7, #3]
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007e26:	2200      	movs	r2, #0
 8007e28:	2100      	movs	r1, #0
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f9c1 	bl	80081b2 <USBH_CtlReq>
 8007e30:	4603      	mov	r3, r0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b085      	sub	sp, #20
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	4613      	mov	r3, r2
 8007e46:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	781a      	ldrb	r2, [r3, #0]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	785a      	ldrb	r2, [r3, #1]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	3302      	adds	r3, #2
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	3303      	adds	r3, #3
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	021b      	lsls	r3, r3, #8
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	791a      	ldrb	r2, [r3, #4]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	795a      	ldrb	r2, [r3, #5]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	799a      	ldrb	r2, [r3, #6]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	79da      	ldrb	r2, [r3, #7]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007e94:	88fb      	ldrh	r3, [r7, #6]
 8007e96:	2b08      	cmp	r3, #8
 8007e98:	d939      	bls.n	8007f0e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	3308      	adds	r3, #8
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	3309      	adds	r3, #9
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	021b      	lsls	r3, r3, #8
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	330a      	adds	r3, #10
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	330b      	adds	r3, #11
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	021b      	lsls	r3, r3, #8
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	330c      	adds	r3, #12
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	330d      	adds	r3, #13
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	021b      	lsls	r3, r3, #8
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	7b9a      	ldrb	r2, [r3, #14]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	7bda      	ldrb	r2, [r3, #15]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	7c1a      	ldrb	r2, [r3, #16]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	7c5a      	ldrb	r2, [r3, #17]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	745a      	strb	r2, [r3, #17]
  }
}
 8007f0e:	bf00      	nop
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b08a      	sub	sp, #40	; 0x28
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	60b9      	str	r1, [r7, #8]
 8007f24:	4613      	mov	r3, r2
 8007f26:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	781a      	ldrb	r2, [r3, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	785a      	ldrb	r2, [r3, #1]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	3302      	adds	r3, #2
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	3303      	adds	r3, #3
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	021b      	lsls	r3, r3, #8
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	4313      	orrs	r3, r2
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	791a      	ldrb	r2, [r3, #4]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	795a      	ldrb	r2, [r3, #5]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	799a      	ldrb	r2, [r3, #6]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	79da      	ldrb	r2, [r3, #7]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	7a1a      	ldrb	r2, [r3, #8]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007f90:	88fb      	ldrh	r3, [r7, #6]
 8007f92:	2b09      	cmp	r3, #9
 8007f94:	d95f      	bls.n	8008056 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007f96:	2309      	movs	r3, #9
 8007f98:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f9e:	e051      	b.n	8008044 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fa0:	f107 0316 	add.w	r3, r7, #22
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fa8:	f000 f8e8 	bl	800817c <USBH_GetNextDesc>
 8007fac:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	785b      	ldrb	r3, [r3, #1]
 8007fb2:	2b04      	cmp	r3, #4
 8007fb4:	d146      	bne.n	8008044 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007fb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fba:	221a      	movs	r2, #26
 8007fbc:	fb02 f303 	mul.w	r3, r2, r3
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	3302      	adds	r3, #2
 8007fc8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007fca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fcc:	69f8      	ldr	r0, [r7, #28]
 8007fce:	f000 f846 	bl	800805e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007fdc:	e022      	b.n	8008024 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fde:	f107 0316 	add.w	r3, r7, #22
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fe6:	f000 f8c9 	bl	800817c <USBH_GetNextDesc>
 8007fea:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	785b      	ldrb	r3, [r3, #1]
 8007ff0:	2b05      	cmp	r3, #5
 8007ff2:	d117      	bne.n	8008024 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ff8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007ffc:	3201      	adds	r2, #1
 8007ffe:	00d2      	lsls	r2, r2, #3
 8008000:	211a      	movs	r1, #26
 8008002:	fb01 f303 	mul.w	r3, r1, r3
 8008006:	4413      	add	r3, r2
 8008008:	3308      	adds	r3, #8
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	4413      	add	r3, r2
 800800e:	3304      	adds	r3, #4
 8008010:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008012:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008014:	69b8      	ldr	r0, [r7, #24]
 8008016:	f000 f851 	bl	80080bc <USBH_ParseEPDesc>
            ep_ix++;
 800801a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800801e:	3301      	adds	r3, #1
 8008020:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	791b      	ldrb	r3, [r3, #4]
 8008028:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800802c:	429a      	cmp	r2, r3
 800802e:	d204      	bcs.n	800803a <USBH_ParseCfgDesc+0x120>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	885a      	ldrh	r2, [r3, #2]
 8008034:	8afb      	ldrh	r3, [r7, #22]
 8008036:	429a      	cmp	r2, r3
 8008038:	d8d1      	bhi.n	8007fde <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800803a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800803e:	3301      	adds	r3, #1
 8008040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008044:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008048:	2b01      	cmp	r3, #1
 800804a:	d804      	bhi.n	8008056 <USBH_ParseCfgDesc+0x13c>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	885a      	ldrh	r2, [r3, #2]
 8008050:	8afb      	ldrh	r3, [r7, #22]
 8008052:	429a      	cmp	r2, r3
 8008054:	d8a4      	bhi.n	8007fa0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008056:	bf00      	nop
 8008058:	3728      	adds	r7, #40	; 0x28
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800805e:	b480      	push	{r7}
 8008060:	b083      	sub	sp, #12
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	781a      	ldrb	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	785a      	ldrb	r2, [r3, #1]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	789a      	ldrb	r2, [r3, #2]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	78da      	ldrb	r2, [r3, #3]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	791a      	ldrb	r2, [r3, #4]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	795a      	ldrb	r2, [r3, #5]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	799a      	ldrb	r2, [r3, #6]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	79da      	ldrb	r2, [r3, #7]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	7a1a      	ldrb	r2, [r3, #8]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	721a      	strb	r2, [r3, #8]
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	781a      	ldrb	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	785a      	ldrb	r2, [r3, #1]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	789a      	ldrb	r2, [r3, #2]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	78da      	ldrb	r2, [r3, #3]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	3304      	adds	r3, #4
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	3305      	adds	r3, #5
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	021b      	lsls	r3, r3, #8
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	4313      	orrs	r3, r2
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	799a      	ldrb	r2, [r3, #6]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	719a      	strb	r2, [r3, #6]
}
 800810a:	bf00      	nop
 800810c:	370c      	adds	r7, #12
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008116:	b480      	push	{r7}
 8008118:	b087      	sub	sp, #28
 800811a:	af00      	add	r7, sp, #0
 800811c:	60f8      	str	r0, [r7, #12]
 800811e:	60b9      	str	r1, [r7, #8]
 8008120:	4613      	mov	r3, r2
 8008122:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3301      	adds	r3, #1
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	2b03      	cmp	r3, #3
 800812c:	d120      	bne.n	8008170 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	1e9a      	subs	r2, r3, #2
 8008134:	88fb      	ldrh	r3, [r7, #6]
 8008136:	4293      	cmp	r3, r2
 8008138:	bf28      	it	cs
 800813a:	4613      	movcs	r3, r2
 800813c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3302      	adds	r3, #2
 8008142:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008144:	2300      	movs	r3, #0
 8008146:	82fb      	strh	r3, [r7, #22]
 8008148:	e00b      	b.n	8008162 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800814a:	8afb      	ldrh	r3, [r7, #22]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	4413      	add	r3, r2
 8008150:	781a      	ldrb	r2, [r3, #0]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	3301      	adds	r3, #1
 800815a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800815c:	8afb      	ldrh	r3, [r7, #22]
 800815e:	3302      	adds	r3, #2
 8008160:	82fb      	strh	r3, [r7, #22]
 8008162:	8afa      	ldrh	r2, [r7, #22]
 8008164:	8abb      	ldrh	r3, [r7, #20]
 8008166:	429a      	cmp	r2, r3
 8008168:	d3ef      	bcc.n	800814a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	2200      	movs	r2, #0
 800816e:	701a      	strb	r2, [r3, #0]
  }
}
 8008170:	bf00      	nop
 8008172:	371c      	adds	r7, #28
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	881a      	ldrh	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	b29b      	uxth	r3, r3
 8008190:	4413      	add	r3, r2
 8008192:	b29a      	uxth	r2, r3
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4413      	add	r3, r2
 80081a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80081a4:	68fb      	ldr	r3, [r7, #12]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b086      	sub	sp, #24
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	4613      	mov	r3, r2
 80081be:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80081c0:	2301      	movs	r3, #1
 80081c2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	789b      	ldrb	r3, [r3, #2]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d002      	beq.n	80081d2 <USBH_CtlReq+0x20>
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d01d      	beq.n	800820c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80081d0:	e043      	b.n	800825a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	88fa      	ldrh	r2, [r7, #6]
 80081dc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2201      	movs	r2, #1
 80081e2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2202      	movs	r2, #2
 80081e8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80081ea:	2301      	movs	r3, #1
 80081ec:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2203      	movs	r2, #3
 80081f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008202:	2300      	movs	r3, #0
 8008204:	2200      	movs	r2, #0
 8008206:	f000 fddd 	bl	8008dc4 <osMessageQueuePut>
      break;
 800820a:	e026      	b.n	800825a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 f829 	bl	8008264 <USBH_HandleControl>
 8008212:	4603      	mov	r3, r0
 8008214:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008216:	7dfb      	ldrb	r3, [r7, #23]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d002      	beq.n	8008222 <USBH_CtlReq+0x70>
 800821c:	7dfb      	ldrb	r3, [r7, #23]
 800821e:	2b03      	cmp	r3, #3
 8008220:	d106      	bne.n	8008230 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2201      	movs	r2, #1
 8008226:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	761a      	strb	r2, [r3, #24]
 800822e:	e005      	b.n	800823c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	2b02      	cmp	r3, #2
 8008234:	d102      	bne.n	800823c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2201      	movs	r2, #1
 800823a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2203      	movs	r2, #3
 8008240:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008250:	2300      	movs	r3, #0
 8008252:	2200      	movs	r2, #0
 8008254:	f000 fdb6 	bl	8008dc4 <osMessageQueuePut>
      break;
 8008258:	bf00      	nop
  }
  return status;
 800825a:	7dfb      	ldrb	r3, [r7, #23]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af02      	add	r7, sp, #8
 800826a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800826c:	2301      	movs	r3, #1
 800826e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008270:	2300      	movs	r3, #0
 8008272:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	7e1b      	ldrb	r3, [r3, #24]
 8008278:	3b01      	subs	r3, #1
 800827a:	2b0a      	cmp	r3, #10
 800827c:	f200 822b 	bhi.w	80086d6 <USBH_HandleControl+0x472>
 8008280:	a201      	add	r2, pc, #4	; (adr r2, 8008288 <USBH_HandleControl+0x24>)
 8008282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008286:	bf00      	nop
 8008288:	080082b5 	.word	0x080082b5
 800828c:	080082cf 	.word	0x080082cf
 8008290:	08008371 	.word	0x08008371
 8008294:	08008397 	.word	0x08008397
 8008298:	08008423 	.word	0x08008423
 800829c:	0800844f 	.word	0x0800844f
 80082a0:	08008511 	.word	0x08008511
 80082a4:	08008533 	.word	0x08008533
 80082a8:	080085c5 	.word	0x080085c5
 80082ac:	080085ed 	.word	0x080085ed
 80082b0:	0800867f 	.word	0x0800867f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f103 0110 	add.w	r1, r3, #16
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	795b      	ldrb	r3, [r3, #5]
 80082be:	461a      	mov	r2, r3
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fa19 	bl	80086f8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2202      	movs	r2, #2
 80082ca:	761a      	strb	r2, [r3, #24]
      break;
 80082cc:	e20e      	b.n	80086ec <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	795b      	ldrb	r3, [r3, #5]
 80082d2:	4619      	mov	r1, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f003 ff8f 	bl	800c1f8 <USBH_LL_GetURBState>
 80082da:	4603      	mov	r3, r0
 80082dc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80082de:	7bbb      	ldrb	r3, [r7, #14]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d12c      	bne.n	800833e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	7c1b      	ldrb	r3, [r3, #16]
 80082e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082ec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	8adb      	ldrh	r3, [r3, #22]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00a      	beq.n	800830c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80082f6:	7b7b      	ldrb	r3, [r7, #13]
 80082f8:	2b80      	cmp	r3, #128	; 0x80
 80082fa:	d103      	bne.n	8008304 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2203      	movs	r2, #3
 8008300:	761a      	strb	r2, [r3, #24]
 8008302:	e00d      	b.n	8008320 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2205      	movs	r2, #5
 8008308:	761a      	strb	r2, [r3, #24]
 800830a:	e009      	b.n	8008320 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800830c:	7b7b      	ldrb	r3, [r7, #13]
 800830e:	2b80      	cmp	r3, #128	; 0x80
 8008310:	d103      	bne.n	800831a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2209      	movs	r2, #9
 8008316:	761a      	strb	r2, [r3, #24]
 8008318:	e002      	b.n	8008320 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2207      	movs	r2, #7
 800831e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2203      	movs	r2, #3
 8008324:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008334:	2300      	movs	r3, #0
 8008336:	2200      	movs	r2, #0
 8008338:	f000 fd44 	bl	8008dc4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800833c:	e1cd      	b.n	80086da <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	2b04      	cmp	r3, #4
 8008342:	d003      	beq.n	800834c <USBH_HandleControl+0xe8>
 8008344:	7bbb      	ldrb	r3, [r7, #14]
 8008346:	2b02      	cmp	r3, #2
 8008348:	f040 81c7 	bne.w	80086da <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	220b      	movs	r2, #11
 8008350:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2203      	movs	r2, #3
 8008356:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008366:	2300      	movs	r3, #0
 8008368:	2200      	movs	r2, #0
 800836a:	f000 fd2b 	bl	8008dc4 <osMessageQueuePut>
      break;
 800836e:	e1b4      	b.n	80086da <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008376:	b29a      	uxth	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6899      	ldr	r1, [r3, #8]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	899a      	ldrh	r2, [r3, #12]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	791b      	ldrb	r3, [r3, #4]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f9f4 	bl	8008776 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2204      	movs	r2, #4
 8008392:	761a      	strb	r2, [r3, #24]
      break;
 8008394:	e1aa      	b.n	80086ec <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	791b      	ldrb	r3, [r3, #4]
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f003 ff2b 	bl	800c1f8 <USBH_LL_GetURBState>
 80083a2:	4603      	mov	r3, r0
 80083a4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80083a6:	7bbb      	ldrb	r3, [r7, #14]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d110      	bne.n	80083ce <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2209      	movs	r2, #9
 80083b0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2203      	movs	r2, #3
 80083b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80083c6:	2300      	movs	r3, #0
 80083c8:	2200      	movs	r2, #0
 80083ca:	f000 fcfb 	bl	8008dc4 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80083ce:	7bbb      	ldrb	r3, [r7, #14]
 80083d0:	2b05      	cmp	r3, #5
 80083d2:	d110      	bne.n	80083f6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80083d4:	2303      	movs	r3, #3
 80083d6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2203      	movs	r2, #3
 80083dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80083ec:	2300      	movs	r3, #0
 80083ee:	2200      	movs	r2, #0
 80083f0:	f000 fce8 	bl	8008dc4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80083f4:	e173      	b.n	80086de <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80083f6:	7bbb      	ldrb	r3, [r7, #14]
 80083f8:	2b04      	cmp	r3, #4
 80083fa:	f040 8170 	bne.w	80086de <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	220b      	movs	r2, #11
 8008402:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2203      	movs	r2, #3
 8008408:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008418:	2300      	movs	r3, #0
 800841a:	2200      	movs	r2, #0
 800841c:	f000 fcd2 	bl	8008dc4 <osMessageQueuePut>
      break;
 8008420:	e15d      	b.n	80086de <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6899      	ldr	r1, [r3, #8]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	899a      	ldrh	r2, [r3, #12]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	7958      	ldrb	r0, [r3, #5]
 800842e:	2301      	movs	r3, #1
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	4603      	mov	r3, r0
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f979 	bl	800872c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008440:	b29a      	uxth	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2206      	movs	r2, #6
 800844a:	761a      	strb	r2, [r3, #24]
      break;
 800844c:	e14e      	b.n	80086ec <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	795b      	ldrb	r3, [r3, #5]
 8008452:	4619      	mov	r1, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f003 fecf 	bl	800c1f8 <USBH_LL_GetURBState>
 800845a:	4603      	mov	r3, r0
 800845c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800845e:	7bbb      	ldrb	r3, [r7, #14]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d111      	bne.n	8008488 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2207      	movs	r2, #7
 8008468:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2203      	movs	r2, #3
 800846e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800847e:	2300      	movs	r3, #0
 8008480:	2200      	movs	r2, #0
 8008482:	f000 fc9f 	bl	8008dc4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008486:	e12c      	b.n	80086e2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	2b05      	cmp	r3, #5
 800848c:	d113      	bne.n	80084b6 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	220c      	movs	r2, #12
 8008492:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008494:	2303      	movs	r3, #3
 8008496:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2203      	movs	r2, #3
 800849c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80084ac:	2300      	movs	r3, #0
 80084ae:	2200      	movs	r2, #0
 80084b0:	f000 fc88 	bl	8008dc4 <osMessageQueuePut>
      break;
 80084b4:	e115      	b.n	80086e2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d111      	bne.n	80084e0 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2205      	movs	r2, #5
 80084c0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2203      	movs	r2, #3
 80084c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80084d6:	2300      	movs	r3, #0
 80084d8:	2200      	movs	r2, #0
 80084da:	f000 fc73 	bl	8008dc4 <osMessageQueuePut>
      break;
 80084de:	e100      	b.n	80086e2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 80084e0:	7bbb      	ldrb	r3, [r7, #14]
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	f040 80fd 	bne.w	80086e2 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	220b      	movs	r2, #11
 80084ec:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80084ee:	2302      	movs	r3, #2
 80084f0:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2203      	movs	r2, #3
 80084f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008506:	2300      	movs	r3, #0
 8008508:	2200      	movs	r2, #0
 800850a:	f000 fc5b 	bl	8008dc4 <osMessageQueuePut>
      break;
 800850e:	e0e8      	b.n	80086e2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	791b      	ldrb	r3, [r3, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	2100      	movs	r1, #0
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f92c 	bl	8008776 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008524:	b29a      	uxth	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2208      	movs	r2, #8
 800852e:	761a      	strb	r2, [r3, #24]

      break;
 8008530:	e0dc      	b.n	80086ec <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	791b      	ldrb	r3, [r3, #4]
 8008536:	4619      	mov	r1, r3
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f003 fe5d 	bl	800c1f8 <USBH_LL_GetURBState>
 800853e:	4603      	mov	r3, r0
 8008540:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008542:	7bbb      	ldrb	r3, [r7, #14]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d113      	bne.n	8008570 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	220d      	movs	r2, #13
 800854c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2203      	movs	r2, #3
 8008556:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008566:	2300      	movs	r3, #0
 8008568:	2200      	movs	r2, #0
 800856a:	f000 fc2b 	bl	8008dc4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800856e:	e0ba      	b.n	80086e6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 8008570:	7bbb      	ldrb	r3, [r7, #14]
 8008572:	2b04      	cmp	r3, #4
 8008574:	d111      	bne.n	800859a <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	220b      	movs	r2, #11
 800857a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2203      	movs	r2, #3
 8008580:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008590:	2300      	movs	r3, #0
 8008592:	2200      	movs	r2, #0
 8008594:	f000 fc16 	bl	8008dc4 <osMessageQueuePut>
      break;
 8008598:	e0a5      	b.n	80086e6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800859a:	7bbb      	ldrb	r3, [r7, #14]
 800859c:	2b05      	cmp	r3, #5
 800859e:	f040 80a2 	bne.w	80086e6 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 80085a2:	2303      	movs	r3, #3
 80085a4:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2203      	movs	r2, #3
 80085aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80085ba:	2300      	movs	r3, #0
 80085bc:	2200      	movs	r2, #0
 80085be:	f000 fc01 	bl	8008dc4 <osMessageQueuePut>
      break;
 80085c2:	e090      	b.n	80086e6 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	795a      	ldrb	r2, [r3, #5]
 80085c8:	2301      	movs	r3, #1
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	4613      	mov	r3, r2
 80085ce:	2200      	movs	r2, #0
 80085d0:	2100      	movs	r1, #0
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f8aa 	bl	800872c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085de:	b29a      	uxth	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	220a      	movs	r2, #10
 80085e8:	761a      	strb	r2, [r3, #24]
      break;
 80085ea:	e07f      	b.n	80086ec <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	795b      	ldrb	r3, [r3, #5]
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f003 fe00 	bl	800c1f8 <USBH_LL_GetURBState>
 80085f8:	4603      	mov	r3, r0
 80085fa:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80085fc:	7bbb      	ldrb	r3, [r7, #14]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d113      	bne.n	800862a <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	220d      	movs	r2, #13
 800860a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2203      	movs	r2, #3
 8008610:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008620:	2300      	movs	r3, #0
 8008622:	2200      	movs	r2, #0
 8008624:	f000 fbce 	bl	8008dc4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008628:	e05f      	b.n	80086ea <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800862a:	7bbb      	ldrb	r3, [r7, #14]
 800862c:	2b02      	cmp	r3, #2
 800862e:	d111      	bne.n	8008654 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2209      	movs	r2, #9
 8008634:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2203      	movs	r2, #3
 800863a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800864a:	2300      	movs	r3, #0
 800864c:	2200      	movs	r2, #0
 800864e:	f000 fbb9 	bl	8008dc4 <osMessageQueuePut>
      break;
 8008652:	e04a      	b.n	80086ea <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	2b04      	cmp	r3, #4
 8008658:	d147      	bne.n	80086ea <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	220b      	movs	r2, #11
 800865e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2203      	movs	r2, #3
 8008664:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008674:	2300      	movs	r3, #0
 8008676:	2200      	movs	r2, #0
 8008678:	f000 fba4 	bl	8008dc4 <osMessageQueuePut>
      break;
 800867c:	e035      	b.n	80086ea <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	7e5b      	ldrb	r3, [r3, #25]
 8008682:	3301      	adds	r3, #1
 8008684:	b2da      	uxtb	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	765a      	strb	r2, [r3, #25]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	7e5b      	ldrb	r3, [r3, #25]
 800868e:	2b02      	cmp	r3, #2
 8008690:	d806      	bhi.n	80086a0 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800869e:	e025      	b.n	80086ec <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80086a6:	2106      	movs	r1, #6
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	795b      	ldrb	r3, [r3, #5]
 80086b6:	4619      	mov	r1, r3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 f90d 	bl	80088d8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	791b      	ldrb	r3, [r3, #4]
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f907 	bl	80088d8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80086d0:	2302      	movs	r3, #2
 80086d2:	73fb      	strb	r3, [r7, #15]
      break;
 80086d4:	e00a      	b.n	80086ec <USBH_HandleControl+0x488>

    default:
      break;
 80086d6:	bf00      	nop
 80086d8:	e008      	b.n	80086ec <USBH_HandleControl+0x488>
      break;
 80086da:	bf00      	nop
 80086dc:	e006      	b.n	80086ec <USBH_HandleControl+0x488>
      break;
 80086de:	bf00      	nop
 80086e0:	e004      	b.n	80086ec <USBH_HandleControl+0x488>
      break;
 80086e2:	bf00      	nop
 80086e4:	e002      	b.n	80086ec <USBH_HandleControl+0x488>
      break;
 80086e6:	bf00      	nop
 80086e8:	e000      	b.n	80086ec <USBH_HandleControl+0x488>
      break;
 80086ea:	bf00      	nop
  }

  return status;
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop

080086f8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b088      	sub	sp, #32
 80086fc:	af04      	add	r7, sp, #16
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	4613      	mov	r3, r2
 8008704:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008706:	79f9      	ldrb	r1, [r7, #7]
 8008708:	2300      	movs	r3, #0
 800870a:	9303      	str	r3, [sp, #12]
 800870c:	2308      	movs	r3, #8
 800870e:	9302      	str	r3, [sp, #8]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	9301      	str	r3, [sp, #4]
 8008714:	2300      	movs	r3, #0
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	2300      	movs	r3, #0
 800871a:	2200      	movs	r2, #0
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f003 fd3a 	bl	800c196 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b088      	sub	sp, #32
 8008730:	af04      	add	r7, sp, #16
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	4611      	mov	r1, r2
 8008738:	461a      	mov	r2, r3
 800873a:	460b      	mov	r3, r1
 800873c:	80fb      	strh	r3, [r7, #6]
 800873e:	4613      	mov	r3, r2
 8008740:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008750:	7979      	ldrb	r1, [r7, #5]
 8008752:	7e3b      	ldrb	r3, [r7, #24]
 8008754:	9303      	str	r3, [sp, #12]
 8008756:	88fb      	ldrh	r3, [r7, #6]
 8008758:	9302      	str	r3, [sp, #8]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	2301      	movs	r3, #1
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	2300      	movs	r3, #0
 8008764:	2200      	movs	r2, #0
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f003 fd15 	bl	800c196 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b088      	sub	sp, #32
 800877a:	af04      	add	r7, sp, #16
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	4611      	mov	r1, r2
 8008782:	461a      	mov	r2, r3
 8008784:	460b      	mov	r3, r1
 8008786:	80fb      	strh	r3, [r7, #6]
 8008788:	4613      	mov	r3, r2
 800878a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800878c:	7979      	ldrb	r1, [r7, #5]
 800878e:	2300      	movs	r3, #0
 8008790:	9303      	str	r3, [sp, #12]
 8008792:	88fb      	ldrh	r3, [r7, #6]
 8008794:	9302      	str	r3, [sp, #8]
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	9301      	str	r3, [sp, #4]
 800879a:	2301      	movs	r3, #1
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	2300      	movs	r3, #0
 80087a0:	2201      	movs	r2, #1
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f003 fcf7 	bl	800c196 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80087a8:	2300      	movs	r3, #0

}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b088      	sub	sp, #32
 80087b6:	af04      	add	r7, sp, #16
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	60b9      	str	r1, [r7, #8]
 80087bc:	4611      	mov	r1, r2
 80087be:	461a      	mov	r2, r3
 80087c0:	460b      	mov	r3, r1
 80087c2:	80fb      	strh	r3, [r7, #6]
 80087c4:	4613      	mov	r3, r2
 80087c6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80087d2:	2300      	movs	r3, #0
 80087d4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80087d6:	7979      	ldrb	r1, [r7, #5]
 80087d8:	7e3b      	ldrb	r3, [r7, #24]
 80087da:	9303      	str	r3, [sp, #12]
 80087dc:	88fb      	ldrh	r3, [r7, #6]
 80087de:	9302      	str	r3, [sp, #8]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	9301      	str	r3, [sp, #4]
 80087e4:	2301      	movs	r3, #1
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	2302      	movs	r3, #2
 80087ea:	2200      	movs	r2, #0
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f003 fcd2 	bl	800c196 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b088      	sub	sp, #32
 8008800:	af04      	add	r7, sp, #16
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	4611      	mov	r1, r2
 8008808:	461a      	mov	r2, r3
 800880a:	460b      	mov	r3, r1
 800880c:	80fb      	strh	r3, [r7, #6]
 800880e:	4613      	mov	r3, r2
 8008810:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008812:	7979      	ldrb	r1, [r7, #5]
 8008814:	2300      	movs	r3, #0
 8008816:	9303      	str	r3, [sp, #12]
 8008818:	88fb      	ldrh	r3, [r7, #6]
 800881a:	9302      	str	r3, [sp, #8]
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	9301      	str	r3, [sp, #4]
 8008820:	2301      	movs	r3, #1
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	2302      	movs	r3, #2
 8008826:	2201      	movs	r2, #1
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f003 fcb4 	bl	800c196 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af04      	add	r7, sp, #16
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	4608      	mov	r0, r1
 8008842:	4611      	mov	r1, r2
 8008844:	461a      	mov	r2, r3
 8008846:	4603      	mov	r3, r0
 8008848:	70fb      	strb	r3, [r7, #3]
 800884a:	460b      	mov	r3, r1
 800884c:	70bb      	strb	r3, [r7, #2]
 800884e:	4613      	mov	r3, r2
 8008850:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008852:	7878      	ldrb	r0, [r7, #1]
 8008854:	78ba      	ldrb	r2, [r7, #2]
 8008856:	78f9      	ldrb	r1, [r7, #3]
 8008858:	8b3b      	ldrh	r3, [r7, #24]
 800885a:	9302      	str	r3, [sp, #8]
 800885c:	7d3b      	ldrb	r3, [r7, #20]
 800885e:	9301      	str	r3, [sp, #4]
 8008860:	7c3b      	ldrb	r3, [r7, #16]
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	4603      	mov	r3, r0
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f003 fc47 	bl	800c0fa <USBH_LL_OpenPipe>

  return USBH_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b082      	sub	sp, #8
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	460b      	mov	r3, r1
 8008880:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008882:	78fb      	ldrb	r3, [r7, #3]
 8008884:	4619      	mov	r1, r3
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f003 fc66 	bl	800c158 <USBH_LL_ClosePipe>

  return USBH_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	460b      	mov	r3, r1
 80088a0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f836 	bl	8008914 <USBH_GetFreePipe>
 80088a8:	4603      	mov	r3, r0
 80088aa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80088ac:	89fb      	ldrh	r3, [r7, #14]
 80088ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d00a      	beq.n	80088cc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80088b6:	78fa      	ldrb	r2, [r7, #3]
 80088b8:	89fb      	ldrh	r3, [r7, #14]
 80088ba:	f003 030f 	and.w	r3, r3, #15
 80088be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088c2:	6879      	ldr	r1, [r7, #4]
 80088c4:	33e0      	adds	r3, #224	; 0xe0
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	440b      	add	r3, r1
 80088ca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80088cc:	89fb      	ldrh	r3, [r7, #14]
 80088ce:	b2db      	uxtb	r3, r3
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	460b      	mov	r3, r1
 80088e2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80088e4:	78fb      	ldrb	r3, [r7, #3]
 80088e6:	2b0a      	cmp	r3, #10
 80088e8:	d80d      	bhi.n	8008906 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80088ea:	78fb      	ldrb	r3, [r7, #3]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	33e0      	adds	r3, #224	; 0xe0
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	78fb      	ldrb	r3, [r7, #3]
 80088f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80088fc:	6879      	ldr	r1, [r7, #4]
 80088fe:	33e0      	adds	r3, #224	; 0xe0
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	440b      	add	r3, r1
 8008904:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800891c:	2300      	movs	r3, #0
 800891e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008920:	2300      	movs	r3, #0
 8008922:	73fb      	strb	r3, [r7, #15]
 8008924:	e00f      	b.n	8008946 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008926:	7bfb      	ldrb	r3, [r7, #15]
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	33e0      	adds	r3, #224	; 0xe0
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d102      	bne.n	8008940 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800893a:	7bfb      	ldrb	r3, [r7, #15]
 800893c:	b29b      	uxth	r3, r3
 800893e:	e007      	b.n	8008950 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008940:	7bfb      	ldrb	r3, [r7, #15]
 8008942:	3301      	adds	r3, #1
 8008944:	73fb      	strb	r3, [r7, #15]
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	2b0a      	cmp	r3, #10
 800894a:	d9ec      	bls.n	8008926 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800894c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800895c:	b480      	push	{r7}
 800895e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008960:	bf00      	nop
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
	...

0800896c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008972:	f3ef 8305 	mrs	r3, IPSR
 8008976:	60bb      	str	r3, [r7, #8]
  return(result);
 8008978:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10f      	bne.n	800899e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800897e:	f3ef 8310 	mrs	r3, PRIMASK
 8008982:	607b      	str	r3, [r7, #4]
  return(result);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d105      	bne.n	8008996 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800898a:	f3ef 8311 	mrs	r3, BASEPRI
 800898e:	603b      	str	r3, [r7, #0]
  return(result);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d007      	beq.n	80089a6 <osKernelInitialize+0x3a>
 8008996:	4b0e      	ldr	r3, [pc, #56]	; (80089d0 <osKernelInitialize+0x64>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b02      	cmp	r3, #2
 800899c:	d103      	bne.n	80089a6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800899e:	f06f 0305 	mvn.w	r3, #5
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	e00c      	b.n	80089c0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80089a6:	4b0a      	ldr	r3, [pc, #40]	; (80089d0 <osKernelInitialize+0x64>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d105      	bne.n	80089ba <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80089ae:	4b08      	ldr	r3, [pc, #32]	; (80089d0 <osKernelInitialize+0x64>)
 80089b0:	2201      	movs	r2, #1
 80089b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80089b4:	2300      	movs	r3, #0
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	e002      	b.n	80089c0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80089ba:	f04f 33ff 	mov.w	r3, #4294967295
 80089be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80089c0:	68fb      	ldr	r3, [r7, #12]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	20000158 	.word	0x20000158

080089d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089da:	f3ef 8305 	mrs	r3, IPSR
 80089de:	60bb      	str	r3, [r7, #8]
  return(result);
 80089e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10f      	bne.n	8008a06 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089e6:	f3ef 8310 	mrs	r3, PRIMASK
 80089ea:	607b      	str	r3, [r7, #4]
  return(result);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d105      	bne.n	80089fe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80089f2:	f3ef 8311 	mrs	r3, BASEPRI
 80089f6:	603b      	str	r3, [r7, #0]
  return(result);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d007      	beq.n	8008a0e <osKernelStart+0x3a>
 80089fe:	4b0f      	ldr	r3, [pc, #60]	; (8008a3c <osKernelStart+0x68>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d103      	bne.n	8008a0e <osKernelStart+0x3a>
    stat = osErrorISR;
 8008a06:	f06f 0305 	mvn.w	r3, #5
 8008a0a:	60fb      	str	r3, [r7, #12]
 8008a0c:	e010      	b.n	8008a30 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008a0e:	4b0b      	ldr	r3, [pc, #44]	; (8008a3c <osKernelStart+0x68>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d109      	bne.n	8008a2a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008a16:	f7ff ffa1 	bl	800895c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008a1a:	4b08      	ldr	r3, [pc, #32]	; (8008a3c <osKernelStart+0x68>)
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008a20:	f001 fb7c 	bl	800a11c <vTaskStartScheduler>
      stat = osOK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	e002      	b.n	8008a30 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a2e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008a30:	68fb      	ldr	r3, [r7, #12]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	20000158 	.word	0x20000158

08008a40 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a46:	f3ef 8305 	mrs	r3, IPSR
 8008a4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a4c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10f      	bne.n	8008a72 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a52:	f3ef 8310 	mrs	r3, PRIMASK
 8008a56:	607b      	str	r3, [r7, #4]
  return(result);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d105      	bne.n	8008a6a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a5e:	f3ef 8311 	mrs	r3, BASEPRI
 8008a62:	603b      	str	r3, [r7, #0]
  return(result);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d007      	beq.n	8008a7a <osKernelGetTickCount+0x3a>
 8008a6a:	4b08      	ldr	r3, [pc, #32]	; (8008a8c <osKernelGetTickCount+0x4c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d103      	bne.n	8008a7a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8008a72:	f001 fca9 	bl	800a3c8 <xTaskGetTickCountFromISR>
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	e002      	b.n	8008a80 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8008a7a:	f001 fc95 	bl	800a3a8 <xTaskGetTickCount>
 8008a7e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8008a80:	68fb      	ldr	r3, [r7, #12]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20000158 	.word	0x20000158

08008a90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b090      	sub	sp, #64	; 0x40
 8008a94:	af04      	add	r7, sp, #16
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008aa0:	f3ef 8305 	mrs	r3, IPSR
 8008aa4:	61fb      	str	r3, [r7, #28]
  return(result);
 8008aa6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f040 808f 	bne.w	8008bcc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aae:	f3ef 8310 	mrs	r3, PRIMASK
 8008ab2:	61bb      	str	r3, [r7, #24]
  return(result);
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d105      	bne.n	8008ac6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008aba:	f3ef 8311 	mrs	r3, BASEPRI
 8008abe:	617b      	str	r3, [r7, #20]
  return(result);
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d003      	beq.n	8008ace <osThreadNew+0x3e>
 8008ac6:	4b44      	ldr	r3, [pc, #272]	; (8008bd8 <osThreadNew+0x148>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d07e      	beq.n	8008bcc <osThreadNew+0x13c>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d07b      	beq.n	8008bcc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008ad4:	2380      	movs	r3, #128	; 0x80
 8008ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008ad8:	2318      	movs	r3, #24
 8008ada:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008adc:	2300      	movs	r3, #0
 8008ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ae4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d045      	beq.n	8008b78 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d002      	beq.n	8008afa <osThreadNew+0x6a>
        name = attr->name;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d002      	beq.n	8008b08 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d008      	beq.n	8008b20 <osThreadNew+0x90>
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	2b38      	cmp	r3, #56	; 0x38
 8008b12:	d805      	bhi.n	8008b20 <osThreadNew+0x90>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d001      	beq.n	8008b24 <osThreadNew+0x94>
        return (NULL);
 8008b20:	2300      	movs	r3, #0
 8008b22:	e054      	b.n	8008bce <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d003      	beq.n	8008b34 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	089b      	lsrs	r3, r3, #2
 8008b32:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00e      	beq.n	8008b5a <osThreadNew+0xca>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	2b5b      	cmp	r3, #91	; 0x5b
 8008b42:	d90a      	bls.n	8008b5a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d006      	beq.n	8008b5a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <osThreadNew+0xca>
        mem = 1;
 8008b54:	2301      	movs	r3, #1
 8008b56:	623b      	str	r3, [r7, #32]
 8008b58:	e010      	b.n	8008b7c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10c      	bne.n	8008b7c <osThreadNew+0xec>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d108      	bne.n	8008b7c <osThreadNew+0xec>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d104      	bne.n	8008b7c <osThreadNew+0xec>
          mem = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	623b      	str	r3, [r7, #32]
 8008b76:	e001      	b.n	8008b7c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008b7c:	6a3b      	ldr	r3, [r7, #32]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d110      	bne.n	8008ba4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b8a:	9202      	str	r2, [sp, #8]
 8008b8c:	9301      	str	r3, [sp, #4]
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f001 f873 	bl	8009c84 <xTaskCreateStatic>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	613b      	str	r3, [r7, #16]
 8008ba2:	e013      	b.n	8008bcc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008ba4:	6a3b      	ldr	r3, [r7, #32]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d110      	bne.n	8008bcc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	f107 0310 	add.w	r3, r7, #16
 8008bb2:	9301      	str	r3, [sp, #4]
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f001 f8bb 	bl	8009d38 <xTaskCreate>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d001      	beq.n	8008bcc <osThreadNew+0x13c>
          hTask = NULL;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008bcc:	693b      	ldr	r3, [r7, #16]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3730      	adds	r7, #48	; 0x30
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	20000158 	.word	0x20000158

08008bdc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008be4:	f3ef 8305 	mrs	r3, IPSR
 8008be8:	613b      	str	r3, [r7, #16]
  return(result);
 8008bea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10f      	bne.n	8008c10 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8008bf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d105      	bne.n	8008c08 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008bfc:	f3ef 8311 	mrs	r3, BASEPRI
 8008c00:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d007      	beq.n	8008c18 <osDelay+0x3c>
 8008c08:	4b0a      	ldr	r3, [pc, #40]	; (8008c34 <osDelay+0x58>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d103      	bne.n	8008c18 <osDelay+0x3c>
    stat = osErrorISR;
 8008c10:	f06f 0305 	mvn.w	r3, #5
 8008c14:	617b      	str	r3, [r7, #20]
 8008c16:	e007      	b.n	8008c28 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d002      	beq.n	8008c28 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f001 fa46 	bl	800a0b4 <vTaskDelay>
    }
  }

  return (stat);
 8008c28:	697b      	ldr	r3, [r7, #20]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3718      	adds	r7, #24
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20000158 	.word	0x20000158

08008c38 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b088      	sub	sp, #32
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c40:	f3ef 8305 	mrs	r3, IPSR
 8008c44:	617b      	str	r3, [r7, #20]
  return(result);
 8008c46:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10f      	bne.n	8008c6c <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c50:	613b      	str	r3, [r7, #16]
  return(result);
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d105      	bne.n	8008c64 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c58:	f3ef 8311 	mrs	r3, BASEPRI
 8008c5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d007      	beq.n	8008c74 <osDelayUntil+0x3c>
 8008c64:	4b13      	ldr	r3, [pc, #76]	; (8008cb4 <osDelayUntil+0x7c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d103      	bne.n	8008c74 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8008c6c:	f06f 0305 	mvn.w	r3, #5
 8008c70:	61fb      	str	r3, [r7, #28]
 8008c72:	e019      	b.n	8008ca8 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8008c78:	f001 fb96 	bl	800a3a8 <xTaskGetTickCount>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d009      	beq.n	8008ca2 <osDelayUntil+0x6a>
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	db06      	blt.n	8008ca2 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8008c94:	f107 0308 	add.w	r3, r7, #8
 8008c98:	69b9      	ldr	r1, [r7, #24]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f001 f990 	bl	8009fc0 <vTaskDelayUntil>
 8008ca0:	e002      	b.n	8008ca8 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8008ca2:	f06f 0303 	mvn.w	r3, #3
 8008ca6:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8008ca8:	69fb      	ldr	r3, [r7, #28]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3720      	adds	r7, #32
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20000158 	.word	0x20000158

08008cb8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b08c      	sub	sp, #48	; 0x30
 8008cbc:	af02      	add	r7, sp, #8
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cc8:	f3ef 8305 	mrs	r3, IPSR
 8008ccc:	61bb      	str	r3, [r7, #24]
  return(result);
 8008cce:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d170      	bne.n	8008db6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cd4:	f3ef 8310 	mrs	r3, PRIMASK
 8008cd8:	617b      	str	r3, [r7, #20]
  return(result);
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d105      	bne.n	8008cec <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ce0:	f3ef 8311 	mrs	r3, BASEPRI
 8008ce4:	613b      	str	r3, [r7, #16]
  return(result);
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <osMessageQueueNew+0x3c>
 8008cec:	4b34      	ldr	r3, [pc, #208]	; (8008dc0 <osMessageQueueNew+0x108>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d060      	beq.n	8008db6 <osMessageQueueNew+0xfe>
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d05d      	beq.n	8008db6 <osMessageQueueNew+0xfe>
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d05a      	beq.n	8008db6 <osMessageQueueNew+0xfe>
    mem = -1;
 8008d00:	f04f 33ff 	mov.w	r3, #4294967295
 8008d04:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d029      	beq.n	8008d60 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d012      	beq.n	8008d3a <osMessageQueueNew+0x82>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	2b4f      	cmp	r3, #79	; 0x4f
 8008d1a:	d90e      	bls.n	8008d3a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00a      	beq.n	8008d3a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	695a      	ldr	r2, [r3, #20]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	68b9      	ldr	r1, [r7, #8]
 8008d2c:	fb01 f303 	mul.w	r3, r1, r3
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d302      	bcc.n	8008d3a <osMessageQueueNew+0x82>
        mem = 1;
 8008d34:	2301      	movs	r3, #1
 8008d36:	623b      	str	r3, [r7, #32]
 8008d38:	e014      	b.n	8008d64 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d110      	bne.n	8008d64 <osMessageQueueNew+0xac>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d10c      	bne.n	8008d64 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d108      	bne.n	8008d64 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d104      	bne.n	8008d64 <osMessageQueueNew+0xac>
          mem = 0;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	623b      	str	r3, [r7, #32]
 8008d5e:	e001      	b.n	8008d64 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008d64:	6a3b      	ldr	r3, [r7, #32]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d10c      	bne.n	8008d84 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	691a      	ldr	r2, [r3, #16]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6899      	ldr	r1, [r3, #8]
 8008d72:	2300      	movs	r3, #0
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	460b      	mov	r3, r1
 8008d78:	68b9      	ldr	r1, [r7, #8]
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 fa58 	bl	8009230 <xQueueGenericCreateStatic>
 8008d80:	6278      	str	r0, [r7, #36]	; 0x24
 8008d82:	e008      	b.n	8008d96 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8008d84:	6a3b      	ldr	r3, [r7, #32]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d105      	bne.n	8008d96 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	68b9      	ldr	r1, [r7, #8]
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f000 fac1 	bl	8009316 <xQueueGenericCreate>
 8008d94:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00c      	beq.n	8008db6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d003      	beq.n	8008daa <osMessageQueueNew+0xf2>
        name = attr->name;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	61fb      	str	r3, [r7, #28]
 8008da8:	e001      	b.n	8008dae <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8008daa:	2300      	movs	r3, #0
 8008dac:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008dae:	69f9      	ldr	r1, [r7, #28]
 8008db0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008db2:	f000 ff0b 	bl	8009bcc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3728      	adds	r7, #40	; 0x28
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	20000158 	.word	0x20000158

08008dc4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b08a      	sub	sp, #40	; 0x28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	603b      	str	r3, [r7, #0]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ddc:	f3ef 8305 	mrs	r3, IPSR
 8008de0:	61fb      	str	r3, [r7, #28]
  return(result);
 8008de2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10f      	bne.n	8008e08 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008de8:	f3ef 8310 	mrs	r3, PRIMASK
 8008dec:	61bb      	str	r3, [r7, #24]
  return(result);
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d105      	bne.n	8008e00 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008df4:	f3ef 8311 	mrs	r3, BASEPRI
 8008df8:	617b      	str	r3, [r7, #20]
  return(result);
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d02c      	beq.n	8008e5a <osMessageQueuePut+0x96>
 8008e00:	4b28      	ldr	r3, [pc, #160]	; (8008ea4 <osMessageQueuePut+0xe0>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d128      	bne.n	8008e5a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e08:	6a3b      	ldr	r3, [r7, #32]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d005      	beq.n	8008e1a <osMessageQueuePut+0x56>
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d002      	beq.n	8008e1a <osMessageQueuePut+0x56>
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8008e1a:	f06f 0303 	mvn.w	r3, #3
 8008e1e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e20:	e039      	b.n	8008e96 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8008e22:	2300      	movs	r3, #0
 8008e24:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008e26:	f107 0210 	add.w	r2, r7, #16
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	68b9      	ldr	r1, [r7, #8]
 8008e2e:	6a38      	ldr	r0, [r7, #32]
 8008e30:	f000 fbce 	bl	80095d0 <xQueueGenericSendFromISR>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d003      	beq.n	8008e42 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8008e3a:	f06f 0302 	mvn.w	r3, #2
 8008e3e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e40:	e029      	b.n	8008e96 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d026      	beq.n	8008e96 <osMessageQueuePut+0xd2>
 8008e48:	4b17      	ldr	r3, [pc, #92]	; (8008ea8 <osMessageQueuePut+0xe4>)
 8008e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e4e:	601a      	str	r2, [r3, #0]
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e58:	e01d      	b.n	8008e96 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d002      	beq.n	8008e66 <osMessageQueuePut+0xa2>
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d103      	bne.n	8008e6e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8008e66:	f06f 0303 	mvn.w	r3, #3
 8008e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e6c:	e014      	b.n	8008e98 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008e6e:	2300      	movs	r3, #0
 8008e70:	683a      	ldr	r2, [r7, #0]
 8008e72:	68b9      	ldr	r1, [r7, #8]
 8008e74:	6a38      	ldr	r0, [r7, #32]
 8008e76:	f000 fab1 	bl	80093dc <xQueueGenericSend>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d00b      	beq.n	8008e98 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8008e86:	f06f 0301 	mvn.w	r3, #1
 8008e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e8c:	e004      	b.n	8008e98 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8008e8e:	f06f 0302 	mvn.w	r3, #2
 8008e92:	627b      	str	r3, [r7, #36]	; 0x24
 8008e94:	e000      	b.n	8008e98 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e96:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3728      	adds	r7, #40	; 0x28
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	20000158 	.word	0x20000158
 8008ea8:	e000ed04 	.word	0xe000ed04

08008eac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08a      	sub	sp, #40	; 0x28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ec2:	f3ef 8305 	mrs	r3, IPSR
 8008ec6:	61fb      	str	r3, [r7, #28]
  return(result);
 8008ec8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10f      	bne.n	8008eee <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ece:	f3ef 8310 	mrs	r3, PRIMASK
 8008ed2:	61bb      	str	r3, [r7, #24]
  return(result);
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d105      	bne.n	8008ee6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008eda:	f3ef 8311 	mrs	r3, BASEPRI
 8008ede:	617b      	str	r3, [r7, #20]
  return(result);
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d02c      	beq.n	8008f40 <osMessageQueueGet+0x94>
 8008ee6:	4b28      	ldr	r3, [pc, #160]	; (8008f88 <osMessageQueueGet+0xdc>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d128      	bne.n	8008f40 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008eee:	6a3b      	ldr	r3, [r7, #32]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d005      	beq.n	8008f00 <osMessageQueueGet+0x54>
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d002      	beq.n	8008f00 <osMessageQueueGet+0x54>
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d003      	beq.n	8008f08 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8008f00:	f06f 0303 	mvn.w	r3, #3
 8008f04:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008f06:	e038      	b.n	8008f7a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008f0c:	f107 0310 	add.w	r3, r7, #16
 8008f10:	461a      	mov	r2, r3
 8008f12:	68b9      	ldr	r1, [r7, #8]
 8008f14:	6a38      	ldr	r0, [r7, #32]
 8008f16:	f000 fccb 	bl	80098b0 <xQueueReceiveFromISR>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d003      	beq.n	8008f28 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8008f20:	f06f 0302 	mvn.w	r3, #2
 8008f24:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008f26:	e028      	b.n	8008f7a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d025      	beq.n	8008f7a <osMessageQueueGet+0xce>
 8008f2e:	4b17      	ldr	r3, [pc, #92]	; (8008f8c <osMessageQueueGet+0xe0>)
 8008f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f34:	601a      	str	r2, [r3, #0]
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008f3e:	e01c      	b.n	8008f7a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d002      	beq.n	8008f4c <osMessageQueueGet+0xa0>
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d103      	bne.n	8008f54 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8008f4c:	f06f 0303 	mvn.w	r3, #3
 8008f50:	627b      	str	r3, [r7, #36]	; 0x24
 8008f52:	e013      	b.n	8008f7c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008f54:	683a      	ldr	r2, [r7, #0]
 8008f56:	68b9      	ldr	r1, [r7, #8]
 8008f58:	6a38      	ldr	r0, [r7, #32]
 8008f5a:	f000 fbcd 	bl	80096f8 <xQueueReceive>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d00b      	beq.n	8008f7c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d003      	beq.n	8008f72 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8008f6a:	f06f 0301 	mvn.w	r3, #1
 8008f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f70:	e004      	b.n	8008f7c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8008f72:	f06f 0302 	mvn.w	r3, #2
 8008f76:	627b      	str	r3, [r7, #36]	; 0x24
 8008f78:	e000      	b.n	8008f7c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008f7a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3728      	adds	r7, #40	; 0x28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20000158 	.word	0x20000158
 8008f8c:	e000ed04 	.word	0xe000ed04

08008f90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	4a07      	ldr	r2, [pc, #28]	; (8008fbc <vApplicationGetIdleTaskMemory+0x2c>)
 8008fa0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	4a06      	ldr	r2, [pc, #24]	; (8008fc0 <vApplicationGetIdleTaskMemory+0x30>)
 8008fa6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2280      	movs	r2, #128	; 0x80
 8008fac:	601a      	str	r2, [r3, #0]
}
 8008fae:	bf00      	nop
 8008fb0:	3714      	adds	r7, #20
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	2000015c 	.word	0x2000015c
 8008fc0:	200001b8 	.word	0x200001b8

08008fc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	4a07      	ldr	r2, [pc, #28]	; (8008ff0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008fd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	4a06      	ldr	r2, [pc, #24]	; (8008ff4 <vApplicationGetTimerTaskMemory+0x30>)
 8008fda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008fe2:	601a      	str	r2, [r3, #0]
}
 8008fe4:	bf00      	nop
 8008fe6:	3714      	adds	r7, #20
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr
 8008ff0:	200003b8 	.word	0x200003b8
 8008ff4:	20000414 	.word	0x20000414

08008ff8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f103 0208 	add.w	r2, r3, #8
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f04f 32ff 	mov.w	r2, #4294967295
 8009010:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f103 0208 	add.w	r2, r3, #8
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f103 0208 	add.w	r2, r3, #8
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009046:	bf00      	nop
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009052:	b480      	push	{r7}
 8009054:	b085      	sub	sp, #20
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	689a      	ldr	r2, [r3, #8]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	1c5a      	adds	r2, r3, #1
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	601a      	str	r2, [r3, #0]
}
 800908e:	bf00      	nop
 8009090:	3714      	adds	r7, #20
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800909a:	b480      	push	{r7}
 800909c:	b085      	sub	sp, #20
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b0:	d103      	bne.n	80090ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	e00c      	b.n	80090d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	3308      	adds	r3, #8
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	e002      	b.n	80090c8 <vListInsert+0x2e>
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	60fb      	str	r3, [r7, #12]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d2f6      	bcs.n	80090c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	685a      	ldr	r2, [r3, #4]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	683a      	ldr	r2, [r7, #0]
 80090ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	601a      	str	r2, [r3, #0]
}
 8009100:	bf00      	nop
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	6892      	ldr	r2, [r2, #8]
 8009122:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	6852      	ldr	r2, [r2, #4]
 800912c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	429a      	cmp	r2, r3
 8009136:	d103      	bne.n	8009140 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	689a      	ldr	r2, [r3, #8]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	1e5a      	subs	r2, r3, #1
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
}
 8009154:	4618      	mov	r0, r3
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d109      	bne.n	8009188 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	60bb      	str	r3, [r7, #8]
 8009186:	e7fe      	b.n	8009186 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009188:	f002 fa10 	bl	800b5ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009194:	68f9      	ldr	r1, [r7, #12]
 8009196:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009198:	fb01 f303 	mul.w	r3, r1, r3
 800919c:	441a      	add	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b8:	3b01      	subs	r3, #1
 80091ba:	68f9      	ldr	r1, [r7, #12]
 80091bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80091be:	fb01 f303 	mul.w	r3, r1, r3
 80091c2:	441a      	add	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	22ff      	movs	r2, #255	; 0xff
 80091cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	22ff      	movs	r2, #255	; 0xff
 80091d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d114      	bne.n	8009208 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d01a      	beq.n	800921c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	3310      	adds	r3, #16
 80091ea:	4618      	mov	r0, r3
 80091ec:	f001 fa86 	bl	800a6fc <xTaskRemoveFromEventList>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d012      	beq.n	800921c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80091f6:	4b0d      	ldr	r3, [pc, #52]	; (800922c <xQueueGenericReset+0xcc>)
 80091f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	e009      	b.n	800921c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	3310      	adds	r3, #16
 800920c:	4618      	mov	r0, r3
 800920e:	f7ff fef3 	bl	8008ff8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3324      	adds	r3, #36	; 0x24
 8009216:	4618      	mov	r0, r3
 8009218:	f7ff feee 	bl	8008ff8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800921c:	f002 f9f4 	bl	800b608 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009220:	2301      	movs	r3, #1
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	e000ed04 	.word	0xe000ed04

08009230 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009230:	b580      	push	{r7, lr}
 8009232:	b08e      	sub	sp, #56	; 0x38
 8009234:	af02      	add	r7, sp, #8
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
 800923c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d109      	bne.n	8009258 <xQueueGenericCreateStatic+0x28>
 8009244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	62bb      	str	r3, [r7, #40]	; 0x28
 8009256:	e7fe      	b.n	8009256 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d109      	bne.n	8009272 <xQueueGenericCreateStatic+0x42>
 800925e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009262:	f383 8811 	msr	BASEPRI, r3
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	627b      	str	r3, [r7, #36]	; 0x24
 8009270:	e7fe      	b.n	8009270 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d002      	beq.n	800927e <xQueueGenericCreateStatic+0x4e>
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d001      	beq.n	8009282 <xQueueGenericCreateStatic+0x52>
 800927e:	2301      	movs	r3, #1
 8009280:	e000      	b.n	8009284 <xQueueGenericCreateStatic+0x54>
 8009282:	2300      	movs	r3, #0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d109      	bne.n	800929c <xQueueGenericCreateStatic+0x6c>
 8009288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	623b      	str	r3, [r7, #32]
 800929a:	e7fe      	b.n	800929a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d102      	bne.n	80092a8 <xQueueGenericCreateStatic+0x78>
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d101      	bne.n	80092ac <xQueueGenericCreateStatic+0x7c>
 80092a8:	2301      	movs	r3, #1
 80092aa:	e000      	b.n	80092ae <xQueueGenericCreateStatic+0x7e>
 80092ac:	2300      	movs	r3, #0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d109      	bne.n	80092c6 <xQueueGenericCreateStatic+0x96>
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	61fb      	str	r3, [r7, #28]
 80092c4:	e7fe      	b.n	80092c4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80092c6:	2350      	movs	r3, #80	; 0x50
 80092c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2b50      	cmp	r3, #80	; 0x50
 80092ce:	d009      	beq.n	80092e4 <xQueueGenericCreateStatic+0xb4>
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	61bb      	str	r3, [r7, #24]
 80092e2:	e7fe      	b.n	80092e2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80092e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80092ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00d      	beq.n	800930c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80092f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092f8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80092fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	4613      	mov	r3, r2
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	68b9      	ldr	r1, [r7, #8]
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f000 f844 	bl	8009394 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800930c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800930e:	4618      	mov	r0, r3
 8009310:	3730      	adds	r7, #48	; 0x30
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009316:	b580      	push	{r7, lr}
 8009318:	b08a      	sub	sp, #40	; 0x28
 800931a:	af02      	add	r7, sp, #8
 800931c:	60f8      	str	r0, [r7, #12]
 800931e:	60b9      	str	r1, [r7, #8]
 8009320:	4613      	mov	r3, r2
 8009322:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d109      	bne.n	800933e <xQueueGenericCreate+0x28>
 800932a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	613b      	str	r3, [r7, #16]
 800933c:	e7fe      	b.n	800933c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d102      	bne.n	800934a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009344:	2300      	movs	r3, #0
 8009346:	61fb      	str	r3, [r7, #28]
 8009348:	e004      	b.n	8009354 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	fb02 f303 	mul.w	r3, r2, r3
 8009352:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	3350      	adds	r3, #80	; 0x50
 8009358:	4618      	mov	r0, r3
 800935a:	f002 fb25 	bl	800b9a8 <pvPortMalloc>
 800935e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d011      	beq.n	800938a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	3350      	adds	r3, #80	; 0x50
 800936e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009378:	79fa      	ldrb	r2, [r7, #7]
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	4613      	mov	r3, r2
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	68b9      	ldr	r1, [r7, #8]
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f000 f805 	bl	8009394 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800938a:	69bb      	ldr	r3, [r7, #24]
	}
 800938c:	4618      	mov	r0, r3
 800938e:	3720      	adds	r7, #32
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
 80093a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d103      	bne.n	80093b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	69ba      	ldr	r2, [r7, #24]
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	e002      	b.n	80093b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80093c2:	2101      	movs	r1, #1
 80093c4:	69b8      	ldr	r0, [r7, #24]
 80093c6:	f7ff fecb 	bl	8009160 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	78fa      	ldrb	r2, [r7, #3]
 80093ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80093d2:	bf00      	nop
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
	...

080093dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b08e      	sub	sp, #56	; 0x38
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
 80093e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80093ea:	2300      	movs	r3, #0
 80093ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80093f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d109      	bne.n	800940c <xQueueGenericSend+0x30>
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	62bb      	str	r3, [r7, #40]	; 0x28
 800940a:	e7fe      	b.n	800940a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d103      	bne.n	800941a <xQueueGenericSend+0x3e>
 8009412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009416:	2b00      	cmp	r3, #0
 8009418:	d101      	bne.n	800941e <xQueueGenericSend+0x42>
 800941a:	2301      	movs	r3, #1
 800941c:	e000      	b.n	8009420 <xQueueGenericSend+0x44>
 800941e:	2300      	movs	r3, #0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d109      	bne.n	8009438 <xQueueGenericSend+0x5c>
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	627b      	str	r3, [r7, #36]	; 0x24
 8009436:	e7fe      	b.n	8009436 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	2b02      	cmp	r3, #2
 800943c:	d103      	bne.n	8009446 <xQueueGenericSend+0x6a>
 800943e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009442:	2b01      	cmp	r3, #1
 8009444:	d101      	bne.n	800944a <xQueueGenericSend+0x6e>
 8009446:	2301      	movs	r3, #1
 8009448:	e000      	b.n	800944c <xQueueGenericSend+0x70>
 800944a:	2300      	movs	r3, #0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d109      	bne.n	8009464 <xQueueGenericSend+0x88>
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	623b      	str	r3, [r7, #32]
 8009462:	e7fe      	b.n	8009462 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009464:	f001 fb56 	bl	800ab14 <xTaskGetSchedulerState>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d102      	bne.n	8009474 <xQueueGenericSend+0x98>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d101      	bne.n	8009478 <xQueueGenericSend+0x9c>
 8009474:	2301      	movs	r3, #1
 8009476:	e000      	b.n	800947a <xQueueGenericSend+0x9e>
 8009478:	2300      	movs	r3, #0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d109      	bne.n	8009492 <xQueueGenericSend+0xb6>
 800947e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	61fb      	str	r3, [r7, #28]
 8009490:	e7fe      	b.n	8009490 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009492:	f002 f88b 	bl	800b5ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800949a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949e:	429a      	cmp	r2, r3
 80094a0:	d302      	bcc.n	80094a8 <xQueueGenericSend+0xcc>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d129      	bne.n	80094fc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	68b9      	ldr	r1, [r7, #8]
 80094ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094ae:	f000 fa7c 	bl	80099aa <prvCopyDataToQueue>
 80094b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d010      	beq.n	80094de <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094be:	3324      	adds	r3, #36	; 0x24
 80094c0:	4618      	mov	r0, r3
 80094c2:	f001 f91b 	bl	800a6fc <xTaskRemoveFromEventList>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d013      	beq.n	80094f4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80094cc:	4b3f      	ldr	r3, [pc, #252]	; (80095cc <xQueueGenericSend+0x1f0>)
 80094ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	e00a      	b.n	80094f4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80094de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d007      	beq.n	80094f4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80094e4:	4b39      	ldr	r3, [pc, #228]	; (80095cc <xQueueGenericSend+0x1f0>)
 80094e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ea:	601a      	str	r2, [r3, #0]
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80094f4:	f002 f888 	bl	800b608 <vPortExitCritical>
				return pdPASS;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e063      	b.n	80095c4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d103      	bne.n	800950a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009502:	f002 f881 	bl	800b608 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009506:	2300      	movs	r3, #0
 8009508:	e05c      	b.n	80095c4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800950a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800950c:	2b00      	cmp	r3, #0
 800950e:	d106      	bne.n	800951e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009510:	f107 0314 	add.w	r3, r7, #20
 8009514:	4618      	mov	r0, r3
 8009516:	f001 f955 	bl	800a7c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800951a:	2301      	movs	r3, #1
 800951c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800951e:	f002 f873 	bl	800b608 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009522:	f000 fe5f 	bl	800a1e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009526:	f002 f841 	bl	800b5ac <vPortEnterCritical>
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009530:	b25b      	sxtb	r3, r3
 8009532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009536:	d103      	bne.n	8009540 <xQueueGenericSend+0x164>
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009546:	b25b      	sxtb	r3, r3
 8009548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800954c:	d103      	bne.n	8009556 <xQueueGenericSend+0x17a>
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009556:	f002 f857 	bl	800b608 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800955a:	1d3a      	adds	r2, r7, #4
 800955c:	f107 0314 	add.w	r3, r7, #20
 8009560:	4611      	mov	r1, r2
 8009562:	4618      	mov	r0, r3
 8009564:	f001 f944 	bl	800a7f0 <xTaskCheckForTimeOut>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d124      	bne.n	80095b8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800956e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009570:	f000 fb13 	bl	8009b9a <prvIsQueueFull>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d018      	beq.n	80095ac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800957a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957c:	3310      	adds	r3, #16
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	4611      	mov	r1, r2
 8009582:	4618      	mov	r0, r3
 8009584:	f001 f86c 	bl	800a660 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800958a:	f000 fa9e 	bl	8009aca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800958e:	f000 fe6f 	bl	800a270 <xTaskResumeAll>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	f47f af7c 	bne.w	8009492 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800959a:	4b0c      	ldr	r3, [pc, #48]	; (80095cc <xQueueGenericSend+0x1f0>)
 800959c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095a0:	601a      	str	r2, [r3, #0]
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	e772      	b.n	8009492 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80095ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095ae:	f000 fa8c 	bl	8009aca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095b2:	f000 fe5d 	bl	800a270 <xTaskResumeAll>
 80095b6:	e76c      	b.n	8009492 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80095b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095ba:	f000 fa86 	bl	8009aca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80095be:	f000 fe57 	bl	800a270 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80095c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3738      	adds	r7, #56	; 0x38
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	e000ed04 	.word	0xe000ed04

080095d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08e      	sub	sp, #56	; 0x38
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	607a      	str	r2, [r7, #4]
 80095dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80095e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d109      	bne.n	80095fc <xQueueGenericSendFromISR+0x2c>
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	627b      	str	r3, [r7, #36]	; 0x24
 80095fa:	e7fe      	b.n	80095fa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d103      	bne.n	800960a <xQueueGenericSendFromISR+0x3a>
 8009602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009606:	2b00      	cmp	r3, #0
 8009608:	d101      	bne.n	800960e <xQueueGenericSendFromISR+0x3e>
 800960a:	2301      	movs	r3, #1
 800960c:	e000      	b.n	8009610 <xQueueGenericSendFromISR+0x40>
 800960e:	2300      	movs	r3, #0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d109      	bne.n	8009628 <xQueueGenericSendFromISR+0x58>
 8009614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009618:	f383 8811 	msr	BASEPRI, r3
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	623b      	str	r3, [r7, #32]
 8009626:	e7fe      	b.n	8009626 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	2b02      	cmp	r3, #2
 800962c:	d103      	bne.n	8009636 <xQueueGenericSendFromISR+0x66>
 800962e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009632:	2b01      	cmp	r3, #1
 8009634:	d101      	bne.n	800963a <xQueueGenericSendFromISR+0x6a>
 8009636:	2301      	movs	r3, #1
 8009638:	e000      	b.n	800963c <xQueueGenericSendFromISR+0x6c>
 800963a:	2300      	movs	r3, #0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d109      	bne.n	8009654 <xQueueGenericSendFromISR+0x84>
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	61fb      	str	r3, [r7, #28]
 8009652:	e7fe      	b.n	8009652 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009654:	f002 f96a 	bl	800b92c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009658:	f3ef 8211 	mrs	r2, BASEPRI
 800965c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009660:	f383 8811 	msr	BASEPRI, r3
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	61ba      	str	r2, [r7, #24]
 800966e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009670:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009672:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800967c:	429a      	cmp	r2, r3
 800967e:	d302      	bcc.n	8009686 <xQueueGenericSendFromISR+0xb6>
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2b02      	cmp	r3, #2
 8009684:	d12c      	bne.n	80096e0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800968c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009690:	683a      	ldr	r2, [r7, #0]
 8009692:	68b9      	ldr	r1, [r7, #8]
 8009694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009696:	f000 f988 	bl	80099aa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800969a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800969e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a2:	d112      	bne.n	80096ca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d016      	beq.n	80096da <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ae:	3324      	adds	r3, #36	; 0x24
 80096b0:	4618      	mov	r0, r3
 80096b2:	f001 f823 	bl	800a6fc <xTaskRemoveFromEventList>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00e      	beq.n	80096da <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00b      	beq.n	80096da <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2201      	movs	r2, #1
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	e007      	b.n	80096da <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80096ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80096ce:	3301      	adds	r3, #1
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	b25a      	sxtb	r2, r3
 80096d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80096da:	2301      	movs	r3, #1
 80096dc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80096de:	e001      	b.n	80096e4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80096e0:	2300      	movs	r3, #0
 80096e2:	637b      	str	r3, [r7, #52]	; 0x34
 80096e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3738      	adds	r7, #56	; 0x38
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b08c      	sub	sp, #48	; 0x30
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009704:	2300      	movs	r3, #0
 8009706:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800970c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970e:	2b00      	cmp	r3, #0
 8009710:	d109      	bne.n	8009726 <xQueueReceive+0x2e>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	623b      	str	r3, [r7, #32]
 8009724:	e7fe      	b.n	8009724 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d103      	bne.n	8009734 <xQueueReceive+0x3c>
 800972c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <xQueueReceive+0x40>
 8009734:	2301      	movs	r3, #1
 8009736:	e000      	b.n	800973a <xQueueReceive+0x42>
 8009738:	2300      	movs	r3, #0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d109      	bne.n	8009752 <xQueueReceive+0x5a>
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	61fb      	str	r3, [r7, #28]
 8009750:	e7fe      	b.n	8009750 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009752:	f001 f9df 	bl	800ab14 <xTaskGetSchedulerState>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d102      	bne.n	8009762 <xQueueReceive+0x6a>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <xQueueReceive+0x6e>
 8009762:	2301      	movs	r3, #1
 8009764:	e000      	b.n	8009768 <xQueueReceive+0x70>
 8009766:	2300      	movs	r3, #0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d109      	bne.n	8009780 <xQueueReceive+0x88>
 800976c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009770:	f383 8811 	msr	BASEPRI, r3
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	61bb      	str	r3, [r7, #24]
 800977e:	e7fe      	b.n	800977e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009780:	f001 ff14 	bl	800b5ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009788:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978c:	2b00      	cmp	r3, #0
 800978e:	d01f      	beq.n	80097d0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009790:	68b9      	ldr	r1, [r7, #8]
 8009792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009794:	f000 f973 	bl	8009a7e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979a:	1e5a      	subs	r2, r3, #1
 800979c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00f      	beq.n	80097c8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097aa:	3310      	adds	r3, #16
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 ffa5 	bl	800a6fc <xTaskRemoveFromEventList>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d007      	beq.n	80097c8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80097b8:	4b3c      	ldr	r3, [pc, #240]	; (80098ac <xQueueReceive+0x1b4>)
 80097ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80097c8:	f001 ff1e 	bl	800b608 <vPortExitCritical>
				return pdPASS;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e069      	b.n	80098a4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d103      	bne.n	80097de <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097d6:	f001 ff17 	bl	800b608 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80097da:	2300      	movs	r3, #0
 80097dc:	e062      	b.n	80098a4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d106      	bne.n	80097f2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097e4:	f107 0310 	add.w	r3, r7, #16
 80097e8:	4618      	mov	r0, r3
 80097ea:	f000 ffeb 	bl	800a7c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097ee:	2301      	movs	r3, #1
 80097f0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097f2:	f001 ff09 	bl	800b608 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097f6:	f000 fcf5 	bl	800a1e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097fa:	f001 fed7 	bl	800b5ac <vPortEnterCritical>
 80097fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009804:	b25b      	sxtb	r3, r3
 8009806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800980a:	d103      	bne.n	8009814 <xQueueReceive+0x11c>
 800980c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980e:	2200      	movs	r2, #0
 8009810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800981a:	b25b      	sxtb	r3, r3
 800981c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009820:	d103      	bne.n	800982a <xQueueReceive+0x132>
 8009822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009824:	2200      	movs	r2, #0
 8009826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800982a:	f001 feed 	bl	800b608 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800982e:	1d3a      	adds	r2, r7, #4
 8009830:	f107 0310 	add.w	r3, r7, #16
 8009834:	4611      	mov	r1, r2
 8009836:	4618      	mov	r0, r3
 8009838:	f000 ffda 	bl	800a7f0 <xTaskCheckForTimeOut>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d123      	bne.n	800988a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009844:	f000 f993 	bl	8009b6e <prvIsQueueEmpty>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d017      	beq.n	800987e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800984e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009850:	3324      	adds	r3, #36	; 0x24
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	4611      	mov	r1, r2
 8009856:	4618      	mov	r0, r3
 8009858:	f000 ff02 	bl	800a660 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800985c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800985e:	f000 f934 	bl	8009aca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009862:	f000 fd05 	bl	800a270 <xTaskResumeAll>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d189      	bne.n	8009780 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800986c:	4b0f      	ldr	r3, [pc, #60]	; (80098ac <xQueueReceive+0x1b4>)
 800986e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	e780      	b.n	8009780 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800987e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009880:	f000 f923 	bl	8009aca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009884:	f000 fcf4 	bl	800a270 <xTaskResumeAll>
 8009888:	e77a      	b.n	8009780 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800988a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800988c:	f000 f91d 	bl	8009aca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009890:	f000 fcee 	bl	800a270 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009896:	f000 f96a 	bl	8009b6e <prvIsQueueEmpty>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	f43f af6f 	beq.w	8009780 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80098a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3730      	adds	r7, #48	; 0x30
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	e000ed04 	.word	0xe000ed04

080098b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b08e      	sub	sp, #56	; 0x38
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80098c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d109      	bne.n	80098da <xQueueReceiveFromISR+0x2a>
 80098c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ca:	f383 8811 	msr	BASEPRI, r3
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	623b      	str	r3, [r7, #32]
 80098d8:	e7fe      	b.n	80098d8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d103      	bne.n	80098e8 <xQueueReceiveFromISR+0x38>
 80098e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d101      	bne.n	80098ec <xQueueReceiveFromISR+0x3c>
 80098e8:	2301      	movs	r3, #1
 80098ea:	e000      	b.n	80098ee <xQueueReceiveFromISR+0x3e>
 80098ec:	2300      	movs	r3, #0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d109      	bne.n	8009906 <xQueueReceiveFromISR+0x56>
 80098f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f6:	f383 8811 	msr	BASEPRI, r3
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	61fb      	str	r3, [r7, #28]
 8009904:	e7fe      	b.n	8009904 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009906:	f002 f811 	bl	800b92c <vPortValidateInterruptPriority>
	__asm volatile
 800990a:	f3ef 8211 	mrs	r2, BASEPRI
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	61ba      	str	r2, [r7, #24]
 8009920:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009922:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009924:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800992c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992e:	2b00      	cmp	r3, #0
 8009930:	d02f      	beq.n	8009992 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009934:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800993c:	68b9      	ldr	r1, [r7, #8]
 800993e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009940:	f000 f89d 	bl	8009a7e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009946:	1e5a      	subs	r2, r3, #1
 8009948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800994c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009954:	d112      	bne.n	800997c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d016      	beq.n	800998c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800995e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009960:	3310      	adds	r3, #16
 8009962:	4618      	mov	r0, r3
 8009964:	f000 feca 	bl	800a6fc <xTaskRemoveFromEventList>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00e      	beq.n	800998c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00b      	beq.n	800998c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	601a      	str	r2, [r3, #0]
 800997a:	e007      	b.n	800998c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800997c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009980:	3301      	adds	r3, #1
 8009982:	b2db      	uxtb	r3, r3
 8009984:	b25a      	sxtb	r2, r3
 8009986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800998c:	2301      	movs	r3, #1
 800998e:	637b      	str	r3, [r7, #52]	; 0x34
 8009990:	e001      	b.n	8009996 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8009992:	2300      	movs	r3, #0
 8009994:	637b      	str	r3, [r7, #52]	; 0x34
 8009996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009998:	613b      	str	r3, [r7, #16]
	__asm volatile
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3738      	adds	r7, #56	; 0x38
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b086      	sub	sp, #24
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	60f8      	str	r0, [r7, #12]
 80099b2:	60b9      	str	r1, [r7, #8]
 80099b4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099b6:	2300      	movs	r3, #0
 80099b8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099be:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10d      	bne.n	80099e4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d14d      	bne.n	8009a6c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f001 f8bb 	bl	800ab50 <xTaskPriorityDisinherit>
 80099da:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	609a      	str	r2, [r3, #8]
 80099e2:	e043      	b.n	8009a6c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d119      	bne.n	8009a1e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6858      	ldr	r0, [r3, #4]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f2:	461a      	mov	r2, r3
 80099f4:	68b9      	ldr	r1, [r7, #8]
 80099f6:	f002 fce9 	bl	800c3cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	685a      	ldr	r2, [r3, #4]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a02:	441a      	add	r2, r3
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d32b      	bcc.n	8009a6c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	605a      	str	r2, [r3, #4]
 8009a1c:	e026      	b.n	8009a6c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	68d8      	ldr	r0, [r3, #12]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a26:	461a      	mov	r2, r3
 8009a28:	68b9      	ldr	r1, [r7, #8]
 8009a2a:	f002 fccf 	bl	800c3cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	68da      	ldr	r2, [r3, #12]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a36:	425b      	negs	r3, r3
 8009a38:	441a      	add	r2, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	68da      	ldr	r2, [r3, #12]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d207      	bcs.n	8009a5a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	689a      	ldr	r2, [r3, #8]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a52:	425b      	negs	r3, r3
 8009a54:	441a      	add	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d105      	bne.n	8009a6c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d002      	beq.n	8009a6c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	1c5a      	adds	r2, r3, #1
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009a74:	697b      	ldr	r3, [r7, #20]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3718      	adds	r7, #24
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b082      	sub	sp, #8
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d018      	beq.n	8009ac2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	68da      	ldr	r2, [r3, #12]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a98:	441a      	add	r2, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	68da      	ldr	r2, [r3, #12]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d303      	bcc.n	8009ab2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	68d9      	ldr	r1, [r3, #12]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aba:	461a      	mov	r2, r3
 8009abc:	6838      	ldr	r0, [r7, #0]
 8009abe:	f002 fc85 	bl	800c3cc <memcpy>
	}
}
 8009ac2:	bf00      	nop
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b084      	sub	sp, #16
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ad2:	f001 fd6b 	bl	800b5ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009adc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ade:	e011      	b.n	8009b04 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d012      	beq.n	8009b0e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	3324      	adds	r3, #36	; 0x24
 8009aec:	4618      	mov	r0, r3
 8009aee:	f000 fe05 	bl	800a6fc <xTaskRemoveFromEventList>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d001      	beq.n	8009afc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009af8:	f000 feda 	bl	800a8b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
 8009afe:	3b01      	subs	r3, #1
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	dce9      	bgt.n	8009ae0 <prvUnlockQueue+0x16>
 8009b0c:	e000      	b.n	8009b10 <prvUnlockQueue+0x46>
					break;
 8009b0e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	22ff      	movs	r2, #255	; 0xff
 8009b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009b18:	f001 fd76 	bl	800b608 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b1c:	f001 fd46 	bl	800b5ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b26:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b28:	e011      	b.n	8009b4e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d012      	beq.n	8009b58 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	3310      	adds	r3, #16
 8009b36:	4618      	mov	r0, r3
 8009b38:	f000 fde0 	bl	800a6fc <xTaskRemoveFromEventList>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b42:	f000 feb5 	bl	800a8b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b46:	7bbb      	ldrb	r3, [r7, #14]
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	dce9      	bgt.n	8009b2a <prvUnlockQueue+0x60>
 8009b56:	e000      	b.n	8009b5a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b58:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	22ff      	movs	r2, #255	; 0xff
 8009b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009b62:	f001 fd51 	bl	800b608 <vPortExitCritical>
}
 8009b66:	bf00      	nop
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b084      	sub	sp, #16
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b76:	f001 fd19 	bl	800b5ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d102      	bne.n	8009b88 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b82:	2301      	movs	r3, #1
 8009b84:	60fb      	str	r3, [r7, #12]
 8009b86:	e001      	b.n	8009b8c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b8c:	f001 fd3c 	bl	800b608 <vPortExitCritical>

	return xReturn;
 8009b90:	68fb      	ldr	r3, [r7, #12]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b084      	sub	sp, #16
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ba2:	f001 fd03 	bl	800b5ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d102      	bne.n	8009bb8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	60fb      	str	r3, [r7, #12]
 8009bb6:	e001      	b.n	8009bbc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bbc:	f001 fd24 	bl	800b608 <vPortExitCritical>

	return xReturn;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
	...

08009bcc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	60fb      	str	r3, [r7, #12]
 8009bda:	e014      	b.n	8009c06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009bdc:	4a0e      	ldr	r2, [pc, #56]	; (8009c18 <vQueueAddToRegistry+0x4c>)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10b      	bne.n	8009c00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009be8:	490b      	ldr	r1, [pc, #44]	; (8009c18 <vQueueAddToRegistry+0x4c>)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	683a      	ldr	r2, [r7, #0]
 8009bee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009bf2:	4a09      	ldr	r2, [pc, #36]	; (8009c18 <vQueueAddToRegistry+0x4c>)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	00db      	lsls	r3, r3, #3
 8009bf8:	4413      	add	r3, r2
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009bfe:	e005      	b.n	8009c0c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	3301      	adds	r3, #1
 8009c04:	60fb      	str	r3, [r7, #12]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2b07      	cmp	r3, #7
 8009c0a:	d9e7      	bls.n	8009bdc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c0c:	bf00      	nop
 8009c0e:	3714      	adds	r7, #20
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr
 8009c18:	20004cb4 	.word	0x20004cb4

08009c1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b086      	sub	sp, #24
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c2c:	f001 fcbe 	bl	800b5ac <vPortEnterCritical>
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c36:	b25b      	sxtb	r3, r3
 8009c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c3c:	d103      	bne.n	8009c46 <vQueueWaitForMessageRestricted+0x2a>
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c4c:	b25b      	sxtb	r3, r3
 8009c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c52:	d103      	bne.n	8009c5c <vQueueWaitForMessageRestricted+0x40>
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c5c:	f001 fcd4 	bl	800b608 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d106      	bne.n	8009c76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	3324      	adds	r3, #36	; 0x24
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	68b9      	ldr	r1, [r7, #8]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 fd19 	bl	800a6a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c76:	6978      	ldr	r0, [r7, #20]
 8009c78:	f7ff ff27 	bl	8009aca <prvUnlockQueue>
	}
 8009c7c:	bf00      	nop
 8009c7e:	3718      	adds	r7, #24
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b08e      	sub	sp, #56	; 0x38
 8009c88:	af04      	add	r7, sp, #16
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
 8009c90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d109      	bne.n	8009cac <xTaskCreateStatic+0x28>
	__asm volatile
 8009c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9c:	f383 8811 	msr	BASEPRI, r3
 8009ca0:	f3bf 8f6f 	isb	sy
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	623b      	str	r3, [r7, #32]
 8009caa:	e7fe      	b.n	8009caa <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d109      	bne.n	8009cc6 <xTaskCreateStatic+0x42>
 8009cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb6:	f383 8811 	msr	BASEPRI, r3
 8009cba:	f3bf 8f6f 	isb	sy
 8009cbe:	f3bf 8f4f 	dsb	sy
 8009cc2:	61fb      	str	r3, [r7, #28]
 8009cc4:	e7fe      	b.n	8009cc4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009cc6:	235c      	movs	r3, #92	; 0x5c
 8009cc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	2b5c      	cmp	r3, #92	; 0x5c
 8009cce:	d009      	beq.n	8009ce4 <xTaskCreateStatic+0x60>
 8009cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	61bb      	str	r3, [r7, #24]
 8009ce2:	e7fe      	b.n	8009ce2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ce4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d01e      	beq.n	8009d2a <xTaskCreateStatic+0xa6>
 8009cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d01b      	beq.n	8009d2a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cfa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfe:	2202      	movs	r2, #2
 8009d00:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d04:	2300      	movs	r3, #0
 8009d06:	9303      	str	r3, [sp, #12]
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	9302      	str	r3, [sp, #8]
 8009d0c:	f107 0314 	add.w	r3, r7, #20
 8009d10:	9301      	str	r3, [sp, #4]
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	68b9      	ldr	r1, [r7, #8]
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f000 f850 	bl	8009dc2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d24:	f000 f8dc 	bl	8009ee0 <prvAddNewTaskToReadyList>
 8009d28:	e001      	b.n	8009d2e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d2e:	697b      	ldr	r3, [r7, #20]
	}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3728      	adds	r7, #40	; 0x28
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b08c      	sub	sp, #48	; 0x30
 8009d3c:	af04      	add	r7, sp, #16
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	603b      	str	r3, [r7, #0]
 8009d44:	4613      	mov	r3, r2
 8009d46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d48:	88fb      	ldrh	r3, [r7, #6]
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f001 fe2b 	bl	800b9a8 <pvPortMalloc>
 8009d52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00e      	beq.n	8009d78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d5a:	205c      	movs	r0, #92	; 0x5c
 8009d5c:	f001 fe24 	bl	800b9a8 <pvPortMalloc>
 8009d60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d003      	beq.n	8009d70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	697a      	ldr	r2, [r7, #20]
 8009d6c:	631a      	str	r2, [r3, #48]	; 0x30
 8009d6e:	e005      	b.n	8009d7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d70:	6978      	ldr	r0, [r7, #20]
 8009d72:	f001 fedb 	bl	800bb2c <vPortFree>
 8009d76:	e001      	b.n	8009d7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d017      	beq.n	8009db2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d8a:	88fa      	ldrh	r2, [r7, #6]
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	9303      	str	r3, [sp, #12]
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	9302      	str	r3, [sp, #8]
 8009d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d96:	9301      	str	r3, [sp, #4]
 8009d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	68b9      	ldr	r1, [r7, #8]
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 f80e 	bl	8009dc2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009da6:	69f8      	ldr	r0, [r7, #28]
 8009da8:	f000 f89a 	bl	8009ee0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009dac:	2301      	movs	r3, #1
 8009dae:	61bb      	str	r3, [r7, #24]
 8009db0:	e002      	b.n	8009db8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009db2:	f04f 33ff 	mov.w	r3, #4294967295
 8009db6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009db8:	69bb      	ldr	r3, [r7, #24]
	}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3720      	adds	r7, #32
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b088      	sub	sp, #32
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	60f8      	str	r0, [r7, #12]
 8009dca:	60b9      	str	r1, [r7, #8]
 8009dcc:	607a      	str	r2, [r7, #4]
 8009dce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	461a      	mov	r2, r3
 8009dda:	21a5      	movs	r1, #165	; 0xa5
 8009ddc:	f002 fb01 	bl	800c3e2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009dea:	3b01      	subs	r3, #1
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	4413      	add	r3, r2
 8009df0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	f023 0307 	bic.w	r3, r3, #7
 8009df8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	f003 0307 	and.w	r3, r3, #7
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d009      	beq.n	8009e18 <prvInitialiseNewTask+0x56>
 8009e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e08:	f383 8811 	msr	BASEPRI, r3
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f3bf 8f4f 	dsb	sy
 8009e14:	617b      	str	r3, [r7, #20]
 8009e16:	e7fe      	b.n	8009e16 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d01f      	beq.n	8009e5e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e1e:	2300      	movs	r3, #0
 8009e20:	61fb      	str	r3, [r7, #28]
 8009e22:	e012      	b.n	8009e4a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	4413      	add	r3, r2
 8009e2a:	7819      	ldrb	r1, [r3, #0]
 8009e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	4413      	add	r3, r2
 8009e32:	3334      	adds	r3, #52	; 0x34
 8009e34:	460a      	mov	r2, r1
 8009e36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d006      	beq.n	8009e52 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	3301      	adds	r3, #1
 8009e48:	61fb      	str	r3, [r7, #28]
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	2b0f      	cmp	r3, #15
 8009e4e:	d9e9      	bls.n	8009e24 <prvInitialiseNewTask+0x62>
 8009e50:	e000      	b.n	8009e54 <prvInitialiseNewTask+0x92>
			{
				break;
 8009e52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e5c:	e003      	b.n	8009e66 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e68:	2b37      	cmp	r3, #55	; 0x37
 8009e6a:	d901      	bls.n	8009e70 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e6c:	2337      	movs	r3, #55	; 0x37
 8009e6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7e:	2200      	movs	r2, #0
 8009e80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e84:	3304      	adds	r3, #4
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7ff f8d6 	bl	8009038 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8e:	3318      	adds	r3, #24
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7ff f8d1 	bl	8009038 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eaa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eae:	2200      	movs	r2, #0
 8009eb0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009eba:	683a      	ldr	r2, [r7, #0]
 8009ebc:	68f9      	ldr	r1, [r7, #12]
 8009ebe:	69b8      	ldr	r0, [r7, #24]
 8009ec0:	f001 fa4c 	bl	800b35c <pxPortInitialiseStack>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d002      	beq.n	8009ed6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ed6:	bf00      	nop
 8009ed8:	3720      	adds	r7, #32
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
	...

08009ee0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ee8:	f001 fb60 	bl	800b5ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009eec:	4b2d      	ldr	r3, [pc, #180]	; (8009fa4 <prvAddNewTaskToReadyList+0xc4>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	4a2c      	ldr	r2, [pc, #176]	; (8009fa4 <prvAddNewTaskToReadyList+0xc4>)
 8009ef4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009ef6:	4b2c      	ldr	r3, [pc, #176]	; (8009fa8 <prvAddNewTaskToReadyList+0xc8>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d109      	bne.n	8009f12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009efe:	4a2a      	ldr	r2, [pc, #168]	; (8009fa8 <prvAddNewTaskToReadyList+0xc8>)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f04:	4b27      	ldr	r3, [pc, #156]	; (8009fa4 <prvAddNewTaskToReadyList+0xc4>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d110      	bne.n	8009f2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f0c:	f000 fd48 	bl	800a9a0 <prvInitialiseTaskLists>
 8009f10:	e00d      	b.n	8009f2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f12:	4b26      	ldr	r3, [pc, #152]	; (8009fac <prvAddNewTaskToReadyList+0xcc>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d109      	bne.n	8009f2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f1a:	4b23      	ldr	r3, [pc, #140]	; (8009fa8 <prvAddNewTaskToReadyList+0xc8>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d802      	bhi.n	8009f2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f28:	4a1f      	ldr	r2, [pc, #124]	; (8009fa8 <prvAddNewTaskToReadyList+0xc8>)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f2e:	4b20      	ldr	r3, [pc, #128]	; (8009fb0 <prvAddNewTaskToReadyList+0xd0>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	3301      	adds	r3, #1
 8009f34:	4a1e      	ldr	r2, [pc, #120]	; (8009fb0 <prvAddNewTaskToReadyList+0xd0>)
 8009f36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f38:	4b1d      	ldr	r3, [pc, #116]	; (8009fb0 <prvAddNewTaskToReadyList+0xd0>)
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f44:	4b1b      	ldr	r3, [pc, #108]	; (8009fb4 <prvAddNewTaskToReadyList+0xd4>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d903      	bls.n	8009f54 <prvAddNewTaskToReadyList+0x74>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f50:	4a18      	ldr	r2, [pc, #96]	; (8009fb4 <prvAddNewTaskToReadyList+0xd4>)
 8009f52:	6013      	str	r3, [r2, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f58:	4613      	mov	r3, r2
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	4413      	add	r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4a15      	ldr	r2, [pc, #84]	; (8009fb8 <prvAddNewTaskToReadyList+0xd8>)
 8009f62:	441a      	add	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	3304      	adds	r3, #4
 8009f68:	4619      	mov	r1, r3
 8009f6a:	4610      	mov	r0, r2
 8009f6c:	f7ff f871 	bl	8009052 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f70:	f001 fb4a 	bl	800b608 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f74:	4b0d      	ldr	r3, [pc, #52]	; (8009fac <prvAddNewTaskToReadyList+0xcc>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00e      	beq.n	8009f9a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f7c:	4b0a      	ldr	r3, [pc, #40]	; (8009fa8 <prvAddNewTaskToReadyList+0xc8>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d207      	bcs.n	8009f9a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f8a:	4b0c      	ldr	r3, [pc, #48]	; (8009fbc <prvAddNewTaskToReadyList+0xdc>)
 8009f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f90:	601a      	str	r2, [r3, #0]
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f9a:	bf00      	nop
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	20000ce8 	.word	0x20000ce8
 8009fa8:	20000814 	.word	0x20000814
 8009fac:	20000cf4 	.word	0x20000cf4
 8009fb0:	20000d04 	.word	0x20000d04
 8009fb4:	20000cf0 	.word	0x20000cf0
 8009fb8:	20000818 	.word	0x20000818
 8009fbc:	e000ed04 	.word	0xe000ed04

08009fc0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b08a      	sub	sp, #40	; 0x28
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d109      	bne.n	8009fe8 <vTaskDelayUntil+0x28>
 8009fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	617b      	str	r3, [r7, #20]
 8009fe6:	e7fe      	b.n	8009fe6 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d109      	bne.n	800a002 <vTaskDelayUntil+0x42>
 8009fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	613b      	str	r3, [r7, #16]
 800a000:	e7fe      	b.n	800a000 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800a002:	4b29      	ldr	r3, [pc, #164]	; (800a0a8 <vTaskDelayUntil+0xe8>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d009      	beq.n	800a01e <vTaskDelayUntil+0x5e>
 800a00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00e:	f383 8811 	msr	BASEPRI, r3
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	60fb      	str	r3, [r7, #12]
 800a01c:	e7fe      	b.n	800a01c <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800a01e:	f000 f8e1 	bl	800a1e4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a022:	4b22      	ldr	r3, [pc, #136]	; (800a0ac <vTaskDelayUntil+0xec>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	4413      	add	r3, r2
 800a030:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	6a3a      	ldr	r2, [r7, #32]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d20b      	bcs.n	800a054 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	69fa      	ldr	r2, [r7, #28]
 800a042:	429a      	cmp	r2, r3
 800a044:	d211      	bcs.n	800a06a <vTaskDelayUntil+0xaa>
 800a046:	69fa      	ldr	r2, [r7, #28]
 800a048:	6a3b      	ldr	r3, [r7, #32]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d90d      	bls.n	800a06a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800a04e:	2301      	movs	r3, #1
 800a050:	627b      	str	r3, [r7, #36]	; 0x24
 800a052:	e00a      	b.n	800a06a <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	69fa      	ldr	r2, [r7, #28]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d303      	bcc.n	800a066 <vTaskDelayUntil+0xa6>
 800a05e:	69fa      	ldr	r2, [r7, #28]
 800a060:	6a3b      	ldr	r3, [r7, #32]
 800a062:	429a      	cmp	r2, r3
 800a064:	d901      	bls.n	800a06a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800a066:	2301      	movs	r3, #1
 800a068:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	69fa      	ldr	r2, [r7, #28]
 800a06e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a072:	2b00      	cmp	r3, #0
 800a074:	d006      	beq.n	800a084 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a076:	69fa      	ldr	r2, [r7, #28]
 800a078:	6a3b      	ldr	r3, [r7, #32]
 800a07a:	1ad3      	subs	r3, r2, r3
 800a07c:	2100      	movs	r1, #0
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 fdd2 	bl	800ac28 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a084:	f000 f8f4 	bl	800a270 <xTaskResumeAll>
 800a088:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d107      	bne.n	800a0a0 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800a090:	4b07      	ldr	r3, [pc, #28]	; (800a0b0 <vTaskDelayUntil+0xf0>)
 800a092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a096:	601a      	str	r2, [r3, #0]
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0a0:	bf00      	nop
 800a0a2:	3728      	adds	r7, #40	; 0x28
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	20000d10 	.word	0x20000d10
 800a0ac:	20000cec 	.word	0x20000cec
 800a0b0:	e000ed04 	.word	0xe000ed04

0800a0b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d016      	beq.n	800a0f4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a0c6:	4b13      	ldr	r3, [pc, #76]	; (800a114 <vTaskDelay+0x60>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d009      	beq.n	800a0e2 <vTaskDelay+0x2e>
 800a0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d2:	f383 8811 	msr	BASEPRI, r3
 800a0d6:	f3bf 8f6f 	isb	sy
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	60bb      	str	r3, [r7, #8]
 800a0e0:	e7fe      	b.n	800a0e0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a0e2:	f000 f87f 	bl	800a1e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 fd9d 	bl	800ac28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a0ee:	f000 f8bf 	bl	800a270 <xTaskResumeAll>
 800a0f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d107      	bne.n	800a10a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a0fa:	4b07      	ldr	r3, [pc, #28]	; (800a118 <vTaskDelay+0x64>)
 800a0fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a100:	601a      	str	r2, [r3, #0]
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a10a:	bf00      	nop
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	20000d10 	.word	0x20000d10
 800a118:	e000ed04 	.word	0xe000ed04

0800a11c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b08a      	sub	sp, #40	; 0x28
 800a120:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a122:	2300      	movs	r3, #0
 800a124:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a126:	2300      	movs	r3, #0
 800a128:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a12a:	463a      	mov	r2, r7
 800a12c:	1d39      	adds	r1, r7, #4
 800a12e:	f107 0308 	add.w	r3, r7, #8
 800a132:	4618      	mov	r0, r3
 800a134:	f7fe ff2c 	bl	8008f90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a138:	6839      	ldr	r1, [r7, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	9202      	str	r2, [sp, #8]
 800a140:	9301      	str	r3, [sp, #4]
 800a142:	2300      	movs	r3, #0
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	2300      	movs	r3, #0
 800a148:	460a      	mov	r2, r1
 800a14a:	4920      	ldr	r1, [pc, #128]	; (800a1cc <vTaskStartScheduler+0xb0>)
 800a14c:	4820      	ldr	r0, [pc, #128]	; (800a1d0 <vTaskStartScheduler+0xb4>)
 800a14e:	f7ff fd99 	bl	8009c84 <xTaskCreateStatic>
 800a152:	4602      	mov	r2, r0
 800a154:	4b1f      	ldr	r3, [pc, #124]	; (800a1d4 <vTaskStartScheduler+0xb8>)
 800a156:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a158:	4b1e      	ldr	r3, [pc, #120]	; (800a1d4 <vTaskStartScheduler+0xb8>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d002      	beq.n	800a166 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a160:	2301      	movs	r3, #1
 800a162:	617b      	str	r3, [r7, #20]
 800a164:	e001      	b.n	800a16a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a166:	2300      	movs	r3, #0
 800a168:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d102      	bne.n	800a176 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a170:	f000 fdae 	bl	800acd0 <xTimerCreateTimerTask>
 800a174:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d115      	bne.n	800a1a8 <vTaskStartScheduler+0x8c>
 800a17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a180:	f383 8811 	msr	BASEPRI, r3
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a18e:	4b12      	ldr	r3, [pc, #72]	; (800a1d8 <vTaskStartScheduler+0xbc>)
 800a190:	f04f 32ff 	mov.w	r2, #4294967295
 800a194:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a196:	4b11      	ldr	r3, [pc, #68]	; (800a1dc <vTaskStartScheduler+0xc0>)
 800a198:	2201      	movs	r2, #1
 800a19a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a19c:	4b10      	ldr	r3, [pc, #64]	; (800a1e0 <vTaskStartScheduler+0xc4>)
 800a19e:	2200      	movs	r2, #0
 800a1a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a1a2:	f001 f965 	bl	800b470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a1a6:	e00d      	b.n	800a1c4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ae:	d109      	bne.n	800a1c4 <vTaskStartScheduler+0xa8>
 800a1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b4:	f383 8811 	msr	BASEPRI, r3
 800a1b8:	f3bf 8f6f 	isb	sy
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	60fb      	str	r3, [r7, #12]
 800a1c2:	e7fe      	b.n	800a1c2 <vTaskStartScheduler+0xa6>
}
 800a1c4:	bf00      	nop
 800a1c6:	3718      	adds	r7, #24
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	0800c5f4 	.word	0x0800c5f4
 800a1d0:	0800a8c9 	.word	0x0800a8c9
 800a1d4:	20000d0c 	.word	0x20000d0c
 800a1d8:	20000d08 	.word	0x20000d08
 800a1dc:	20000cf4 	.word	0x20000cf4
 800a1e0:	20000cec 	.word	0x20000cec

0800a1e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a1e8:	4b04      	ldr	r3, [pc, #16]	; (800a1fc <vTaskSuspendAll+0x18>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	4a03      	ldr	r2, [pc, #12]	; (800a1fc <vTaskSuspendAll+0x18>)
 800a1f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a1f2:	bf00      	nop
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	20000d10 	.word	0x20000d10

0800a200 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800a206:	2300      	movs	r3, #0
 800a208:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800a20a:	4b14      	ldr	r3, [pc, #80]	; (800a25c <prvGetExpectedIdleTime+0x5c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800a212:	2301      	movs	r3, #1
 800a214:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800a216:	4b12      	ldr	r3, [pc, #72]	; (800a260 <prvGetExpectedIdleTime+0x60>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d002      	beq.n	800a226 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800a220:	2300      	movs	r3, #0
 800a222:	607b      	str	r3, [r7, #4]
 800a224:	e012      	b.n	800a24c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800a226:	4b0f      	ldr	r3, [pc, #60]	; (800a264 <prvGetExpectedIdleTime+0x64>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d902      	bls.n	800a234 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800a22e:	2300      	movs	r3, #0
 800a230:	607b      	str	r3, [r7, #4]
 800a232:	e00b      	b.n	800a24c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d002      	beq.n	800a240 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800a23a:	2300      	movs	r3, #0
 800a23c:	607b      	str	r3, [r7, #4]
 800a23e:	e005      	b.n	800a24c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800a240:	4b09      	ldr	r3, [pc, #36]	; (800a268 <prvGetExpectedIdleTime+0x68>)
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	4b09      	ldr	r3, [pc, #36]	; (800a26c <prvGetExpectedIdleTime+0x6c>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	1ad3      	subs	r3, r2, r3
 800a24a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800a24c:	687b      	ldr	r3, [r7, #4]
	}
 800a24e:	4618      	mov	r0, r3
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	20000cf0 	.word	0x20000cf0
 800a260:	20000814 	.word	0x20000814
 800a264:	20000818 	.word	0x20000818
 800a268:	20000d08 	.word	0x20000d08
 800a26c:	20000cec 	.word	0x20000cec

0800a270 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a276:	2300      	movs	r3, #0
 800a278:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a27a:	2300      	movs	r3, #0
 800a27c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a27e:	4b41      	ldr	r3, [pc, #260]	; (800a384 <xTaskResumeAll+0x114>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d109      	bne.n	800a29a <xTaskResumeAll+0x2a>
 800a286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	603b      	str	r3, [r7, #0]
 800a298:	e7fe      	b.n	800a298 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a29a:	f001 f987 	bl	800b5ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a29e:	4b39      	ldr	r3, [pc, #228]	; (800a384 <xTaskResumeAll+0x114>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	4a37      	ldr	r2, [pc, #220]	; (800a384 <xTaskResumeAll+0x114>)
 800a2a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2a8:	4b36      	ldr	r3, [pc, #216]	; (800a384 <xTaskResumeAll+0x114>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d162      	bne.n	800a376 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a2b0:	4b35      	ldr	r3, [pc, #212]	; (800a388 <xTaskResumeAll+0x118>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d05e      	beq.n	800a376 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2b8:	e02f      	b.n	800a31a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2ba:	4b34      	ldr	r3, [pc, #208]	; (800a38c <xTaskResumeAll+0x11c>)
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	3318      	adds	r3, #24
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fe ff20 	bl	800910c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3304      	adds	r3, #4
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7fe ff1b 	bl	800910c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2da:	4b2d      	ldr	r3, [pc, #180]	; (800a390 <xTaskResumeAll+0x120>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d903      	bls.n	800a2ea <xTaskResumeAll+0x7a>
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e6:	4a2a      	ldr	r2, [pc, #168]	; (800a390 <xTaskResumeAll+0x120>)
 800a2e8:	6013      	str	r3, [r2, #0]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	4413      	add	r3, r2
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	4a27      	ldr	r2, [pc, #156]	; (800a394 <xTaskResumeAll+0x124>)
 800a2f8:	441a      	add	r2, r3
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	3304      	adds	r3, #4
 800a2fe:	4619      	mov	r1, r3
 800a300:	4610      	mov	r0, r2
 800a302:	f7fe fea6 	bl	8009052 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a30a:	4b23      	ldr	r3, [pc, #140]	; (800a398 <xTaskResumeAll+0x128>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a310:	429a      	cmp	r2, r3
 800a312:	d302      	bcc.n	800a31a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a314:	4b21      	ldr	r3, [pc, #132]	; (800a39c <xTaskResumeAll+0x12c>)
 800a316:	2201      	movs	r2, #1
 800a318:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a31a:	4b1c      	ldr	r3, [pc, #112]	; (800a38c <xTaskResumeAll+0x11c>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1cb      	bne.n	800a2ba <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d001      	beq.n	800a32c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a328:	f000 fbd4 	bl	800aad4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a32c:	4b1c      	ldr	r3, [pc, #112]	; (800a3a0 <xTaskResumeAll+0x130>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d010      	beq.n	800a35a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a338:	f000 f87e 	bl	800a438 <xTaskIncrementTick>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d002      	beq.n	800a348 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a342:	4b16      	ldr	r3, [pc, #88]	; (800a39c <xTaskResumeAll+0x12c>)
 800a344:	2201      	movs	r2, #1
 800a346:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	3b01      	subs	r3, #1
 800a34c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1f1      	bne.n	800a338 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a354:	4b12      	ldr	r3, [pc, #72]	; (800a3a0 <xTaskResumeAll+0x130>)
 800a356:	2200      	movs	r2, #0
 800a358:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a35a:	4b10      	ldr	r3, [pc, #64]	; (800a39c <xTaskResumeAll+0x12c>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d009      	beq.n	800a376 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a362:	2301      	movs	r3, #1
 800a364:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a366:	4b0f      	ldr	r3, [pc, #60]	; (800a3a4 <xTaskResumeAll+0x134>)
 800a368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a36c:	601a      	str	r2, [r3, #0]
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a376:	f001 f947 	bl	800b608 <vPortExitCritical>

	return xAlreadyYielded;
 800a37a:	68bb      	ldr	r3, [r7, #8]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	20000d10 	.word	0x20000d10
 800a388:	20000ce8 	.word	0x20000ce8
 800a38c:	20000ca8 	.word	0x20000ca8
 800a390:	20000cf0 	.word	0x20000cf0
 800a394:	20000818 	.word	0x20000818
 800a398:	20000814 	.word	0x20000814
 800a39c:	20000cfc 	.word	0x20000cfc
 800a3a0:	20000cf8 	.word	0x20000cf8
 800a3a4:	e000ed04 	.word	0xe000ed04

0800a3a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a3ae:	4b05      	ldr	r3, [pc, #20]	; (800a3c4 <xTaskGetTickCount+0x1c>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a3b4:	687b      	ldr	r3, [r7, #4]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	370c      	adds	r7, #12
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	20000cec 	.word	0x20000cec

0800a3c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3ce:	f001 faad 	bl	800b92c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a3d6:	4b04      	ldr	r3, [pc, #16]	; (800a3e8 <xTaskGetTickCountFromISR+0x20>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3dc:	683b      	ldr	r3, [r7, #0]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20000cec 	.word	0x20000cec

0800a3ec <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800a3f4:	4b0e      	ldr	r3, [pc, #56]	; (800a430 <vTaskStepTick+0x44>)
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	441a      	add	r2, r3
 800a3fc:	4b0d      	ldr	r3, [pc, #52]	; (800a434 <vTaskStepTick+0x48>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	429a      	cmp	r2, r3
 800a402:	d909      	bls.n	800a418 <vTaskStepTick+0x2c>
 800a404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a408:	f383 8811 	msr	BASEPRI, r3
 800a40c:	f3bf 8f6f 	isb	sy
 800a410:	f3bf 8f4f 	dsb	sy
 800a414:	60fb      	str	r3, [r7, #12]
 800a416:	e7fe      	b.n	800a416 <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 800a418:	4b05      	ldr	r3, [pc, #20]	; (800a430 <vTaskStepTick+0x44>)
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4413      	add	r3, r2
 800a420:	4a03      	ldr	r2, [pc, #12]	; (800a430 <vTaskStepTick+0x44>)
 800a422:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800a424:	bf00      	nop
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	20000cec 	.word	0x20000cec
 800a434:	20000d08 	.word	0x20000d08

0800a438 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a43e:	2300      	movs	r3, #0
 800a440:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a442:	4b4e      	ldr	r3, [pc, #312]	; (800a57c <xTaskIncrementTick+0x144>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	f040 8088 	bne.w	800a55c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a44c:	4b4c      	ldr	r3, [pc, #304]	; (800a580 <xTaskIncrementTick+0x148>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	3301      	adds	r3, #1
 800a452:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a454:	4a4a      	ldr	r2, [pc, #296]	; (800a580 <xTaskIncrementTick+0x148>)
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d11f      	bne.n	800a4a0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a460:	4b48      	ldr	r3, [pc, #288]	; (800a584 <xTaskIncrementTick+0x14c>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d009      	beq.n	800a47e <xTaskIncrementTick+0x46>
 800a46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46e:	f383 8811 	msr	BASEPRI, r3
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	603b      	str	r3, [r7, #0]
 800a47c:	e7fe      	b.n	800a47c <xTaskIncrementTick+0x44>
 800a47e:	4b41      	ldr	r3, [pc, #260]	; (800a584 <xTaskIncrementTick+0x14c>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	60fb      	str	r3, [r7, #12]
 800a484:	4b40      	ldr	r3, [pc, #256]	; (800a588 <xTaskIncrementTick+0x150>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a3e      	ldr	r2, [pc, #248]	; (800a584 <xTaskIncrementTick+0x14c>)
 800a48a:	6013      	str	r3, [r2, #0]
 800a48c:	4a3e      	ldr	r2, [pc, #248]	; (800a588 <xTaskIncrementTick+0x150>)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6013      	str	r3, [r2, #0]
 800a492:	4b3e      	ldr	r3, [pc, #248]	; (800a58c <xTaskIncrementTick+0x154>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	3301      	adds	r3, #1
 800a498:	4a3c      	ldr	r2, [pc, #240]	; (800a58c <xTaskIncrementTick+0x154>)
 800a49a:	6013      	str	r3, [r2, #0]
 800a49c:	f000 fb1a 	bl	800aad4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4a0:	4b3b      	ldr	r3, [pc, #236]	; (800a590 <xTaskIncrementTick+0x158>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	693a      	ldr	r2, [r7, #16]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d349      	bcc.n	800a53e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4aa:	4b36      	ldr	r3, [pc, #216]	; (800a584 <xTaskIncrementTick+0x14c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d104      	bne.n	800a4be <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4b4:	4b36      	ldr	r3, [pc, #216]	; (800a590 <xTaskIncrementTick+0x158>)
 800a4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ba:	601a      	str	r2, [r3, #0]
					break;
 800a4bc:	e03f      	b.n	800a53e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4be:	4b31      	ldr	r3, [pc, #196]	; (800a584 <xTaskIncrementTick+0x14c>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4ce:	693a      	ldr	r2, [r7, #16]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d203      	bcs.n	800a4de <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a4d6:	4a2e      	ldr	r2, [pc, #184]	; (800a590 <xTaskIncrementTick+0x158>)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a4dc:	e02f      	b.n	800a53e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	3304      	adds	r3, #4
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fe fe12 	bl	800910c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d004      	beq.n	800a4fa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	3318      	adds	r3, #24
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7fe fe09 	bl	800910c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4fe:	4b25      	ldr	r3, [pc, #148]	; (800a594 <xTaskIncrementTick+0x15c>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	429a      	cmp	r2, r3
 800a504:	d903      	bls.n	800a50e <xTaskIncrementTick+0xd6>
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50a:	4a22      	ldr	r2, [pc, #136]	; (800a594 <xTaskIncrementTick+0x15c>)
 800a50c:	6013      	str	r3, [r2, #0]
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a512:	4613      	mov	r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	4413      	add	r3, r2
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	4a1f      	ldr	r2, [pc, #124]	; (800a598 <xTaskIncrementTick+0x160>)
 800a51c:	441a      	add	r2, r3
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	3304      	adds	r3, #4
 800a522:	4619      	mov	r1, r3
 800a524:	4610      	mov	r0, r2
 800a526:	f7fe fd94 	bl	8009052 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52e:	4b1b      	ldr	r3, [pc, #108]	; (800a59c <xTaskIncrementTick+0x164>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a534:	429a      	cmp	r2, r3
 800a536:	d3b8      	bcc.n	800a4aa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a538:	2301      	movs	r3, #1
 800a53a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a53c:	e7b5      	b.n	800a4aa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a53e:	4b17      	ldr	r3, [pc, #92]	; (800a59c <xTaskIncrementTick+0x164>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a544:	4914      	ldr	r1, [pc, #80]	; (800a598 <xTaskIncrementTick+0x160>)
 800a546:	4613      	mov	r3, r2
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	4413      	add	r3, r2
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	440b      	add	r3, r1
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2b01      	cmp	r3, #1
 800a554:	d907      	bls.n	800a566 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800a556:	2301      	movs	r3, #1
 800a558:	617b      	str	r3, [r7, #20]
 800a55a:	e004      	b.n	800a566 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a55c:	4b10      	ldr	r3, [pc, #64]	; (800a5a0 <xTaskIncrementTick+0x168>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	3301      	adds	r3, #1
 800a562:	4a0f      	ldr	r2, [pc, #60]	; (800a5a0 <xTaskIncrementTick+0x168>)
 800a564:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a566:	4b0f      	ldr	r3, [pc, #60]	; (800a5a4 <xTaskIncrementTick+0x16c>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d001      	beq.n	800a572 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800a56e:	2301      	movs	r3, #1
 800a570:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a572:	697b      	ldr	r3, [r7, #20]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3718      	adds	r7, #24
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	20000d10 	.word	0x20000d10
 800a580:	20000cec 	.word	0x20000cec
 800a584:	20000ca0 	.word	0x20000ca0
 800a588:	20000ca4 	.word	0x20000ca4
 800a58c:	20000d00 	.word	0x20000d00
 800a590:	20000d08 	.word	0x20000d08
 800a594:	20000cf0 	.word	0x20000cf0
 800a598:	20000818 	.word	0x20000818
 800a59c:	20000814 	.word	0x20000814
 800a5a0:	20000cf8 	.word	0x20000cf8
 800a5a4:	20000cfc 	.word	0x20000cfc

0800a5a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5ae:	4b27      	ldr	r3, [pc, #156]	; (800a64c <vTaskSwitchContext+0xa4>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d003      	beq.n	800a5be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5b6:	4b26      	ldr	r3, [pc, #152]	; (800a650 <vTaskSwitchContext+0xa8>)
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5bc:	e040      	b.n	800a640 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a5be:	4b24      	ldr	r3, [pc, #144]	; (800a650 <vTaskSwitchContext+0xa8>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5c4:	4b23      	ldr	r3, [pc, #140]	; (800a654 <vTaskSwitchContext+0xac>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	60fb      	str	r3, [r7, #12]
 800a5ca:	e00f      	b.n	800a5ec <vTaskSwitchContext+0x44>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d109      	bne.n	800a5e6 <vTaskSwitchContext+0x3e>
 800a5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	607b      	str	r3, [r7, #4]
 800a5e4:	e7fe      	b.n	800a5e4 <vTaskSwitchContext+0x3c>
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	60fb      	str	r3, [r7, #12]
 800a5ec:	491a      	ldr	r1, [pc, #104]	; (800a658 <vTaskSwitchContext+0xb0>)
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	4413      	add	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	440b      	add	r3, r1
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d0e5      	beq.n	800a5cc <vTaskSwitchContext+0x24>
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	4613      	mov	r3, r2
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4413      	add	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4a13      	ldr	r2, [pc, #76]	; (800a658 <vTaskSwitchContext+0xb0>)
 800a60c:	4413      	add	r3, r2
 800a60e:	60bb      	str	r3, [r7, #8]
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	685a      	ldr	r2, [r3, #4]
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	605a      	str	r2, [r3, #4]
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	685a      	ldr	r2, [r3, #4]
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	3308      	adds	r3, #8
 800a622:	429a      	cmp	r2, r3
 800a624:	d104      	bne.n	800a630 <vTaskSwitchContext+0x88>
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	685a      	ldr	r2, [r3, #4]
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	605a      	str	r2, [r3, #4]
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	4a09      	ldr	r2, [pc, #36]	; (800a65c <vTaskSwitchContext+0xb4>)
 800a638:	6013      	str	r3, [r2, #0]
 800a63a:	4a06      	ldr	r2, [pc, #24]	; (800a654 <vTaskSwitchContext+0xac>)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6013      	str	r3, [r2, #0]
}
 800a640:	bf00      	nop
 800a642:	3714      	adds	r7, #20
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	20000d10 	.word	0x20000d10
 800a650:	20000cfc 	.word	0x20000cfc
 800a654:	20000cf0 	.word	0x20000cf0
 800a658:	20000818 	.word	0x20000818
 800a65c:	20000814 	.word	0x20000814

0800a660 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d109      	bne.n	800a684 <vTaskPlaceOnEventList+0x24>
 800a670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a674:	f383 8811 	msr	BASEPRI, r3
 800a678:	f3bf 8f6f 	isb	sy
 800a67c:	f3bf 8f4f 	dsb	sy
 800a680:	60fb      	str	r3, [r7, #12]
 800a682:	e7fe      	b.n	800a682 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a684:	4b07      	ldr	r3, [pc, #28]	; (800a6a4 <vTaskPlaceOnEventList+0x44>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	3318      	adds	r3, #24
 800a68a:	4619      	mov	r1, r3
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f7fe fd04 	bl	800909a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a692:	2101      	movs	r1, #1
 800a694:	6838      	ldr	r0, [r7, #0]
 800a696:	f000 fac7 	bl	800ac28 <prvAddCurrentTaskToDelayedList>
}
 800a69a:	bf00      	nop
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	20000814 	.word	0x20000814

0800a6a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b086      	sub	sp, #24
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d109      	bne.n	800a6ce <vTaskPlaceOnEventListRestricted+0x26>
 800a6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6be:	f383 8811 	msr	BASEPRI, r3
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	617b      	str	r3, [r7, #20]
 800a6cc:	e7fe      	b.n	800a6cc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6ce:	4b0a      	ldr	r3, [pc, #40]	; (800a6f8 <vTaskPlaceOnEventListRestricted+0x50>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	3318      	adds	r3, #24
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f7fe fcbb 	bl	8009052 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d002      	beq.n	800a6e8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a6e8:	6879      	ldr	r1, [r7, #4]
 800a6ea:	68b8      	ldr	r0, [r7, #8]
 800a6ec:	f000 fa9c 	bl	800ac28 <prvAddCurrentTaskToDelayedList>
	}
 800a6f0:	bf00      	nop
 800a6f2:	3718      	adds	r7, #24
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	20000814 	.word	0x20000814

0800a6fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b086      	sub	sp, #24
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d109      	bne.n	800a726 <xTaskRemoveFromEventList+0x2a>
 800a712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a716:	f383 8811 	msr	BASEPRI, r3
 800a71a:	f3bf 8f6f 	isb	sy
 800a71e:	f3bf 8f4f 	dsb	sy
 800a722:	60fb      	str	r3, [r7, #12]
 800a724:	e7fe      	b.n	800a724 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	3318      	adds	r3, #24
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7fe fcee 	bl	800910c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a730:	4b1e      	ldr	r3, [pc, #120]	; (800a7ac <xTaskRemoveFromEventList+0xb0>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d11f      	bne.n	800a778 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	3304      	adds	r3, #4
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fe fce5 	bl	800910c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a746:	4b1a      	ldr	r3, [pc, #104]	; (800a7b0 <xTaskRemoveFromEventList+0xb4>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d903      	bls.n	800a756 <xTaskRemoveFromEventList+0x5a>
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a752:	4a17      	ldr	r2, [pc, #92]	; (800a7b0 <xTaskRemoveFromEventList+0xb4>)
 800a754:	6013      	str	r3, [r2, #0]
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a75a:	4613      	mov	r3, r2
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	4413      	add	r3, r2
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	4a14      	ldr	r2, [pc, #80]	; (800a7b4 <xTaskRemoveFromEventList+0xb8>)
 800a764:	441a      	add	r2, r3
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	3304      	adds	r3, #4
 800a76a:	4619      	mov	r1, r3
 800a76c:	4610      	mov	r0, r2
 800a76e:	f7fe fc70 	bl	8009052 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800a772:	f000 f9af 	bl	800aad4 <prvResetNextTaskUnblockTime>
 800a776:	e005      	b.n	800a784 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	3318      	adds	r3, #24
 800a77c:	4619      	mov	r1, r3
 800a77e:	480e      	ldr	r0, [pc, #56]	; (800a7b8 <xTaskRemoveFromEventList+0xbc>)
 800a780:	f7fe fc67 	bl	8009052 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a788:	4b0c      	ldr	r3, [pc, #48]	; (800a7bc <xTaskRemoveFromEventList+0xc0>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78e:	429a      	cmp	r2, r3
 800a790:	d905      	bls.n	800a79e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a792:	2301      	movs	r3, #1
 800a794:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a796:	4b0a      	ldr	r3, [pc, #40]	; (800a7c0 <xTaskRemoveFromEventList+0xc4>)
 800a798:	2201      	movs	r2, #1
 800a79a:	601a      	str	r2, [r3, #0]
 800a79c:	e001      	b.n	800a7a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a7a2:	697b      	ldr	r3, [r7, #20]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3718      	adds	r7, #24
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	20000d10 	.word	0x20000d10
 800a7b0:	20000cf0 	.word	0x20000cf0
 800a7b4:	20000818 	.word	0x20000818
 800a7b8:	20000ca8 	.word	0x20000ca8
 800a7bc:	20000814 	.word	0x20000814
 800a7c0:	20000cfc 	.word	0x20000cfc

0800a7c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a7cc:	4b06      	ldr	r3, [pc, #24]	; (800a7e8 <vTaskInternalSetTimeOutState+0x24>)
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a7d4:	4b05      	ldr	r3, [pc, #20]	; (800a7ec <vTaskInternalSetTimeOutState+0x28>)
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	605a      	str	r2, [r3, #4]
}
 800a7dc:	bf00      	nop
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr
 800a7e8:	20000d00 	.word	0x20000d00
 800a7ec:	20000cec 	.word	0x20000cec

0800a7f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b088      	sub	sp, #32
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d109      	bne.n	800a814 <xTaskCheckForTimeOut+0x24>
 800a800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a804:	f383 8811 	msr	BASEPRI, r3
 800a808:	f3bf 8f6f 	isb	sy
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	613b      	str	r3, [r7, #16]
 800a812:	e7fe      	b.n	800a812 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d109      	bne.n	800a82e <xTaskCheckForTimeOut+0x3e>
 800a81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	60fb      	str	r3, [r7, #12]
 800a82c:	e7fe      	b.n	800a82c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a82e:	f000 febd 	bl	800b5ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a832:	4b1d      	ldr	r3, [pc, #116]	; (800a8a8 <xTaskCheckForTimeOut+0xb8>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	69ba      	ldr	r2, [r7, #24]
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84a:	d102      	bne.n	800a852 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a84c:	2300      	movs	r3, #0
 800a84e:	61fb      	str	r3, [r7, #28]
 800a850:	e023      	b.n	800a89a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	4b15      	ldr	r3, [pc, #84]	; (800a8ac <xTaskCheckForTimeOut+0xbc>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d007      	beq.n	800a86e <xTaskCheckForTimeOut+0x7e>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	69ba      	ldr	r2, [r7, #24]
 800a864:	429a      	cmp	r2, r3
 800a866:	d302      	bcc.n	800a86e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a868:	2301      	movs	r3, #1
 800a86a:	61fb      	str	r3, [r7, #28]
 800a86c:	e015      	b.n	800a89a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	429a      	cmp	r2, r3
 800a876:	d20b      	bcs.n	800a890 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	1ad2      	subs	r2, r2, r3
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f7ff ff9d 	bl	800a7c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a88a:	2300      	movs	r3, #0
 800a88c:	61fb      	str	r3, [r7, #28]
 800a88e:	e004      	b.n	800a89a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	2200      	movs	r2, #0
 800a894:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a896:	2301      	movs	r3, #1
 800a898:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a89a:	f000 feb5 	bl	800b608 <vPortExitCritical>

	return xReturn;
 800a89e:	69fb      	ldr	r3, [r7, #28]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3720      	adds	r7, #32
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	20000cec 	.word	0x20000cec
 800a8ac:	20000d00 	.word	0x20000d00

0800a8b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a8b4:	4b03      	ldr	r3, [pc, #12]	; (800a8c4 <vTaskMissedYield+0x14>)
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	601a      	str	r2, [r3, #0]
}
 800a8ba:	bf00      	nop
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr
 800a8c4:	20000cfc 	.word	0x20000cfc

0800a8c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a8d0:	f000 f8a6 	bl	800aa20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a8d4:	4b17      	ldr	r3, [pc, #92]	; (800a934 <prvIdleTask+0x6c>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d907      	bls.n	800a8ec <prvIdleTask+0x24>
			{
				taskYIELD();
 800a8dc:	4b16      	ldr	r3, [pc, #88]	; (800a938 <prvIdleTask+0x70>)
 800a8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8e2:	601a      	str	r2, [r3, #0]
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800a8ec:	f7ff fc88 	bl	800a200 <prvGetExpectedIdleTime>
 800a8f0:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d9eb      	bls.n	800a8d0 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800a8f8:	f7ff fc74 	bl	800a1e4 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800a8fc:	4b0f      	ldr	r3, [pc, #60]	; (800a93c <prvIdleTask+0x74>)
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	4b0f      	ldr	r3, [pc, #60]	; (800a940 <prvIdleTask+0x78>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	429a      	cmp	r2, r3
 800a906:	d209      	bcs.n	800a91c <prvIdleTask+0x54>
 800a908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	60bb      	str	r3, [r7, #8]
 800a91a:	e7fe      	b.n	800a91a <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800a91c:	f7ff fc70 	bl	800a200 <prvGetExpectedIdleTime>
 800a920:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2b01      	cmp	r3, #1
 800a926:	d902      	bls.n	800a92e <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f000 feed 	bl	800b708 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800a92e:	f7ff fc9f 	bl	800a270 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800a932:	e7cd      	b.n	800a8d0 <prvIdleTask+0x8>
 800a934:	20000818 	.word	0x20000818
 800a938:	e000ed04 	.word	0xe000ed04
 800a93c:	20000d08 	.word	0x20000d08
 800a940:	20000cec 	.word	0x20000cec

0800a944 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800a94a:	2301      	movs	r3, #1
 800a94c:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800a94e:	2301      	movs	r3, #1
 800a950:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800a952:	4b0f      	ldr	r3, [pc, #60]	; (800a990 <eTaskConfirmSleepModeStatus+0x4c>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d002      	beq.n	800a960 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800a95a:	2300      	movs	r3, #0
 800a95c:	71fb      	strb	r3, [r7, #7]
 800a95e:	e010      	b.n	800a982 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800a960:	4b0c      	ldr	r3, [pc, #48]	; (800a994 <eTaskConfirmSleepModeStatus+0x50>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d002      	beq.n	800a96e <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800a968:	2300      	movs	r3, #0
 800a96a:	71fb      	strb	r3, [r7, #7]
 800a96c:	e009      	b.n	800a982 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800a96e:	4b0a      	ldr	r3, [pc, #40]	; (800a998 <eTaskConfirmSleepModeStatus+0x54>)
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	4b0a      	ldr	r3, [pc, #40]	; (800a99c <eTaskConfirmSleepModeStatus+0x58>)
 800a974:	6819      	ldr	r1, [r3, #0]
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	1acb      	subs	r3, r1, r3
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d101      	bne.n	800a982 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800a97e:	2302      	movs	r3, #2
 800a980:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800a982:	79fb      	ldrb	r3, [r7, #7]
	}
 800a984:	4618      	mov	r0, r3
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	20000ca8 	.word	0x20000ca8
 800a994:	20000cfc 	.word	0x20000cfc
 800a998:	20000cd4 	.word	0x20000cd4
 800a99c:	20000ce8 	.word	0x20000ce8

0800a9a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	607b      	str	r3, [r7, #4]
 800a9aa:	e00c      	b.n	800a9c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4413      	add	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4a12      	ldr	r2, [pc, #72]	; (800aa00 <prvInitialiseTaskLists+0x60>)
 800a9b8:	4413      	add	r3, r2
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fe fb1c 	bl	8008ff8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	607b      	str	r3, [r7, #4]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2b37      	cmp	r3, #55	; 0x37
 800a9ca:	d9ef      	bls.n	800a9ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a9cc:	480d      	ldr	r0, [pc, #52]	; (800aa04 <prvInitialiseTaskLists+0x64>)
 800a9ce:	f7fe fb13 	bl	8008ff8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a9d2:	480d      	ldr	r0, [pc, #52]	; (800aa08 <prvInitialiseTaskLists+0x68>)
 800a9d4:	f7fe fb10 	bl	8008ff8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a9d8:	480c      	ldr	r0, [pc, #48]	; (800aa0c <prvInitialiseTaskLists+0x6c>)
 800a9da:	f7fe fb0d 	bl	8008ff8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a9de:	480c      	ldr	r0, [pc, #48]	; (800aa10 <prvInitialiseTaskLists+0x70>)
 800a9e0:	f7fe fb0a 	bl	8008ff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a9e4:	480b      	ldr	r0, [pc, #44]	; (800aa14 <prvInitialiseTaskLists+0x74>)
 800a9e6:	f7fe fb07 	bl	8008ff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a9ea:	4b0b      	ldr	r3, [pc, #44]	; (800aa18 <prvInitialiseTaskLists+0x78>)
 800a9ec:	4a05      	ldr	r2, [pc, #20]	; (800aa04 <prvInitialiseTaskLists+0x64>)
 800a9ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a9f0:	4b0a      	ldr	r3, [pc, #40]	; (800aa1c <prvInitialiseTaskLists+0x7c>)
 800a9f2:	4a05      	ldr	r2, [pc, #20]	; (800aa08 <prvInitialiseTaskLists+0x68>)
 800a9f4:	601a      	str	r2, [r3, #0]
}
 800a9f6:	bf00      	nop
 800a9f8:	3708      	adds	r7, #8
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	20000818 	.word	0x20000818
 800aa04:	20000c78 	.word	0x20000c78
 800aa08:	20000c8c 	.word	0x20000c8c
 800aa0c:	20000ca8 	.word	0x20000ca8
 800aa10:	20000cbc 	.word	0x20000cbc
 800aa14:	20000cd4 	.word	0x20000cd4
 800aa18:	20000ca0 	.word	0x20000ca0
 800aa1c:	20000ca4 	.word	0x20000ca4

0800aa20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa26:	e019      	b.n	800aa5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa28:	f000 fdc0 	bl	800b5ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa2c:	4b0f      	ldr	r3, [pc, #60]	; (800aa6c <prvCheckTasksWaitingTermination+0x4c>)
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	3304      	adds	r3, #4
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7fe fb67 	bl	800910c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa3e:	4b0c      	ldr	r3, [pc, #48]	; (800aa70 <prvCheckTasksWaitingTermination+0x50>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	3b01      	subs	r3, #1
 800aa44:	4a0a      	ldr	r2, [pc, #40]	; (800aa70 <prvCheckTasksWaitingTermination+0x50>)
 800aa46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa48:	4b0a      	ldr	r3, [pc, #40]	; (800aa74 <prvCheckTasksWaitingTermination+0x54>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	4a09      	ldr	r2, [pc, #36]	; (800aa74 <prvCheckTasksWaitingTermination+0x54>)
 800aa50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa52:	f000 fdd9 	bl	800b608 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 f80e 	bl	800aa78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa5c:	4b05      	ldr	r3, [pc, #20]	; (800aa74 <prvCheckTasksWaitingTermination+0x54>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d1e1      	bne.n	800aa28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa64:	bf00      	nop
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	20000cbc 	.word	0x20000cbc
 800aa70:	20000ce8 	.word	0x20000ce8
 800aa74:	20000cd0 	.word	0x20000cd0

0800aa78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d108      	bne.n	800aa9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f001 f84c 	bl	800bb2c <vPortFree>
				vPortFree( pxTCB );
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f001 f849 	bl	800bb2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa9a:	e017      	b.n	800aacc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d103      	bne.n	800aaae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f001 f840 	bl	800bb2c <vPortFree>
	}
 800aaac:	e00e      	b.n	800aacc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	d009      	beq.n	800aacc <prvDeleteTCB+0x54>
 800aab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabc:	f383 8811 	msr	BASEPRI, r3
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	60fb      	str	r3, [r7, #12]
 800aaca:	e7fe      	b.n	800aaca <prvDeleteTCB+0x52>
	}
 800aacc:	bf00      	nop
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aada:	4b0c      	ldr	r3, [pc, #48]	; (800ab0c <prvResetNextTaskUnblockTime+0x38>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d104      	bne.n	800aaee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aae4:	4b0a      	ldr	r3, [pc, #40]	; (800ab10 <prvResetNextTaskUnblockTime+0x3c>)
 800aae6:	f04f 32ff 	mov.w	r2, #4294967295
 800aaea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aaec:	e008      	b.n	800ab00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaee:	4b07      	ldr	r3, [pc, #28]	; (800ab0c <prvResetNextTaskUnblockTime+0x38>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	4a04      	ldr	r2, [pc, #16]	; (800ab10 <prvResetNextTaskUnblockTime+0x3c>)
 800aafe:	6013      	str	r3, [r2, #0]
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr
 800ab0c:	20000ca0 	.word	0x20000ca0
 800ab10:	20000d08 	.word	0x20000d08

0800ab14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ab1a:	4b0b      	ldr	r3, [pc, #44]	; (800ab48 <xTaskGetSchedulerState+0x34>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d102      	bne.n	800ab28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab22:	2301      	movs	r3, #1
 800ab24:	607b      	str	r3, [r7, #4]
 800ab26:	e008      	b.n	800ab3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab28:	4b08      	ldr	r3, [pc, #32]	; (800ab4c <xTaskGetSchedulerState+0x38>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d102      	bne.n	800ab36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ab30:	2302      	movs	r3, #2
 800ab32:	607b      	str	r3, [r7, #4]
 800ab34:	e001      	b.n	800ab3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab36:	2300      	movs	r3, #0
 800ab38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab3a:	687b      	ldr	r3, [r7, #4]
	}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr
 800ab48:	20000cf4 	.word	0x20000cf4
 800ab4c:	20000d10 	.word	0x20000d10

0800ab50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d054      	beq.n	800ac10 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ab66:	4b2d      	ldr	r3, [pc, #180]	; (800ac1c <xTaskPriorityDisinherit+0xcc>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d009      	beq.n	800ab84 <xTaskPriorityDisinherit+0x34>
 800ab70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab74:	f383 8811 	msr	BASEPRI, r3
 800ab78:	f3bf 8f6f 	isb	sy
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	60fb      	str	r3, [r7, #12]
 800ab82:	e7fe      	b.n	800ab82 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d109      	bne.n	800aba0 <xTaskPriorityDisinherit+0x50>
 800ab8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab90:	f383 8811 	msr	BASEPRI, r3
 800ab94:	f3bf 8f6f 	isb	sy
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	60bb      	str	r3, [r7, #8]
 800ab9e:	e7fe      	b.n	800ab9e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aba4:	1e5a      	subs	r2, r3, #1
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d02c      	beq.n	800ac10 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d128      	bne.n	800ac10 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	3304      	adds	r3, #4
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fe faa2 	bl	800910c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe0:	4b0f      	ldr	r3, [pc, #60]	; (800ac20 <xTaskPriorityDisinherit+0xd0>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d903      	bls.n	800abf0 <xTaskPriorityDisinherit+0xa0>
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abec:	4a0c      	ldr	r2, [pc, #48]	; (800ac20 <xTaskPriorityDisinherit+0xd0>)
 800abee:	6013      	str	r3, [r2, #0]
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abf4:	4613      	mov	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	4413      	add	r3, r2
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	4a09      	ldr	r2, [pc, #36]	; (800ac24 <xTaskPriorityDisinherit+0xd4>)
 800abfe:	441a      	add	r2, r3
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	3304      	adds	r3, #4
 800ac04:	4619      	mov	r1, r3
 800ac06:	4610      	mov	r0, r2
 800ac08:	f7fe fa23 	bl	8009052 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac10:	697b      	ldr	r3, [r7, #20]
	}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3718      	adds	r7, #24
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	20000814 	.word	0x20000814
 800ac20:	20000cf0 	.word	0x20000cf0
 800ac24:	20000818 	.word	0x20000818

0800ac28 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ac32:	4b21      	ldr	r3, [pc, #132]	; (800acb8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac38:	4b20      	ldr	r3, [pc, #128]	; (800acbc <prvAddCurrentTaskToDelayedList+0x94>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3304      	adds	r3, #4
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fe fa64 	bl	800910c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4a:	d10a      	bne.n	800ac62 <prvAddCurrentTaskToDelayedList+0x3a>
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d007      	beq.n	800ac62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac52:	4b1a      	ldr	r3, [pc, #104]	; (800acbc <prvAddCurrentTaskToDelayedList+0x94>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3304      	adds	r3, #4
 800ac58:	4619      	mov	r1, r3
 800ac5a:	4819      	ldr	r0, [pc, #100]	; (800acc0 <prvAddCurrentTaskToDelayedList+0x98>)
 800ac5c:	f7fe f9f9 	bl	8009052 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac60:	e026      	b.n	800acb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ac62:	68fa      	ldr	r2, [r7, #12]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4413      	add	r3, r2
 800ac68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac6a:	4b14      	ldr	r3, [pc, #80]	; (800acbc <prvAddCurrentTaskToDelayedList+0x94>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac72:	68ba      	ldr	r2, [r7, #8]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d209      	bcs.n	800ac8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac7a:	4b12      	ldr	r3, [pc, #72]	; (800acc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	4b0f      	ldr	r3, [pc, #60]	; (800acbc <prvAddCurrentTaskToDelayedList+0x94>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	3304      	adds	r3, #4
 800ac84:	4619      	mov	r1, r3
 800ac86:	4610      	mov	r0, r2
 800ac88:	f7fe fa07 	bl	800909a <vListInsert>
}
 800ac8c:	e010      	b.n	800acb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac8e:	4b0e      	ldr	r3, [pc, #56]	; (800acc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	4b0a      	ldr	r3, [pc, #40]	; (800acbc <prvAddCurrentTaskToDelayedList+0x94>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	3304      	adds	r3, #4
 800ac98:	4619      	mov	r1, r3
 800ac9a:	4610      	mov	r0, r2
 800ac9c:	f7fe f9fd 	bl	800909a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aca0:	4b0a      	ldr	r3, [pc, #40]	; (800accc <prvAddCurrentTaskToDelayedList+0xa4>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	68ba      	ldr	r2, [r7, #8]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d202      	bcs.n	800acb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800acaa:	4a08      	ldr	r2, [pc, #32]	; (800accc <prvAddCurrentTaskToDelayedList+0xa4>)
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	6013      	str	r3, [r2, #0]
}
 800acb0:	bf00      	nop
 800acb2:	3710      	adds	r7, #16
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	20000cec 	.word	0x20000cec
 800acbc:	20000814 	.word	0x20000814
 800acc0:	20000cd4 	.word	0x20000cd4
 800acc4:	20000ca4 	.word	0x20000ca4
 800acc8:	20000ca0 	.word	0x20000ca0
 800accc:	20000d08 	.word	0x20000d08

0800acd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b08a      	sub	sp, #40	; 0x28
 800acd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800acd6:	2300      	movs	r3, #0
 800acd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800acda:	f000 faff 	bl	800b2dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800acde:	4b1c      	ldr	r3, [pc, #112]	; (800ad50 <xTimerCreateTimerTask+0x80>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d021      	beq.n	800ad2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ace6:	2300      	movs	r3, #0
 800ace8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800acea:	2300      	movs	r3, #0
 800acec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800acee:	1d3a      	adds	r2, r7, #4
 800acf0:	f107 0108 	add.w	r1, r7, #8
 800acf4:	f107 030c 	add.w	r3, r7, #12
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7fe f963 	bl	8008fc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800acfe:	6879      	ldr	r1, [r7, #4]
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	9202      	str	r2, [sp, #8]
 800ad06:	9301      	str	r3, [sp, #4]
 800ad08:	2302      	movs	r3, #2
 800ad0a:	9300      	str	r3, [sp, #0]
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	460a      	mov	r2, r1
 800ad10:	4910      	ldr	r1, [pc, #64]	; (800ad54 <xTimerCreateTimerTask+0x84>)
 800ad12:	4811      	ldr	r0, [pc, #68]	; (800ad58 <xTimerCreateTimerTask+0x88>)
 800ad14:	f7fe ffb6 	bl	8009c84 <xTaskCreateStatic>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	4b10      	ldr	r3, [pc, #64]	; (800ad5c <xTimerCreateTimerTask+0x8c>)
 800ad1c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ad1e:	4b0f      	ldr	r3, [pc, #60]	; (800ad5c <xTimerCreateTimerTask+0x8c>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d001      	beq.n	800ad2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ad26:	2301      	movs	r3, #1
 800ad28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d109      	bne.n	800ad44 <xTimerCreateTimerTask+0x74>
 800ad30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad34:	f383 8811 	msr	BASEPRI, r3
 800ad38:	f3bf 8f6f 	isb	sy
 800ad3c:	f3bf 8f4f 	dsb	sy
 800ad40:	613b      	str	r3, [r7, #16]
 800ad42:	e7fe      	b.n	800ad42 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800ad44:	697b      	ldr	r3, [r7, #20]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3718      	adds	r7, #24
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	20000d44 	.word	0x20000d44
 800ad54:	0800c5fc 	.word	0x0800c5fc
 800ad58:	0800ae91 	.word	0x0800ae91
 800ad5c:	20000d48 	.word	0x20000d48

0800ad60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b08a      	sub	sp, #40	; 0x28
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
 800ad6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d109      	bne.n	800ad8c <xTimerGenericCommand+0x2c>
 800ad78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7c:	f383 8811 	msr	BASEPRI, r3
 800ad80:	f3bf 8f6f 	isb	sy
 800ad84:	f3bf 8f4f 	dsb	sy
 800ad88:	623b      	str	r3, [r7, #32]
 800ad8a:	e7fe      	b.n	800ad8a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ad8c:	4b19      	ldr	r3, [pc, #100]	; (800adf4 <xTimerGenericCommand+0x94>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d02a      	beq.n	800adea <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	2b05      	cmp	r3, #5
 800ada4:	dc18      	bgt.n	800add8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ada6:	f7ff feb5 	bl	800ab14 <xTaskGetSchedulerState>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b02      	cmp	r3, #2
 800adae:	d109      	bne.n	800adc4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800adb0:	4b10      	ldr	r3, [pc, #64]	; (800adf4 <xTimerGenericCommand+0x94>)
 800adb2:	6818      	ldr	r0, [r3, #0]
 800adb4:	f107 0110 	add.w	r1, r7, #16
 800adb8:	2300      	movs	r3, #0
 800adba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adbc:	f7fe fb0e 	bl	80093dc <xQueueGenericSend>
 800adc0:	6278      	str	r0, [r7, #36]	; 0x24
 800adc2:	e012      	b.n	800adea <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800adc4:	4b0b      	ldr	r3, [pc, #44]	; (800adf4 <xTimerGenericCommand+0x94>)
 800adc6:	6818      	ldr	r0, [r3, #0]
 800adc8:	f107 0110 	add.w	r1, r7, #16
 800adcc:	2300      	movs	r3, #0
 800adce:	2200      	movs	r2, #0
 800add0:	f7fe fb04 	bl	80093dc <xQueueGenericSend>
 800add4:	6278      	str	r0, [r7, #36]	; 0x24
 800add6:	e008      	b.n	800adea <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800add8:	4b06      	ldr	r3, [pc, #24]	; (800adf4 <xTimerGenericCommand+0x94>)
 800adda:	6818      	ldr	r0, [r3, #0]
 800addc:	f107 0110 	add.w	r1, r7, #16
 800ade0:	2300      	movs	r3, #0
 800ade2:	683a      	ldr	r2, [r7, #0]
 800ade4:	f7fe fbf4 	bl	80095d0 <xQueueGenericSendFromISR>
 800ade8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800adea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800adec:	4618      	mov	r0, r3
 800adee:	3728      	adds	r7, #40	; 0x28
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	20000d44 	.word	0x20000d44

0800adf8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b088      	sub	sp, #32
 800adfc:	af02      	add	r7, sp, #8
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae02:	4b22      	ldr	r3, [pc, #136]	; (800ae8c <prvProcessExpiredTimer+0x94>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	3304      	adds	r3, #4
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7fe f97b 	bl	800910c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae1c:	f003 0304 	and.w	r3, r3, #4
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d021      	beq.n	800ae68 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	699a      	ldr	r2, [r3, #24]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	18d1      	adds	r1, r2, r3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	683a      	ldr	r2, [r7, #0]
 800ae30:	6978      	ldr	r0, [r7, #20]
 800ae32:	f000 f8d1 	bl	800afd8 <prvInsertTimerInActiveList>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d01e      	beq.n	800ae7a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	2300      	movs	r3, #0
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	2100      	movs	r1, #0
 800ae46:	6978      	ldr	r0, [r7, #20]
 800ae48:	f7ff ff8a 	bl	800ad60 <xTimerGenericCommand>
 800ae4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d112      	bne.n	800ae7a <prvProcessExpiredTimer+0x82>
 800ae54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae58:	f383 8811 	msr	BASEPRI, r3
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	60fb      	str	r3, [r7, #12]
 800ae66:	e7fe      	b.n	800ae66 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae6e:	f023 0301 	bic.w	r3, r3, #1
 800ae72:	b2da      	uxtb	r2, r3
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	6a1b      	ldr	r3, [r3, #32]
 800ae7e:	6978      	ldr	r0, [r7, #20]
 800ae80:	4798      	blx	r3
}
 800ae82:	bf00      	nop
 800ae84:	3718      	adds	r7, #24
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	20000d3c 	.word	0x20000d3c

0800ae90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae98:	f107 0308 	add.w	r3, r7, #8
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 f857 	bl	800af50 <prvGetNextExpireTime>
 800aea2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	4619      	mov	r1, r3
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f000 f803 	bl	800aeb4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aeae:	f000 f8d5 	bl	800b05c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aeb2:	e7f1      	b.n	800ae98 <prvTimerTask+0x8>

0800aeb4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aebe:	f7ff f991 	bl	800a1e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aec2:	f107 0308 	add.w	r3, r7, #8
 800aec6:	4618      	mov	r0, r3
 800aec8:	f000 f866 	bl	800af98 <prvSampleTimeNow>
 800aecc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d130      	bne.n	800af36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d10a      	bne.n	800aef0 <prvProcessTimerOrBlockTask+0x3c>
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d806      	bhi.n	800aef0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aee2:	f7ff f9c5 	bl	800a270 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aee6:	68f9      	ldr	r1, [r7, #12]
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f7ff ff85 	bl	800adf8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aeee:	e024      	b.n	800af3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d008      	beq.n	800af08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aef6:	4b13      	ldr	r3, [pc, #76]	; (800af44 <prvProcessTimerOrBlockTask+0x90>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d101      	bne.n	800af04 <prvProcessTimerOrBlockTask+0x50>
 800af00:	2301      	movs	r3, #1
 800af02:	e000      	b.n	800af06 <prvProcessTimerOrBlockTask+0x52>
 800af04:	2300      	movs	r3, #0
 800af06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af08:	4b0f      	ldr	r3, [pc, #60]	; (800af48 <prvProcessTimerOrBlockTask+0x94>)
 800af0a:	6818      	ldr	r0, [r3, #0]
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	683a      	ldr	r2, [r7, #0]
 800af14:	4619      	mov	r1, r3
 800af16:	f7fe fe81 	bl	8009c1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af1a:	f7ff f9a9 	bl	800a270 <xTaskResumeAll>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d10a      	bne.n	800af3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af24:	4b09      	ldr	r3, [pc, #36]	; (800af4c <prvProcessTimerOrBlockTask+0x98>)
 800af26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af2a:	601a      	str	r2, [r3, #0]
 800af2c:	f3bf 8f4f 	dsb	sy
 800af30:	f3bf 8f6f 	isb	sy
}
 800af34:	e001      	b.n	800af3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800af36:	f7ff f99b 	bl	800a270 <xTaskResumeAll>
}
 800af3a:	bf00      	nop
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	20000d40 	.word	0x20000d40
 800af48:	20000d44 	.word	0x20000d44
 800af4c:	e000ed04 	.word	0xe000ed04

0800af50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800af50:	b480      	push	{r7}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800af58:	4b0e      	ldr	r3, [pc, #56]	; (800af94 <prvGetNextExpireTime+0x44>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d101      	bne.n	800af66 <prvGetNextExpireTime+0x16>
 800af62:	2201      	movs	r2, #1
 800af64:	e000      	b.n	800af68 <prvGetNextExpireTime+0x18>
 800af66:	2200      	movs	r2, #0
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d105      	bne.n	800af80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af74:	4b07      	ldr	r3, [pc, #28]	; (800af94 <prvGetNextExpireTime+0x44>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	60fb      	str	r3, [r7, #12]
 800af7e:	e001      	b.n	800af84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800af80:	2300      	movs	r3, #0
 800af82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800af84:	68fb      	ldr	r3, [r7, #12]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3714      	adds	r7, #20
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	20000d3c 	.word	0x20000d3c

0800af98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800afa0:	f7ff fa02 	bl	800a3a8 <xTaskGetTickCount>
 800afa4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800afa6:	4b0b      	ldr	r3, [pc, #44]	; (800afd4 <prvSampleTimeNow+0x3c>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	429a      	cmp	r2, r3
 800afae:	d205      	bcs.n	800afbc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800afb0:	f000 f930 	bl	800b214 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2201      	movs	r2, #1
 800afb8:	601a      	str	r2, [r3, #0]
 800afba:	e002      	b.n	800afc2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800afc2:	4a04      	ldr	r2, [pc, #16]	; (800afd4 <prvSampleTimeNow+0x3c>)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800afc8:	68fb      	ldr	r3, [r7, #12]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	20000d4c 	.word	0x20000d4c

0800afd8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b086      	sub	sp, #24
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
 800afe4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800afe6:	2300      	movs	r3, #0
 800afe8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aff6:	68ba      	ldr	r2, [r7, #8]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	429a      	cmp	r2, r3
 800affc:	d812      	bhi.n	800b024 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	1ad2      	subs	r2, r2, r3
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d302      	bcc.n	800b012 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b00c:	2301      	movs	r3, #1
 800b00e:	617b      	str	r3, [r7, #20]
 800b010:	e01b      	b.n	800b04a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b012:	4b10      	ldr	r3, [pc, #64]	; (800b054 <prvInsertTimerInActiveList+0x7c>)
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	3304      	adds	r3, #4
 800b01a:	4619      	mov	r1, r3
 800b01c:	4610      	mov	r0, r2
 800b01e:	f7fe f83c 	bl	800909a <vListInsert>
 800b022:	e012      	b.n	800b04a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d206      	bcs.n	800b03a <prvInsertTimerInActiveList+0x62>
 800b02c:	68ba      	ldr	r2, [r7, #8]
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	429a      	cmp	r2, r3
 800b032:	d302      	bcc.n	800b03a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b034:	2301      	movs	r3, #1
 800b036:	617b      	str	r3, [r7, #20]
 800b038:	e007      	b.n	800b04a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b03a:	4b07      	ldr	r3, [pc, #28]	; (800b058 <prvInsertTimerInActiveList+0x80>)
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	3304      	adds	r3, #4
 800b042:	4619      	mov	r1, r3
 800b044:	4610      	mov	r0, r2
 800b046:	f7fe f828 	bl	800909a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b04a:	697b      	ldr	r3, [r7, #20]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3718      	adds	r7, #24
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	20000d40 	.word	0x20000d40
 800b058:	20000d3c 	.word	0x20000d3c

0800b05c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b08e      	sub	sp, #56	; 0x38
 800b060:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b062:	e0c6      	b.n	800b1f2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2b00      	cmp	r3, #0
 800b068:	da17      	bge.n	800b09a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b06a:	1d3b      	adds	r3, r7, #4
 800b06c:	3304      	adds	r3, #4
 800b06e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b072:	2b00      	cmp	r3, #0
 800b074:	d109      	bne.n	800b08a <prvProcessReceivedCommands+0x2e>
 800b076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07a:	f383 8811 	msr	BASEPRI, r3
 800b07e:	f3bf 8f6f 	isb	sy
 800b082:	f3bf 8f4f 	dsb	sy
 800b086:	61fb      	str	r3, [r7, #28]
 800b088:	e7fe      	b.n	800b088 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b090:	6850      	ldr	r0, [r2, #4]
 800b092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b094:	6892      	ldr	r2, [r2, #8]
 800b096:	4611      	mov	r1, r2
 800b098:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f2c0 80a7 	blt.w	800b1f0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a8:	695b      	ldr	r3, [r3, #20]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d004      	beq.n	800b0b8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b0:	3304      	adds	r3, #4
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7fe f82a 	bl	800910c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b0b8:	463b      	mov	r3, r7
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7ff ff6c 	bl	800af98 <prvSampleTimeNow>
 800b0c0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2b09      	cmp	r3, #9
 800b0c6:	f200 8094 	bhi.w	800b1f2 <prvProcessReceivedCommands+0x196>
 800b0ca:	a201      	add	r2, pc, #4	; (adr r2, 800b0d0 <prvProcessReceivedCommands+0x74>)
 800b0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d0:	0800b0f9 	.word	0x0800b0f9
 800b0d4:	0800b0f9 	.word	0x0800b0f9
 800b0d8:	0800b0f9 	.word	0x0800b0f9
 800b0dc:	0800b16b 	.word	0x0800b16b
 800b0e0:	0800b17f 	.word	0x0800b17f
 800b0e4:	0800b1c7 	.word	0x0800b1c7
 800b0e8:	0800b0f9 	.word	0x0800b0f9
 800b0ec:	0800b0f9 	.word	0x0800b0f9
 800b0f0:	0800b16b 	.word	0x0800b16b
 800b0f4:	0800b17f 	.word	0x0800b17f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0fe:	f043 0301 	orr.w	r3, r3, #1
 800b102:	b2da      	uxtb	r2, r3
 800b104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b106:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b10a:	68ba      	ldr	r2, [r7, #8]
 800b10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	18d1      	adds	r1, r2, r3
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b118:	f7ff ff5e 	bl	800afd8 <prvInsertTimerInActiveList>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d067      	beq.n	800b1f2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b124:	6a1b      	ldr	r3, [r3, #32]
 800b126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b128:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b130:	f003 0304 	and.w	r3, r3, #4
 800b134:	2b00      	cmp	r3, #0
 800b136:	d05c      	beq.n	800b1f2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b138:	68ba      	ldr	r2, [r7, #8]
 800b13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13c:	699b      	ldr	r3, [r3, #24]
 800b13e:	441a      	add	r2, r3
 800b140:	2300      	movs	r3, #0
 800b142:	9300      	str	r3, [sp, #0]
 800b144:	2300      	movs	r3, #0
 800b146:	2100      	movs	r1, #0
 800b148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b14a:	f7ff fe09 	bl	800ad60 <xTimerGenericCommand>
 800b14e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b150:	6a3b      	ldr	r3, [r7, #32]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d14d      	bne.n	800b1f2 <prvProcessReceivedCommands+0x196>
 800b156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15a:	f383 8811 	msr	BASEPRI, r3
 800b15e:	f3bf 8f6f 	isb	sy
 800b162:	f3bf 8f4f 	dsb	sy
 800b166:	61bb      	str	r3, [r7, #24]
 800b168:	e7fe      	b.n	800b168 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b170:	f023 0301 	bic.w	r3, r3, #1
 800b174:	b2da      	uxtb	r2, r3
 800b176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b178:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b17c:	e039      	b.n	800b1f2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b180:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b184:	f043 0301 	orr.w	r3, r3, #1
 800b188:	b2da      	uxtb	r2, r3
 800b18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b190:	68ba      	ldr	r2, [r7, #8]
 800b192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b194:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b198:	699b      	ldr	r3, [r3, #24]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d109      	bne.n	800b1b2 <prvProcessReceivedCommands+0x156>
 800b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	617b      	str	r3, [r7, #20]
 800b1b0:	e7fe      	b.n	800b1b0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b4:	699a      	ldr	r2, [r3, #24]
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b8:	18d1      	adds	r1, r2, r3
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1c0:	f7ff ff0a 	bl	800afd8 <prvInsertTimerInActiveList>
					break;
 800b1c4:	e015      	b.n	800b1f2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1cc:	f003 0302 	and.w	r3, r3, #2
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d103      	bne.n	800b1dc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800b1d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1d6:	f000 fca9 	bl	800bb2c <vPortFree>
 800b1da:	e00a      	b.n	800b1f2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1e2:	f023 0301 	bic.w	r3, r3, #1
 800b1e6:	b2da      	uxtb	r2, r3
 800b1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b1ee:	e000      	b.n	800b1f2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b1f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1f2:	4b07      	ldr	r3, [pc, #28]	; (800b210 <prvProcessReceivedCommands+0x1b4>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	1d39      	adds	r1, r7, #4
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fe fa7c 	bl	80096f8 <xQueueReceive>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	f47f af2e 	bne.w	800b064 <prvProcessReceivedCommands+0x8>
	}
}
 800b208:	bf00      	nop
 800b20a:	3730      	adds	r7, #48	; 0x30
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	20000d44 	.word	0x20000d44

0800b214 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b088      	sub	sp, #32
 800b218:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b21a:	e047      	b.n	800b2ac <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b21c:	4b2d      	ldr	r3, [pc, #180]	; (800b2d4 <prvSwitchTimerLists+0xc0>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68db      	ldr	r3, [r3, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b226:	4b2b      	ldr	r3, [pc, #172]	; (800b2d4 <prvSwitchTimerLists+0xc0>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	3304      	adds	r3, #4
 800b234:	4618      	mov	r0, r3
 800b236:	f7fd ff69 	bl	800910c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	6a1b      	ldr	r3, [r3, #32]
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b248:	f003 0304 	and.w	r3, r3, #4
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d02d      	beq.n	800b2ac <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	699b      	ldr	r3, [r3, #24]
 800b254:	693a      	ldr	r2, [r7, #16]
 800b256:	4413      	add	r3, r2
 800b258:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b25a:	68ba      	ldr	r2, [r7, #8]
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d90e      	bls.n	800b280 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b26e:	4b19      	ldr	r3, [pc, #100]	; (800b2d4 <prvSwitchTimerLists+0xc0>)
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	3304      	adds	r3, #4
 800b276:	4619      	mov	r1, r3
 800b278:	4610      	mov	r0, r2
 800b27a:	f7fd ff0e 	bl	800909a <vListInsert>
 800b27e:	e015      	b.n	800b2ac <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b280:	2300      	movs	r3, #0
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	2300      	movs	r3, #0
 800b286:	693a      	ldr	r2, [r7, #16]
 800b288:	2100      	movs	r1, #0
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	f7ff fd68 	bl	800ad60 <xTimerGenericCommand>
 800b290:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d109      	bne.n	800b2ac <prvSwitchTimerLists+0x98>
 800b298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	603b      	str	r3, [r7, #0]
 800b2aa:	e7fe      	b.n	800b2aa <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b2ac:	4b09      	ldr	r3, [pc, #36]	; (800b2d4 <prvSwitchTimerLists+0xc0>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1b2      	bne.n	800b21c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b2b6:	4b07      	ldr	r3, [pc, #28]	; (800b2d4 <prvSwitchTimerLists+0xc0>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b2bc:	4b06      	ldr	r3, [pc, #24]	; (800b2d8 <prvSwitchTimerLists+0xc4>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a04      	ldr	r2, [pc, #16]	; (800b2d4 <prvSwitchTimerLists+0xc0>)
 800b2c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b2c4:	4a04      	ldr	r2, [pc, #16]	; (800b2d8 <prvSwitchTimerLists+0xc4>)
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	6013      	str	r3, [r2, #0]
}
 800b2ca:	bf00      	nop
 800b2cc:	3718      	adds	r7, #24
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	20000d3c 	.word	0x20000d3c
 800b2d8:	20000d40 	.word	0x20000d40

0800b2dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b2e2:	f000 f963 	bl	800b5ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b2e6:	4b15      	ldr	r3, [pc, #84]	; (800b33c <prvCheckForValidListAndQueue+0x60>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d120      	bne.n	800b330 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b2ee:	4814      	ldr	r0, [pc, #80]	; (800b340 <prvCheckForValidListAndQueue+0x64>)
 800b2f0:	f7fd fe82 	bl	8008ff8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b2f4:	4813      	ldr	r0, [pc, #76]	; (800b344 <prvCheckForValidListAndQueue+0x68>)
 800b2f6:	f7fd fe7f 	bl	8008ff8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b2fa:	4b13      	ldr	r3, [pc, #76]	; (800b348 <prvCheckForValidListAndQueue+0x6c>)
 800b2fc:	4a10      	ldr	r2, [pc, #64]	; (800b340 <prvCheckForValidListAndQueue+0x64>)
 800b2fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b300:	4b12      	ldr	r3, [pc, #72]	; (800b34c <prvCheckForValidListAndQueue+0x70>)
 800b302:	4a10      	ldr	r2, [pc, #64]	; (800b344 <prvCheckForValidListAndQueue+0x68>)
 800b304:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b306:	2300      	movs	r3, #0
 800b308:	9300      	str	r3, [sp, #0]
 800b30a:	4b11      	ldr	r3, [pc, #68]	; (800b350 <prvCheckForValidListAndQueue+0x74>)
 800b30c:	4a11      	ldr	r2, [pc, #68]	; (800b354 <prvCheckForValidListAndQueue+0x78>)
 800b30e:	2110      	movs	r1, #16
 800b310:	200a      	movs	r0, #10
 800b312:	f7fd ff8d 	bl	8009230 <xQueueGenericCreateStatic>
 800b316:	4602      	mov	r2, r0
 800b318:	4b08      	ldr	r3, [pc, #32]	; (800b33c <prvCheckForValidListAndQueue+0x60>)
 800b31a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b31c:	4b07      	ldr	r3, [pc, #28]	; (800b33c <prvCheckForValidListAndQueue+0x60>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d005      	beq.n	800b330 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b324:	4b05      	ldr	r3, [pc, #20]	; (800b33c <prvCheckForValidListAndQueue+0x60>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	490b      	ldr	r1, [pc, #44]	; (800b358 <prvCheckForValidListAndQueue+0x7c>)
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7fe fc4e 	bl	8009bcc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b330:	f000 f96a 	bl	800b608 <vPortExitCritical>
}
 800b334:	bf00      	nop
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	20000d44 	.word	0x20000d44
 800b340:	20000d14 	.word	0x20000d14
 800b344:	20000d28 	.word	0x20000d28
 800b348:	20000d3c 	.word	0x20000d3c
 800b34c:	20000d40 	.word	0x20000d40
 800b350:	20000df0 	.word	0x20000df0
 800b354:	20000d50 	.word	0x20000d50
 800b358:	0800c604 	.word	0x0800c604

0800b35c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	3b04      	subs	r3, #4
 800b36c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b374:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	3b04      	subs	r3, #4
 800b37a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	f023 0201 	bic.w	r2, r3, #1
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	3b04      	subs	r3, #4
 800b38a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b38c:	4a0c      	ldr	r2, [pc, #48]	; (800b3c0 <pxPortInitialiseStack+0x64>)
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	3b14      	subs	r3, #20
 800b396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	3b04      	subs	r3, #4
 800b3a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f06f 0202 	mvn.w	r2, #2
 800b3aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	3b20      	subs	r3, #32
 800b3b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3714      	adds	r7, #20
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr
 800b3c0:	0800b3c5 	.word	0x0800b3c5

0800b3c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b085      	sub	sp, #20
 800b3c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b3ce:	4b11      	ldr	r3, [pc, #68]	; (800b414 <prvTaskExitError+0x50>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3d6:	d009      	beq.n	800b3ec <prvTaskExitError+0x28>
 800b3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3dc:	f383 8811 	msr	BASEPRI, r3
 800b3e0:	f3bf 8f6f 	isb	sy
 800b3e4:	f3bf 8f4f 	dsb	sy
 800b3e8:	60fb      	str	r3, [r7, #12]
 800b3ea:	e7fe      	b.n	800b3ea <prvTaskExitError+0x26>
 800b3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f0:	f383 8811 	msr	BASEPRI, r3
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b3fe:	bf00      	nop
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d0fc      	beq.n	800b400 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b406:	bf00      	nop
 800b408:	3714      	adds	r7, #20
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	200000cc 	.word	0x200000cc
	...

0800b420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b420:	4b07      	ldr	r3, [pc, #28]	; (800b440 <pxCurrentTCBConst2>)
 800b422:	6819      	ldr	r1, [r3, #0]
 800b424:	6808      	ldr	r0, [r1, #0]
 800b426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b42a:	f380 8809 	msr	PSP, r0
 800b42e:	f3bf 8f6f 	isb	sy
 800b432:	f04f 0000 	mov.w	r0, #0
 800b436:	f380 8811 	msr	BASEPRI, r0
 800b43a:	4770      	bx	lr
 800b43c:	f3af 8000 	nop.w

0800b440 <pxCurrentTCBConst2>:
 800b440:	20000814 	.word	0x20000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b444:	bf00      	nop
 800b446:	bf00      	nop

0800b448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b448:	4808      	ldr	r0, [pc, #32]	; (800b46c <prvPortStartFirstTask+0x24>)
 800b44a:	6800      	ldr	r0, [r0, #0]
 800b44c:	6800      	ldr	r0, [r0, #0]
 800b44e:	f380 8808 	msr	MSP, r0
 800b452:	f04f 0000 	mov.w	r0, #0
 800b456:	f380 8814 	msr	CONTROL, r0
 800b45a:	b662      	cpsie	i
 800b45c:	b661      	cpsie	f
 800b45e:	f3bf 8f4f 	dsb	sy
 800b462:	f3bf 8f6f 	isb	sy
 800b466:	df00      	svc	0
 800b468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b46a:	bf00      	nop
 800b46c:	e000ed08 	.word	0xe000ed08

0800b470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b086      	sub	sp, #24
 800b474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b476:	4b44      	ldr	r3, [pc, #272]	; (800b588 <xPortStartScheduler+0x118>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a44      	ldr	r2, [pc, #272]	; (800b58c <xPortStartScheduler+0x11c>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d109      	bne.n	800b494 <xPortStartScheduler+0x24>
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	613b      	str	r3, [r7, #16]
 800b492:	e7fe      	b.n	800b492 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b494:	4b3c      	ldr	r3, [pc, #240]	; (800b588 <xPortStartScheduler+0x118>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a3d      	ldr	r2, [pc, #244]	; (800b590 <xPortStartScheduler+0x120>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d109      	bne.n	800b4b2 <xPortStartScheduler+0x42>
 800b49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a2:	f383 8811 	msr	BASEPRI, r3
 800b4a6:	f3bf 8f6f 	isb	sy
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	60fb      	str	r3, [r7, #12]
 800b4b0:	e7fe      	b.n	800b4b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b4b2:	4b38      	ldr	r3, [pc, #224]	; (800b594 <xPortStartScheduler+0x124>)
 800b4b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	22ff      	movs	r2, #255	; 0xff
 800b4c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b4cc:	78fb      	ldrb	r3, [r7, #3]
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b4d4:	b2da      	uxtb	r2, r3
 800b4d6:	4b30      	ldr	r3, [pc, #192]	; (800b598 <xPortStartScheduler+0x128>)
 800b4d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b4da:	4b30      	ldr	r3, [pc, #192]	; (800b59c <xPortStartScheduler+0x12c>)
 800b4dc:	2207      	movs	r2, #7
 800b4de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4e0:	e009      	b.n	800b4f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b4e2:	4b2e      	ldr	r3, [pc, #184]	; (800b59c <xPortStartScheduler+0x12c>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	3b01      	subs	r3, #1
 800b4e8:	4a2c      	ldr	r2, [pc, #176]	; (800b59c <xPortStartScheduler+0x12c>)
 800b4ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b4ec:	78fb      	ldrb	r3, [r7, #3]
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	005b      	lsls	r3, r3, #1
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4f6:	78fb      	ldrb	r3, [r7, #3]
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4fe:	2b80      	cmp	r3, #128	; 0x80
 800b500:	d0ef      	beq.n	800b4e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b502:	4b26      	ldr	r3, [pc, #152]	; (800b59c <xPortStartScheduler+0x12c>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f1c3 0307 	rsb	r3, r3, #7
 800b50a:	2b04      	cmp	r3, #4
 800b50c:	d009      	beq.n	800b522 <xPortStartScheduler+0xb2>
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	60bb      	str	r3, [r7, #8]
 800b520:	e7fe      	b.n	800b520 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b522:	4b1e      	ldr	r3, [pc, #120]	; (800b59c <xPortStartScheduler+0x12c>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	021b      	lsls	r3, r3, #8
 800b528:	4a1c      	ldr	r2, [pc, #112]	; (800b59c <xPortStartScheduler+0x12c>)
 800b52a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b52c:	4b1b      	ldr	r3, [pc, #108]	; (800b59c <xPortStartScheduler+0x12c>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b534:	4a19      	ldr	r2, [pc, #100]	; (800b59c <xPortStartScheduler+0x12c>)
 800b536:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	b2da      	uxtb	r2, r3
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b540:	4b17      	ldr	r3, [pc, #92]	; (800b5a0 <xPortStartScheduler+0x130>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a16      	ldr	r2, [pc, #88]	; (800b5a0 <xPortStartScheduler+0x130>)
 800b546:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b54a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b54c:	4b14      	ldr	r3, [pc, #80]	; (800b5a0 <xPortStartScheduler+0x130>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a13      	ldr	r2, [pc, #76]	; (800b5a0 <xPortStartScheduler+0x130>)
 800b552:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b556:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b558:	f000 f9a2 	bl	800b8a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b55c:	4b11      	ldr	r3, [pc, #68]	; (800b5a4 <xPortStartScheduler+0x134>)
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b562:	f000 f9d9 	bl	800b918 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b566:	4b10      	ldr	r3, [pc, #64]	; (800b5a8 <xPortStartScheduler+0x138>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a0f      	ldr	r2, [pc, #60]	; (800b5a8 <xPortStartScheduler+0x138>)
 800b56c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b570:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b572:	f7ff ff69 	bl	800b448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b576:	f7ff f817 	bl	800a5a8 <vTaskSwitchContext>
	prvTaskExitError();
 800b57a:	f7ff ff23 	bl	800b3c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b57e:	2300      	movs	r3, #0
}
 800b580:	4618      	mov	r0, r3
 800b582:	3718      	adds	r7, #24
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}
 800b588:	e000ed00 	.word	0xe000ed00
 800b58c:	410fc271 	.word	0x410fc271
 800b590:	410fc270 	.word	0x410fc270
 800b594:	e000e400 	.word	0xe000e400
 800b598:	20000e4c 	.word	0x20000e4c
 800b59c:	20000e50 	.word	0x20000e50
 800b5a0:	e000ed20 	.word	0xe000ed20
 800b5a4:	200000cc 	.word	0x200000cc
 800b5a8:	e000ef34 	.word	0xe000ef34

0800b5ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b6:	f383 8811 	msr	BASEPRI, r3
 800b5ba:	f3bf 8f6f 	isb	sy
 800b5be:	f3bf 8f4f 	dsb	sy
 800b5c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b5c4:	4b0e      	ldr	r3, [pc, #56]	; (800b600 <vPortEnterCritical+0x54>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	4a0d      	ldr	r2, [pc, #52]	; (800b600 <vPortEnterCritical+0x54>)
 800b5cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b5ce:	4b0c      	ldr	r3, [pc, #48]	; (800b600 <vPortEnterCritical+0x54>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d10e      	bne.n	800b5f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b5d6:	4b0b      	ldr	r3, [pc, #44]	; (800b604 <vPortEnterCritical+0x58>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d009      	beq.n	800b5f4 <vPortEnterCritical+0x48>
 800b5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e4:	f383 8811 	msr	BASEPRI, r3
 800b5e8:	f3bf 8f6f 	isb	sy
 800b5ec:	f3bf 8f4f 	dsb	sy
 800b5f0:	603b      	str	r3, [r7, #0]
 800b5f2:	e7fe      	b.n	800b5f2 <vPortEnterCritical+0x46>
	}
}
 800b5f4:	bf00      	nop
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr
 800b600:	200000cc 	.word	0x200000cc
 800b604:	e000ed04 	.word	0xe000ed04

0800b608 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b60e:	4b11      	ldr	r3, [pc, #68]	; (800b654 <vPortExitCritical+0x4c>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d109      	bne.n	800b62a <vPortExitCritical+0x22>
 800b616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61a:	f383 8811 	msr	BASEPRI, r3
 800b61e:	f3bf 8f6f 	isb	sy
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	607b      	str	r3, [r7, #4]
 800b628:	e7fe      	b.n	800b628 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b62a:	4b0a      	ldr	r3, [pc, #40]	; (800b654 <vPortExitCritical+0x4c>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	3b01      	subs	r3, #1
 800b630:	4a08      	ldr	r2, [pc, #32]	; (800b654 <vPortExitCritical+0x4c>)
 800b632:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b634:	4b07      	ldr	r3, [pc, #28]	; (800b654 <vPortExitCritical+0x4c>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d104      	bne.n	800b646 <vPortExitCritical+0x3e>
 800b63c:	2300      	movs	r3, #0
 800b63e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b646:	bf00      	nop
 800b648:	370c      	adds	r7, #12
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	200000cc 	.word	0x200000cc
	...

0800b660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b660:	f3ef 8009 	mrs	r0, PSP
 800b664:	f3bf 8f6f 	isb	sy
 800b668:	4b15      	ldr	r3, [pc, #84]	; (800b6c0 <pxCurrentTCBConst>)
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	f01e 0f10 	tst.w	lr, #16
 800b670:	bf08      	it	eq
 800b672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b67a:	6010      	str	r0, [r2, #0]
 800b67c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b680:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b684:	f380 8811 	msr	BASEPRI, r0
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	f7fe ff8a 	bl	800a5a8 <vTaskSwitchContext>
 800b694:	f04f 0000 	mov.w	r0, #0
 800b698:	f380 8811 	msr	BASEPRI, r0
 800b69c:	bc09      	pop	{r0, r3}
 800b69e:	6819      	ldr	r1, [r3, #0]
 800b6a0:	6808      	ldr	r0, [r1, #0]
 800b6a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a6:	f01e 0f10 	tst.w	lr, #16
 800b6aa:	bf08      	it	eq
 800b6ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b6b0:	f380 8809 	msr	PSP, r0
 800b6b4:	f3bf 8f6f 	isb	sy
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop
 800b6bc:	f3af 8000 	nop.w

0800b6c0 <pxCurrentTCBConst>:
 800b6c0:	20000814 	.word	0x20000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b6c4:	bf00      	nop
 800b6c6:	bf00      	nop

0800b6c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b6e0:	f7fe feaa 	bl	800a438 <xTaskIncrementTick>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d003      	beq.n	800b6f2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b6ea:	4b06      	ldr	r3, [pc, #24]	; (800b704 <xPortSysTickHandler+0x3c>)
 800b6ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6f0:	601a      	str	r2, [r3, #0]
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b6fc:	bf00      	nop
 800b6fe:	3708      	adds	r7, #8
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	e000ed04 	.word	0xe000ed04

0800b708 <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b088      	sub	sp, #32
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	4b5d      	ldr	r3, [pc, #372]	; (800b888 <vPortSuppressTicksAndSleep+0x180>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	429a      	cmp	r2, r3
 800b718:	d902      	bls.n	800b720 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800b71a:	4b5b      	ldr	r3, [pc, #364]	; (800b888 <vPortSuppressTicksAndSleep+0x180>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800b720:	4b5a      	ldr	r3, [pc, #360]	; (800b88c <vPortSuppressTicksAndSleep+0x184>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4a59      	ldr	r2, [pc, #356]	; (800b88c <vPortSuppressTicksAndSleep+0x184>)
 800b726:	f023 0301 	bic.w	r3, r3, #1
 800b72a:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800b72c:	4b58      	ldr	r3, [pc, #352]	; (800b890 <vPortSuppressTicksAndSleep+0x188>)
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	3b01      	subs	r3, #1
 800b734:	4957      	ldr	r1, [pc, #348]	; (800b894 <vPortSuppressTicksAndSleep+0x18c>)
 800b736:	6809      	ldr	r1, [r1, #0]
 800b738:	fb01 f303 	mul.w	r3, r1, r3
 800b73c:	4413      	add	r3, r2
 800b73e:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800b740:	4b55      	ldr	r3, [pc, #340]	; (800b898 <vPortSuppressTicksAndSleep+0x190>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	69fa      	ldr	r2, [r7, #28]
 800b746:	429a      	cmp	r2, r3
 800b748:	d904      	bls.n	800b754 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800b74a:	4b53      	ldr	r3, [pc, #332]	; (800b898 <vPortSuppressTicksAndSleep+0x190>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	69fa      	ldr	r2, [r7, #28]
 800b750:	1ad3      	subs	r3, r2, r3
 800b752:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800b754:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800b756:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800b75a:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800b75e:	f7ff f8f1 	bl	800a944 <eTaskConfirmSleepModeStatus>
 800b762:	4603      	mov	r3, r0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d110      	bne.n	800b78a <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800b768:	4b49      	ldr	r3, [pc, #292]	; (800b890 <vPortSuppressTicksAndSleep+0x188>)
 800b76a:	4a4c      	ldr	r2, [pc, #304]	; (800b89c <vPortSuppressTicksAndSleep+0x194>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b770:	4b46      	ldr	r3, [pc, #280]	; (800b88c <vPortSuppressTicksAndSleep+0x184>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a45      	ldr	r2, [pc, #276]	; (800b88c <vPortSuppressTicksAndSleep+0x184>)
 800b776:	f043 0301 	orr.w	r3, r3, #1
 800b77a:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800b77c:	4b45      	ldr	r3, [pc, #276]	; (800b894 <vPortSuppressTicksAndSleep+0x18c>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4a46      	ldr	r2, [pc, #280]	; (800b89c <vPortSuppressTicksAndSleep+0x194>)
 800b782:	3b01      	subs	r3, #1
 800b784:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800b786:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800b788:	e07a      	b.n	800b880 <vPortSuppressTicksAndSleep+0x178>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800b78a:	4a44      	ldr	r2, [pc, #272]	; (800b89c <vPortSuppressTicksAndSleep+0x194>)
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b790:	4b3f      	ldr	r3, [pc, #252]	; (800b890 <vPortSuppressTicksAndSleep+0x188>)
 800b792:	2200      	movs	r2, #0
 800b794:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b796:	4b3d      	ldr	r3, [pc, #244]	; (800b88c <vPortSuppressTicksAndSleep+0x184>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a3c      	ldr	r2, [pc, #240]	; (800b88c <vPortSuppressTicksAndSleep+0x184>)
 800b79c:	f043 0301 	orr.w	r3, r3, #1
 800b7a0:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	60fb      	str	r3, [r7, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 800b7a6:	f107 030c 	add.w	r3, r7, #12
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7f4 fec6 	bl	800053c <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d004      	beq.n	800b7c0 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800b7b6:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800b7ba:	bf30      	wfi
				__asm volatile( "isb" );
 800b7bc:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 800b7c0:	1d3b      	adds	r3, r7, #4
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7f4 fec4 	bl	8000550 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800b7c8:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800b7ca:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800b7ce:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800b7d2:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800b7d4:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800b7d8:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800b7dc:	4b2b      	ldr	r3, [pc, #172]	; (800b88c <vPortSuppressTicksAndSleep+0x184>)
 800b7de:	2206      	movs	r2, #6
 800b7e0:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800b7e2:	4b2a      	ldr	r3, [pc, #168]	; (800b88c <vPortSuppressTicksAndSleep+0x184>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d01d      	beq.n	800b82a <vPortSuppressTicksAndSleep+0x122>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800b7ee:	4b29      	ldr	r3, [pc, #164]	; (800b894 <vPortSuppressTicksAndSleep+0x18c>)
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	4b27      	ldr	r3, [pc, #156]	; (800b890 <vPortSuppressTicksAndSleep+0x188>)
 800b7f4:	6819      	ldr	r1, [r3, #0]
 800b7f6:	69fb      	ldr	r3, [r7, #28]
 800b7f8:	1acb      	subs	r3, r1, r3
 800b7fa:	4413      	add	r3, r2
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800b800:	4b25      	ldr	r3, [pc, #148]	; (800b898 <vPortSuppressTicksAndSleep+0x190>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	697a      	ldr	r2, [r7, #20]
 800b806:	429a      	cmp	r2, r3
 800b808:	d304      	bcc.n	800b814 <vPortSuppressTicksAndSleep+0x10c>
 800b80a:	4b22      	ldr	r3, [pc, #136]	; (800b894 <vPortSuppressTicksAndSleep+0x18c>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	697a      	ldr	r2, [r7, #20]
 800b810:	429a      	cmp	r2, r3
 800b812:	d903      	bls.n	800b81c <vPortSuppressTicksAndSleep+0x114>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800b814:	4b1f      	ldr	r3, [pc, #124]	; (800b894 <vPortSuppressTicksAndSleep+0x18c>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	3b01      	subs	r3, #1
 800b81a:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800b81c:	4a1f      	ldr	r2, [pc, #124]	; (800b89c <vPortSuppressTicksAndSleep+0x194>)
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	3b01      	subs	r3, #1
 800b826:	61bb      	str	r3, [r7, #24]
 800b828:	e018      	b.n	800b85c <vPortSuppressTicksAndSleep+0x154>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4a19      	ldr	r2, [pc, #100]	; (800b894 <vPortSuppressTicksAndSleep+0x18c>)
 800b82e:	6812      	ldr	r2, [r2, #0]
 800b830:	fb02 f203 	mul.w	r2, r2, r3
 800b834:	4b16      	ldr	r3, [pc, #88]	; (800b890 <vPortSuppressTicksAndSleep+0x188>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	1ad3      	subs	r3, r2, r3
 800b83a:	613b      	str	r3, [r7, #16]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800b83c:	4b15      	ldr	r3, [pc, #84]	; (800b894 <vPortSuppressTicksAndSleep+0x18c>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	693a      	ldr	r2, [r7, #16]
 800b842:	fbb2 f3f3 	udiv	r3, r2, r3
 800b846:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	3301      	adds	r3, #1
 800b84c:	4a11      	ldr	r2, [pc, #68]	; (800b894 <vPortSuppressTicksAndSleep+0x18c>)
 800b84e:	6812      	ldr	r2, [r2, #0]
 800b850:	fb02 f203 	mul.w	r2, r2, r3
 800b854:	4911      	ldr	r1, [pc, #68]	; (800b89c <vPortSuppressTicksAndSleep+0x194>)
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b85c:	4b0c      	ldr	r3, [pc, #48]	; (800b890 <vPortSuppressTicksAndSleep+0x188>)
 800b85e:	2200      	movs	r2, #0
 800b860:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b862:	4b0a      	ldr	r3, [pc, #40]	; (800b88c <vPortSuppressTicksAndSleep+0x184>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a09      	ldr	r2, [pc, #36]	; (800b88c <vPortSuppressTicksAndSleep+0x184>)
 800b868:	f043 0301 	orr.w	r3, r3, #1
 800b86c:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800b86e:	69b8      	ldr	r0, [r7, #24]
 800b870:	f7fe fdbc 	bl	800a3ec <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800b874:	4b07      	ldr	r3, [pc, #28]	; (800b894 <vPortSuppressTicksAndSleep+0x18c>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a08      	ldr	r2, [pc, #32]	; (800b89c <vPortSuppressTicksAndSleep+0x194>)
 800b87a:	3b01      	subs	r3, #1
 800b87c:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800b87e:	b662      	cpsie	i
	}
 800b880:	bf00      	nop
 800b882:	3720      	adds	r7, #32
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	20000e44 	.word	0x20000e44
 800b88c:	e000e010 	.word	0xe000e010
 800b890:	e000e018 	.word	0xe000e018
 800b894:	20000e40 	.word	0x20000e40
 800b898:	20000e48 	.word	0x20000e48
 800b89c:	e000e014 	.word	0xe000e014

0800b8a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800b8a4:	4b14      	ldr	r3, [pc, #80]	; (800b8f8 <vPortSetupTimerInterrupt+0x58>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a14      	ldr	r2, [pc, #80]	; (800b8fc <vPortSetupTimerInterrupt+0x5c>)
 800b8aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b8ae:	099b      	lsrs	r3, r3, #6
 800b8b0:	4a13      	ldr	r2, [pc, #76]	; (800b900 <vPortSetupTimerInterrupt+0x60>)
 800b8b2:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800b8b4:	4b12      	ldr	r3, [pc, #72]	; (800b900 <vPortSetupTimerInterrupt+0x60>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800b8bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8c0:	4a10      	ldr	r2, [pc, #64]	; (800b904 <vPortSetupTimerInterrupt+0x64>)
 800b8c2:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800b8c4:	4b10      	ldr	r3, [pc, #64]	; (800b908 <vPortSetupTimerInterrupt+0x68>)
 800b8c6:	222d      	movs	r2, #45	; 0x2d
 800b8c8:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b8ca:	4b10      	ldr	r3, [pc, #64]	; (800b90c <vPortSetupTimerInterrupt+0x6c>)
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b8d0:	4b0f      	ldr	r3, [pc, #60]	; (800b910 <vPortSetupTimerInterrupt+0x70>)
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b8d6:	4b08      	ldr	r3, [pc, #32]	; (800b8f8 <vPortSetupTimerInterrupt+0x58>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a08      	ldr	r2, [pc, #32]	; (800b8fc <vPortSetupTimerInterrupt+0x5c>)
 800b8dc:	fba2 2303 	umull	r2, r3, r2, r3
 800b8e0:	099b      	lsrs	r3, r3, #6
 800b8e2:	4a0c      	ldr	r2, [pc, #48]	; (800b914 <vPortSetupTimerInterrupt+0x74>)
 800b8e4:	3b01      	subs	r3, #1
 800b8e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b8e8:	4b08      	ldr	r3, [pc, #32]	; (800b90c <vPortSetupTimerInterrupt+0x6c>)
 800b8ea:	2207      	movs	r2, #7
 800b8ec:	601a      	str	r2, [r3, #0]
}
 800b8ee:	bf00      	nop
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr
 800b8f8:	200000a0 	.word	0x200000a0
 800b8fc:	10624dd3 	.word	0x10624dd3
 800b900:	20000e40 	.word	0x20000e40
 800b904:	20000e44 	.word	0x20000e44
 800b908:	20000e48 	.word	0x20000e48
 800b90c:	e000e010 	.word	0xe000e010
 800b910:	e000e018 	.word	0xe000e018
 800b914:	e000e014 	.word	0xe000e014

0800b918 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b918:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b928 <vPortEnableVFP+0x10>
 800b91c:	6801      	ldr	r1, [r0, #0]
 800b91e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b922:	6001      	str	r1, [r0, #0]
 800b924:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b926:	bf00      	nop
 800b928:	e000ed88 	.word	0xe000ed88

0800b92c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b932:	f3ef 8305 	mrs	r3, IPSR
 800b936:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2b0f      	cmp	r3, #15
 800b93c:	d913      	bls.n	800b966 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b93e:	4a16      	ldr	r2, [pc, #88]	; (800b998 <vPortValidateInterruptPriority+0x6c>)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	4413      	add	r3, r2
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b948:	4b14      	ldr	r3, [pc, #80]	; (800b99c <vPortValidateInterruptPriority+0x70>)
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	7afa      	ldrb	r2, [r7, #11]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d209      	bcs.n	800b966 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b956:	f383 8811 	msr	BASEPRI, r3
 800b95a:	f3bf 8f6f 	isb	sy
 800b95e:	f3bf 8f4f 	dsb	sy
 800b962:	607b      	str	r3, [r7, #4]
 800b964:	e7fe      	b.n	800b964 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b966:	4b0e      	ldr	r3, [pc, #56]	; (800b9a0 <vPortValidateInterruptPriority+0x74>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b96e:	4b0d      	ldr	r3, [pc, #52]	; (800b9a4 <vPortValidateInterruptPriority+0x78>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	429a      	cmp	r2, r3
 800b974:	d909      	bls.n	800b98a <vPortValidateInterruptPriority+0x5e>
 800b976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97a:	f383 8811 	msr	BASEPRI, r3
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	603b      	str	r3, [r7, #0]
 800b988:	e7fe      	b.n	800b988 <vPortValidateInterruptPriority+0x5c>
	}
 800b98a:	bf00      	nop
 800b98c:	3714      	adds	r7, #20
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr
 800b996:	bf00      	nop
 800b998:	e000e3f0 	.word	0xe000e3f0
 800b99c:	20000e4c 	.word	0x20000e4c
 800b9a0:	e000ed0c 	.word	0xe000ed0c
 800b9a4:	20000e50 	.word	0x20000e50

0800b9a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b08a      	sub	sp, #40	; 0x28
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b9b4:	f7fe fc16 	bl	800a1e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b9b8:	4b57      	ldr	r3, [pc, #348]	; (800bb18 <pvPortMalloc+0x170>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d101      	bne.n	800b9c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b9c0:	f000 f90c 	bl	800bbdc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b9c4:	4b55      	ldr	r3, [pc, #340]	; (800bb1c <pvPortMalloc+0x174>)
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4013      	ands	r3, r2
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f040 808c 	bne.w	800baea <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d01c      	beq.n	800ba12 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b9d8:	2208      	movs	r2, #8
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4413      	add	r3, r2
 800b9de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f003 0307 	and.w	r3, r3, #7
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d013      	beq.n	800ba12 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f023 0307 	bic.w	r3, r3, #7
 800b9f0:	3308      	adds	r3, #8
 800b9f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f003 0307 	and.w	r3, r3, #7
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d009      	beq.n	800ba12 <pvPortMalloc+0x6a>
 800b9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba02:	f383 8811 	msr	BASEPRI, r3
 800ba06:	f3bf 8f6f 	isb	sy
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	617b      	str	r3, [r7, #20]
 800ba10:	e7fe      	b.n	800ba10 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d068      	beq.n	800baea <pvPortMalloc+0x142>
 800ba18:	4b41      	ldr	r3, [pc, #260]	; (800bb20 <pvPortMalloc+0x178>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d863      	bhi.n	800baea <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ba22:	4b40      	ldr	r3, [pc, #256]	; (800bb24 <pvPortMalloc+0x17c>)
 800ba24:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ba26:	4b3f      	ldr	r3, [pc, #252]	; (800bb24 <pvPortMalloc+0x17c>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba2c:	e004      	b.n	800ba38 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba30:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ba32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d903      	bls.n	800ba4a <pvPortMalloc+0xa2>
 800ba42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d1f1      	bne.n	800ba2e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ba4a:	4b33      	ldr	r3, [pc, #204]	; (800bb18 <pvPortMalloc+0x170>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d04a      	beq.n	800baea <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ba54:	6a3b      	ldr	r3, [r7, #32]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2208      	movs	r2, #8
 800ba5a:	4413      	add	r3, r2
 800ba5c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ba5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	6a3b      	ldr	r3, [r7, #32]
 800ba64:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ba66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba68:	685a      	ldr	r2, [r3, #4]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	1ad2      	subs	r2, r2, r3
 800ba6e:	2308      	movs	r3, #8
 800ba70:	005b      	lsls	r3, r3, #1
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d91e      	bls.n	800bab4 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ba76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	f003 0307 	and.w	r3, r3, #7
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d009      	beq.n	800ba9c <pvPortMalloc+0xf4>
 800ba88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8c:	f383 8811 	msr	BASEPRI, r3
 800ba90:	f3bf 8f6f 	isb	sy
 800ba94:	f3bf 8f4f 	dsb	sy
 800ba98:	613b      	str	r3, [r7, #16]
 800ba9a:	e7fe      	b.n	800ba9a <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9e:	685a      	ldr	r2, [r3, #4]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	1ad2      	subs	r2, r2, r3
 800baa4:	69bb      	ldr	r3, [r7, #24]
 800baa6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800baa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800baae:	69b8      	ldr	r0, [r7, #24]
 800bab0:	f000 f8f6 	bl	800bca0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bab4:	4b1a      	ldr	r3, [pc, #104]	; (800bb20 <pvPortMalloc+0x178>)
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	4a18      	ldr	r2, [pc, #96]	; (800bb20 <pvPortMalloc+0x178>)
 800bac0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bac2:	4b17      	ldr	r3, [pc, #92]	; (800bb20 <pvPortMalloc+0x178>)
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	4b18      	ldr	r3, [pc, #96]	; (800bb28 <pvPortMalloc+0x180>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d203      	bcs.n	800bad6 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bace:	4b14      	ldr	r3, [pc, #80]	; (800bb20 <pvPortMalloc+0x178>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a15      	ldr	r2, [pc, #84]	; (800bb28 <pvPortMalloc+0x180>)
 800bad4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad8:	685a      	ldr	r2, [r3, #4]
 800bada:	4b10      	ldr	r3, [pc, #64]	; (800bb1c <pvPortMalloc+0x174>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	431a      	orrs	r2, r3
 800bae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae6:	2200      	movs	r2, #0
 800bae8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800baea:	f7fe fbc1 	bl	800a270 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800baee:	69fb      	ldr	r3, [r7, #28]
 800baf0:	f003 0307 	and.w	r3, r3, #7
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d009      	beq.n	800bb0c <pvPortMalloc+0x164>
 800baf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafc:	f383 8811 	msr	BASEPRI, r3
 800bb00:	f3bf 8f6f 	isb	sy
 800bb04:	f3bf 8f4f 	dsb	sy
 800bb08:	60fb      	str	r3, [r7, #12]
 800bb0a:	e7fe      	b.n	800bb0a <pvPortMalloc+0x162>
	return pvReturn;
 800bb0c:	69fb      	ldr	r3, [r7, #28]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3728      	adds	r7, #40	; 0x28
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	20004a5c 	.word	0x20004a5c
 800bb1c:	20004a68 	.word	0x20004a68
 800bb20:	20004a60 	.word	0x20004a60
 800bb24:	20004a54 	.word	0x20004a54
 800bb28:	20004a64 	.word	0x20004a64

0800bb2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b086      	sub	sp, #24
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d046      	beq.n	800bbcc <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bb3e:	2308      	movs	r3, #8
 800bb40:	425b      	negs	r3, r3
 800bb42:	697a      	ldr	r2, [r7, #20]
 800bb44:	4413      	add	r3, r2
 800bb46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	685a      	ldr	r2, [r3, #4]
 800bb50:	4b20      	ldr	r3, [pc, #128]	; (800bbd4 <vPortFree+0xa8>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4013      	ands	r3, r2
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d109      	bne.n	800bb6e <vPortFree+0x42>
 800bb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5e:	f383 8811 	msr	BASEPRI, r3
 800bb62:	f3bf 8f6f 	isb	sy
 800bb66:	f3bf 8f4f 	dsb	sy
 800bb6a:	60fb      	str	r3, [r7, #12]
 800bb6c:	e7fe      	b.n	800bb6c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d009      	beq.n	800bb8a <vPortFree+0x5e>
 800bb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	60bb      	str	r3, [r7, #8]
 800bb88:	e7fe      	b.n	800bb88 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	685a      	ldr	r2, [r3, #4]
 800bb8e:	4b11      	ldr	r3, [pc, #68]	; (800bbd4 <vPortFree+0xa8>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4013      	ands	r3, r2
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d019      	beq.n	800bbcc <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d115      	bne.n	800bbcc <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	685a      	ldr	r2, [r3, #4]
 800bba4:	4b0b      	ldr	r3, [pc, #44]	; (800bbd4 <vPortFree+0xa8>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	43db      	mvns	r3, r3
 800bbaa:	401a      	ands	r2, r3
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bbb0:	f7fe fb18 	bl	800a1e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	685a      	ldr	r2, [r3, #4]
 800bbb8:	4b07      	ldr	r3, [pc, #28]	; (800bbd8 <vPortFree+0xac>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	4a06      	ldr	r2, [pc, #24]	; (800bbd8 <vPortFree+0xac>)
 800bbc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bbc2:	6938      	ldr	r0, [r7, #16]
 800bbc4:	f000 f86c 	bl	800bca0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bbc8:	f7fe fb52 	bl	800a270 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bbcc:	bf00      	nop
 800bbce:	3718      	adds	r7, #24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	20004a68 	.word	0x20004a68
 800bbd8:	20004a60 	.word	0x20004a60

0800bbdc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bbe2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bbe6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bbe8:	4b27      	ldr	r3, [pc, #156]	; (800bc88 <prvHeapInit+0xac>)
 800bbea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f003 0307 	and.w	r3, r3, #7
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00c      	beq.n	800bc10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	3307      	adds	r3, #7
 800bbfa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f023 0307 	bic.w	r3, r3, #7
 800bc02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bc04:	68ba      	ldr	r2, [r7, #8]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	1ad3      	subs	r3, r2, r3
 800bc0a:	4a1f      	ldr	r2, [pc, #124]	; (800bc88 <prvHeapInit+0xac>)
 800bc0c:	4413      	add	r3, r2
 800bc0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bc14:	4a1d      	ldr	r2, [pc, #116]	; (800bc8c <prvHeapInit+0xb0>)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bc1a:	4b1c      	ldr	r3, [pc, #112]	; (800bc8c <prvHeapInit+0xb0>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	68ba      	ldr	r2, [r7, #8]
 800bc24:	4413      	add	r3, r2
 800bc26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bc28:	2208      	movs	r2, #8
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	1a9b      	subs	r3, r3, r2
 800bc2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f023 0307 	bic.w	r3, r3, #7
 800bc36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	4a15      	ldr	r2, [pc, #84]	; (800bc90 <prvHeapInit+0xb4>)
 800bc3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bc3e:	4b14      	ldr	r3, [pc, #80]	; (800bc90 <prvHeapInit+0xb4>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2200      	movs	r2, #0
 800bc44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bc46:	4b12      	ldr	r3, [pc, #72]	; (800bc90 <prvHeapInit+0xb4>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	1ad2      	subs	r2, r2, r3
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc5c:	4b0c      	ldr	r3, [pc, #48]	; (800bc90 <prvHeapInit+0xb4>)
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	4a0a      	ldr	r2, [pc, #40]	; (800bc94 <prvHeapInit+0xb8>)
 800bc6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	4a09      	ldr	r2, [pc, #36]	; (800bc98 <prvHeapInit+0xbc>)
 800bc72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc74:	4b09      	ldr	r3, [pc, #36]	; (800bc9c <prvHeapInit+0xc0>)
 800bc76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc7a:	601a      	str	r2, [r3, #0]
}
 800bc7c:	bf00      	nop
 800bc7e:	3714      	adds	r7, #20
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr
 800bc88:	20000e54 	.word	0x20000e54
 800bc8c:	20004a54 	.word	0x20004a54
 800bc90:	20004a5c 	.word	0x20004a5c
 800bc94:	20004a64 	.word	0x20004a64
 800bc98:	20004a60 	.word	0x20004a60
 800bc9c:	20004a68 	.word	0x20004a68

0800bca0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bca8:	4b28      	ldr	r3, [pc, #160]	; (800bd4c <prvInsertBlockIntoFreeList+0xac>)
 800bcaa:	60fb      	str	r3, [r7, #12]
 800bcac:	e002      	b.n	800bcb4 <prvInsertBlockIntoFreeList+0x14>
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	60fb      	str	r3, [r7, #12]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d8f7      	bhi.n	800bcae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	4413      	add	r3, r2
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d108      	bne.n	800bce2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	685a      	ldr	r2, [r3, #4]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	441a      	add	r2, r3
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	68ba      	ldr	r2, [r7, #8]
 800bcec:	441a      	add	r2, r3
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d118      	bne.n	800bd28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	4b15      	ldr	r3, [pc, #84]	; (800bd50 <prvInsertBlockIntoFreeList+0xb0>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d00d      	beq.n	800bd1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	685a      	ldr	r2, [r3, #4]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	441a      	add	r2, r3
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	601a      	str	r2, [r3, #0]
 800bd1c:	e008      	b.n	800bd30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bd1e:	4b0c      	ldr	r3, [pc, #48]	; (800bd50 <prvInsertBlockIntoFreeList+0xb0>)
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	601a      	str	r2, [r3, #0]
 800bd26:	e003      	b.n	800bd30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d002      	beq.n	800bd3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd3e:	bf00      	nop
 800bd40:	3714      	adds	r7, #20
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr
 800bd4a:	bf00      	nop
 800bd4c:	20004a54 	.word	0x20004a54
 800bd50:	20004a5c 	.word	0x20004a5c

0800bd54 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bd58:	2201      	movs	r2, #1
 800bd5a:	490e      	ldr	r1, [pc, #56]	; (800bd94 <MX_USB_HOST_Init+0x40>)
 800bd5c:	480e      	ldr	r0, [pc, #56]	; (800bd98 <MX_USB_HOST_Init+0x44>)
 800bd5e:	f7fb f873 	bl	8006e48 <USBH_Init>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d001      	beq.n	800bd6c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bd68:	f7f5 fb0c 	bl	8001384 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bd6c:	490b      	ldr	r1, [pc, #44]	; (800bd9c <MX_USB_HOST_Init+0x48>)
 800bd6e:	480a      	ldr	r0, [pc, #40]	; (800bd98 <MX_USB_HOST_Init+0x44>)
 800bd70:	f7fb f91a 	bl	8006fa8 <USBH_RegisterClass>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d001      	beq.n	800bd7e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bd7a:	f7f5 fb03 	bl	8001384 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bd7e:	4806      	ldr	r0, [pc, #24]	; (800bd98 <MX_USB_HOST_Init+0x44>)
 800bd80:	f7fb f99e 	bl	80070c0 <USBH_Start>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d001      	beq.n	800bd8e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bd8a:	f7f5 fafb 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bd8e:	bf00      	nop
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	0800bda1 	.word	0x0800bda1
 800bd98:	20004cf4 	.word	0x20004cf4
 800bd9c:	200000ac 	.word	0x200000ac

0800bda0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	460b      	mov	r3, r1
 800bdaa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bdac:	78fb      	ldrb	r3, [r7, #3]
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	2b04      	cmp	r3, #4
 800bdb2:	d819      	bhi.n	800bde8 <USBH_UserProcess+0x48>
 800bdb4:	a201      	add	r2, pc, #4	; (adr r2, 800bdbc <USBH_UserProcess+0x1c>)
 800bdb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdba:	bf00      	nop
 800bdbc:	0800bde9 	.word	0x0800bde9
 800bdc0:	0800bdd9 	.word	0x0800bdd9
 800bdc4:	0800bde9 	.word	0x0800bde9
 800bdc8:	0800bde1 	.word	0x0800bde1
 800bdcc:	0800bdd1 	.word	0x0800bdd1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bdd0:	4b09      	ldr	r3, [pc, #36]	; (800bdf8 <USBH_UserProcess+0x58>)
 800bdd2:	2203      	movs	r2, #3
 800bdd4:	701a      	strb	r2, [r3, #0]
  break;
 800bdd6:	e008      	b.n	800bdea <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bdd8:	4b07      	ldr	r3, [pc, #28]	; (800bdf8 <USBH_UserProcess+0x58>)
 800bdda:	2202      	movs	r2, #2
 800bddc:	701a      	strb	r2, [r3, #0]
  break;
 800bdde:	e004      	b.n	800bdea <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bde0:	4b05      	ldr	r3, [pc, #20]	; (800bdf8 <USBH_UserProcess+0x58>)
 800bde2:	2201      	movs	r2, #1
 800bde4:	701a      	strb	r2, [r3, #0]
  break;
 800bde6:	e000      	b.n	800bdea <USBH_UserProcess+0x4a>

  default:
  break;
 800bde8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bdea:	bf00      	nop
 800bdec:	370c      	adds	r7, #12
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr
 800bdf6:	bf00      	nop
 800bdf8:	20004a6c 	.word	0x20004a6c

0800bdfc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b08a      	sub	sp, #40	; 0x28
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be04:	f107 0314 	add.w	r3, r7, #20
 800be08:	2200      	movs	r2, #0
 800be0a:	601a      	str	r2, [r3, #0]
 800be0c:	605a      	str	r2, [r3, #4]
 800be0e:	609a      	str	r2, [r3, #8]
 800be10:	60da      	str	r2, [r3, #12]
 800be12:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be1c:	d147      	bne.n	800beae <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be1e:	2300      	movs	r3, #0
 800be20:	613b      	str	r3, [r7, #16]
 800be22:	4b25      	ldr	r3, [pc, #148]	; (800beb8 <HAL_HCD_MspInit+0xbc>)
 800be24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be26:	4a24      	ldr	r2, [pc, #144]	; (800beb8 <HAL_HCD_MspInit+0xbc>)
 800be28:	f043 0301 	orr.w	r3, r3, #1
 800be2c:	6313      	str	r3, [r2, #48]	; 0x30
 800be2e:	4b22      	ldr	r3, [pc, #136]	; (800beb8 <HAL_HCD_MspInit+0xbc>)
 800be30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be32:	f003 0301 	and.w	r3, r3, #1
 800be36:	613b      	str	r3, [r7, #16]
 800be38:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800be3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800be40:	2300      	movs	r3, #0
 800be42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be44:	2300      	movs	r3, #0
 800be46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800be48:	f107 0314 	add.w	r3, r7, #20
 800be4c:	4619      	mov	r1, r3
 800be4e:	481b      	ldr	r0, [pc, #108]	; (800bebc <HAL_HCD_MspInit+0xc0>)
 800be50:	f7f6 fa7a 	bl	8002348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800be54:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800be58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be5a:	2302      	movs	r3, #2
 800be5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be5e:	2300      	movs	r3, #0
 800be60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800be62:	2300      	movs	r3, #0
 800be64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800be66:	230a      	movs	r3, #10
 800be68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be6a:	f107 0314 	add.w	r3, r7, #20
 800be6e:	4619      	mov	r1, r3
 800be70:	4812      	ldr	r0, [pc, #72]	; (800bebc <HAL_HCD_MspInit+0xc0>)
 800be72:	f7f6 fa69 	bl	8002348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800be76:	4b10      	ldr	r3, [pc, #64]	; (800beb8 <HAL_HCD_MspInit+0xbc>)
 800be78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be7a:	4a0f      	ldr	r2, [pc, #60]	; (800beb8 <HAL_HCD_MspInit+0xbc>)
 800be7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be80:	6353      	str	r3, [r2, #52]	; 0x34
 800be82:	2300      	movs	r3, #0
 800be84:	60fb      	str	r3, [r7, #12]
 800be86:	4b0c      	ldr	r3, [pc, #48]	; (800beb8 <HAL_HCD_MspInit+0xbc>)
 800be88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be8a:	4a0b      	ldr	r2, [pc, #44]	; (800beb8 <HAL_HCD_MspInit+0xbc>)
 800be8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be90:	6453      	str	r3, [r2, #68]	; 0x44
 800be92:	4b09      	ldr	r3, [pc, #36]	; (800beb8 <HAL_HCD_MspInit+0xbc>)
 800be94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be9a:	60fb      	str	r3, [r7, #12]
 800be9c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800be9e:	2200      	movs	r2, #0
 800bea0:	2105      	movs	r1, #5
 800bea2:	2043      	movs	r0, #67	; 0x43
 800bea4:	f7f6 fa19 	bl	80022da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bea8:	2043      	movs	r0, #67	; 0x43
 800beaa:	f7f6 fa32 	bl	8002312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800beae:	bf00      	nop
 800beb0:	3728      	adds	r7, #40	; 0x28
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	40023800 	.word	0x40023800
 800bebc:	40020000 	.word	0x40020000

0800bec0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bece:	4618      	mov	r0, r3
 800bed0:	f7fb fda3 	bl	8007a1a <USBH_LL_IncTimer>
}
 800bed4:	bf00      	nop
 800bed6:	3708      	adds	r7, #8
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800beea:	4618      	mov	r0, r3
 800beec:	f7fb fde7 	bl	8007abe <USBH_LL_Connect>
}
 800bef0:	bf00      	nop
 800bef2:	3708      	adds	r7, #8
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}

0800bef8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7fb fdfc 	bl	8007b04 <USBH_LL_Disconnect>
}
 800bf0c:	bf00      	nop
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	70fb      	strb	r3, [r7, #3]
 800bf20:	4613      	mov	r3, r2
 800bf22:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7fb fe33 	bl	8007b96 <USBH_LL_NotifyURBChange>
#endif
}
 800bf30:	bf00      	nop
 800bf32:	3708      	adds	r7, #8
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7fb fd91 	bl	8007a6e <USBH_LL_PortEnabled>
} 
 800bf4c:	bf00      	nop
 800bf4e:	3708      	adds	r7, #8
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7fb fd9d 	bl	8007aa2 <USBH_LL_PortDisabled>
} 
 800bf68:	bf00      	nop
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d12a      	bne.n	800bfd8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bf82:	4a18      	ldr	r2, [pc, #96]	; (800bfe4 <USBH_LL_Init+0x74>)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	4a15      	ldr	r2, [pc, #84]	; (800bfe4 <USBH_LL_Init+0x74>)
 800bf8e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bf92:	4b14      	ldr	r3, [pc, #80]	; (800bfe4 <USBH_LL_Init+0x74>)
 800bf94:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bf98:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bf9a:	4b12      	ldr	r3, [pc, #72]	; (800bfe4 <USBH_LL_Init+0x74>)
 800bf9c:	2208      	movs	r2, #8
 800bf9e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bfa0:	4b10      	ldr	r3, [pc, #64]	; (800bfe4 <USBH_LL_Init+0x74>)
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bfa6:	4b0f      	ldr	r3, [pc, #60]	; (800bfe4 <USBH_LL_Init+0x74>)
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bfac:	4b0d      	ldr	r3, [pc, #52]	; (800bfe4 <USBH_LL_Init+0x74>)
 800bfae:	2202      	movs	r2, #2
 800bfb0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bfb2:	4b0c      	ldr	r3, [pc, #48]	; (800bfe4 <USBH_LL_Init+0x74>)
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bfb8:	480a      	ldr	r0, [pc, #40]	; (800bfe4 <USBH_LL_Init+0x74>)
 800bfba:	f7f6 fb78 	bl	80026ae <HAL_HCD_Init>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d001      	beq.n	800bfc8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bfc4:	f7f5 f9de 	bl	8001384 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bfc8:	4806      	ldr	r0, [pc, #24]	; (800bfe4 <USBH_LL_Init+0x74>)
 800bfca:	f7f6 ff7b 	bl	8002ec4 <HAL_HCD_GetCurrentFrame>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f7fb fd12 	bl	80079fc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3708      	adds	r7, #8
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	200050d8 	.word	0x200050d8

0800bfe8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bff0:	2300      	movs	r3, #0
 800bff2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bff4:	2300      	movs	r3, #0
 800bff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bffe:	4618      	mov	r0, r3
 800c000:	f7f6 fee8 	bl	8002dd4 <HAL_HCD_Start>
 800c004:	4603      	mov	r3, r0
 800c006:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c008:	7bfb      	ldrb	r3, [r7, #15]
 800c00a:	4618      	mov	r0, r3
 800c00c:	f000 f95c 	bl	800c2c8 <USBH_Get_USB_Status>
 800c010:	4603      	mov	r3, r0
 800c012:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c014:	7bbb      	ldrb	r3, [r7, #14]
}
 800c016:	4618      	mov	r0, r3
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b084      	sub	sp, #16
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c026:	2300      	movs	r3, #0
 800c028:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c02a:	2300      	movs	r3, #0
 800c02c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c034:	4618      	mov	r0, r3
 800c036:	f7f6 fef0 	bl	8002e1a <HAL_HCD_Stop>
 800c03a:	4603      	mov	r3, r0
 800c03c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c03e:	7bfb      	ldrb	r3, [r7, #15]
 800c040:	4618      	mov	r0, r3
 800c042:	f000 f941 	bl	800c2c8 <USBH_Get_USB_Status>
 800c046:	4603      	mov	r3, r0
 800c048:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800c04a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3710      	adds	r7, #16
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c05c:	2301      	movs	r3, #1
 800c05e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c066:	4618      	mov	r0, r3
 800c068:	f7f6 ff3a 	bl	8002ee0 <HAL_HCD_GetCurrentSpeed>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d007      	beq.n	800c082 <USBH_LL_GetSpeed+0x2e>
 800c072:	2b01      	cmp	r3, #1
 800c074:	d302      	bcc.n	800c07c <USBH_LL_GetSpeed+0x28>
 800c076:	2b02      	cmp	r3, #2
 800c078:	d006      	beq.n	800c088 <USBH_LL_GetSpeed+0x34>
 800c07a:	e008      	b.n	800c08e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c07c:	2300      	movs	r3, #0
 800c07e:	73fb      	strb	r3, [r7, #15]
    break;
 800c080:	e008      	b.n	800c094 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c082:	2301      	movs	r3, #1
 800c084:	73fb      	strb	r3, [r7, #15]
    break;
 800c086:	e005      	b.n	800c094 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c088:	2302      	movs	r3, #2
 800c08a:	73fb      	strb	r3, [r7, #15]
    break;
 800c08c:	e002      	b.n	800c094 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800c08e:	2301      	movs	r3, #1
 800c090:	73fb      	strb	r3, [r7, #15]
    break;
 800c092:	bf00      	nop
  }
  return  speed;
 800c094:	7bfb      	ldrb	r3, [r7, #15]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3710      	adds	r7, #16
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b084      	sub	sp, #16
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7f6 fecd 	bl	8002e54 <HAL_HCD_ResetPort>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800c0be:	7bfb      	ldrb	r3, [r7, #15]
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f000 f901 	bl	800c2c8 <USBH_Get_USB_Status>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c0ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c0e6:	78fa      	ldrb	r2, [r7, #3]
 800c0e8:	4611      	mov	r1, r2
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7f6 fed5 	bl	8002e9a <HAL_HCD_HC_GetXferCount>
 800c0f0:	4603      	mov	r3, r0
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3708      	adds	r7, #8
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c0fa:	b590      	push	{r4, r7, lr}
 800c0fc:	b089      	sub	sp, #36	; 0x24
 800c0fe:	af04      	add	r7, sp, #16
 800c100:	6078      	str	r0, [r7, #4]
 800c102:	4608      	mov	r0, r1
 800c104:	4611      	mov	r1, r2
 800c106:	461a      	mov	r2, r3
 800c108:	4603      	mov	r3, r0
 800c10a:	70fb      	strb	r3, [r7, #3]
 800c10c:	460b      	mov	r3, r1
 800c10e:	70bb      	strb	r3, [r7, #2]
 800c110:	4613      	mov	r3, r2
 800c112:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c114:	2300      	movs	r3, #0
 800c116:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c118:	2300      	movs	r3, #0
 800c11a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c122:	787c      	ldrb	r4, [r7, #1]
 800c124:	78ba      	ldrb	r2, [r7, #2]
 800c126:	78f9      	ldrb	r1, [r7, #3]
 800c128:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c12a:	9302      	str	r3, [sp, #8]
 800c12c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c130:	9301      	str	r3, [sp, #4]
 800c132:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c136:	9300      	str	r3, [sp, #0]
 800c138:	4623      	mov	r3, r4
 800c13a:	f7f6 fb1a 	bl	8002772 <HAL_HCD_HC_Init>
 800c13e:	4603      	mov	r3, r0
 800c140:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c142:	7bfb      	ldrb	r3, [r7, #15]
 800c144:	4618      	mov	r0, r3
 800c146:	f000 f8bf 	bl	800c2c8 <USBH_Get_USB_Status>
 800c14a:	4603      	mov	r3, r0
 800c14c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c14e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c150:	4618      	mov	r0, r3
 800c152:	3714      	adds	r7, #20
 800c154:	46bd      	mov	sp, r7
 800c156:	bd90      	pop	{r4, r7, pc}

0800c158 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	460b      	mov	r3, r1
 800c162:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c164:	2300      	movs	r3, #0
 800c166:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c168:	2300      	movs	r3, #0
 800c16a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c172:	78fa      	ldrb	r2, [r7, #3]
 800c174:	4611      	mov	r1, r2
 800c176:	4618      	mov	r0, r3
 800c178:	f7f6 fb93 	bl	80028a2 <HAL_HCD_HC_Halt>
 800c17c:	4603      	mov	r3, r0
 800c17e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c180:	7bfb      	ldrb	r3, [r7, #15]
 800c182:	4618      	mov	r0, r3
 800c184:	f000 f8a0 	bl	800c2c8 <USBH_Get_USB_Status>
 800c188:	4603      	mov	r3, r0
 800c18a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c18c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c196:	b590      	push	{r4, r7, lr}
 800c198:	b089      	sub	sp, #36	; 0x24
 800c19a:	af04      	add	r7, sp, #16
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	4608      	mov	r0, r1
 800c1a0:	4611      	mov	r1, r2
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	70fb      	strb	r3, [r7, #3]
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	70bb      	strb	r3, [r7, #2]
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c1be:	787c      	ldrb	r4, [r7, #1]
 800c1c0:	78ba      	ldrb	r2, [r7, #2]
 800c1c2:	78f9      	ldrb	r1, [r7, #3]
 800c1c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c1c8:	9303      	str	r3, [sp, #12]
 800c1ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c1cc:	9302      	str	r3, [sp, #8]
 800c1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d0:	9301      	str	r3, [sp, #4]
 800c1d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c1d6:	9300      	str	r3, [sp, #0]
 800c1d8:	4623      	mov	r3, r4
 800c1da:	f7f6 fb85 	bl	80028e8 <HAL_HCD_HC_SubmitRequest>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c1e2:	7bfb      	ldrb	r3, [r7, #15]
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f000 f86f 	bl	800c2c8 <USBH_Get_USB_Status>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c1ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3714      	adds	r7, #20
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd90      	pop	{r4, r7, pc}

0800c1f8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	460b      	mov	r3, r1
 800c202:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c20a:	78fa      	ldrb	r2, [r7, #3]
 800c20c:	4611      	mov	r1, r2
 800c20e:	4618      	mov	r0, r3
 800c210:	f7f6 fe2e 	bl	8002e70 <HAL_HCD_HC_GetURBState>
 800c214:	4603      	mov	r3, r0
}
 800c216:	4618      	mov	r0, r3
 800c218:	3708      	adds	r7, #8
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b082      	sub	sp, #8
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
 800c226:	460b      	mov	r3, r1
 800c228:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c230:	2b01      	cmp	r3, #1
 800c232:	d103      	bne.n	800c23c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c234:	78fb      	ldrb	r3, [r7, #3]
 800c236:	4618      	mov	r0, r3
 800c238:	f000 f872 	bl	800c320 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c23c:	20c8      	movs	r0, #200	; 0xc8
 800c23e:	f7f5 fbe7 	bl	8001a10 <HAL_Delay>
  return USBH_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3708      	adds	r7, #8
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b085      	sub	sp, #20
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	460b      	mov	r3, r1
 800c256:	70fb      	strb	r3, [r7, #3]
 800c258:	4613      	mov	r3, r2
 800c25a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c262:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c264:	78fa      	ldrb	r2, [r7, #3]
 800c266:	68f9      	ldr	r1, [r7, #12]
 800c268:	4613      	mov	r3, r2
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	4413      	add	r3, r2
 800c26e:	00db      	lsls	r3, r3, #3
 800c270:	440b      	add	r3, r1
 800c272:	333b      	adds	r3, #59	; 0x3b
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00a      	beq.n	800c290 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c27a:	78fa      	ldrb	r2, [r7, #3]
 800c27c:	68f9      	ldr	r1, [r7, #12]
 800c27e:	4613      	mov	r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4413      	add	r3, r2
 800c284:	00db      	lsls	r3, r3, #3
 800c286:	440b      	add	r3, r1
 800c288:	3350      	adds	r3, #80	; 0x50
 800c28a:	78ba      	ldrb	r2, [r7, #2]
 800c28c:	701a      	strb	r2, [r3, #0]
 800c28e:	e009      	b.n	800c2a4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c290:	78fa      	ldrb	r2, [r7, #3]
 800c292:	68f9      	ldr	r1, [r7, #12]
 800c294:	4613      	mov	r3, r2
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	4413      	add	r3, r2
 800c29a:	00db      	lsls	r3, r3, #3
 800c29c:	440b      	add	r3, r1
 800c29e:	3351      	adds	r3, #81	; 0x51
 800c2a0:	78ba      	ldrb	r2, [r7, #2]
 800c2a2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3714      	adds	r7, #20
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr

0800c2b2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c2b2:	b580      	push	{r7, lr}
 800c2b4:	b082      	sub	sp, #8
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f7f5 fba8 	bl	8001a10 <HAL_Delay>
}
 800c2c0:	bf00      	nop
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c2d6:	79fb      	ldrb	r3, [r7, #7]
 800c2d8:	2b03      	cmp	r3, #3
 800c2da:	d817      	bhi.n	800c30c <USBH_Get_USB_Status+0x44>
 800c2dc:	a201      	add	r2, pc, #4	; (adr r2, 800c2e4 <USBH_Get_USB_Status+0x1c>)
 800c2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e2:	bf00      	nop
 800c2e4:	0800c2f5 	.word	0x0800c2f5
 800c2e8:	0800c2fb 	.word	0x0800c2fb
 800c2ec:	0800c301 	.word	0x0800c301
 800c2f0:	0800c307 	.word	0x0800c307
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	73fb      	strb	r3, [r7, #15]
    break;
 800c2f8:	e00b      	b.n	800c312 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c2fa:	2302      	movs	r3, #2
 800c2fc:	73fb      	strb	r3, [r7, #15]
    break;
 800c2fe:	e008      	b.n	800c312 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c300:	2301      	movs	r3, #1
 800c302:	73fb      	strb	r3, [r7, #15]
    break;
 800c304:	e005      	b.n	800c312 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c306:	2302      	movs	r3, #2
 800c308:	73fb      	strb	r3, [r7, #15]
    break;
 800c30a:	e002      	b.n	800c312 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c30c:	2302      	movs	r3, #2
 800c30e:	73fb      	strb	r3, [r7, #15]
    break;
 800c310:	bf00      	nop
  }
  return usb_status;
 800c312:	7bfb      	ldrb	r3, [r7, #15]
}
 800c314:	4618      	mov	r0, r3
 800c316:	3714      	adds	r7, #20
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr

0800c320 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
 800c326:	4603      	mov	r3, r0
 800c328:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800c32a:	79fb      	ldrb	r3, [r7, #7]
 800c32c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c32e:	79fb      	ldrb	r3, [r7, #7]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d102      	bne.n	800c33a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800c334:	2301      	movs	r3, #1
 800c336:	73fb      	strb	r3, [r7, #15]
 800c338:	e001      	b.n	800c33e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c33a:	2300      	movs	r3, #0
 800c33c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c33e:	7bfb      	ldrb	r3, [r7, #15]
 800c340:	461a      	mov	r2, r3
 800c342:	2101      	movs	r1, #1
 800c344:	4803      	ldr	r0, [pc, #12]	; (800c354 <MX_DriverVbusFS+0x34>)
 800c346:	f7f6 f999 	bl	800267c <HAL_GPIO_WritePin>
}
 800c34a:	bf00      	nop
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	40020800 	.word	0x40020800

0800c358 <__errno>:
 800c358:	4b01      	ldr	r3, [pc, #4]	; (800c360 <__errno+0x8>)
 800c35a:	6818      	ldr	r0, [r3, #0]
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	200000d0 	.word	0x200000d0

0800c364 <__libc_init_array>:
 800c364:	b570      	push	{r4, r5, r6, lr}
 800c366:	4e0d      	ldr	r6, [pc, #52]	; (800c39c <__libc_init_array+0x38>)
 800c368:	4c0d      	ldr	r4, [pc, #52]	; (800c3a0 <__libc_init_array+0x3c>)
 800c36a:	1ba4      	subs	r4, r4, r6
 800c36c:	10a4      	asrs	r4, r4, #2
 800c36e:	2500      	movs	r5, #0
 800c370:	42a5      	cmp	r5, r4
 800c372:	d109      	bne.n	800c388 <__libc_init_array+0x24>
 800c374:	4e0b      	ldr	r6, [pc, #44]	; (800c3a4 <__libc_init_array+0x40>)
 800c376:	4c0c      	ldr	r4, [pc, #48]	; (800c3a8 <__libc_init_array+0x44>)
 800c378:	f000 f8f6 	bl	800c568 <_init>
 800c37c:	1ba4      	subs	r4, r4, r6
 800c37e:	10a4      	asrs	r4, r4, #2
 800c380:	2500      	movs	r5, #0
 800c382:	42a5      	cmp	r5, r4
 800c384:	d105      	bne.n	800c392 <__libc_init_array+0x2e>
 800c386:	bd70      	pop	{r4, r5, r6, pc}
 800c388:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c38c:	4798      	blx	r3
 800c38e:	3501      	adds	r5, #1
 800c390:	e7ee      	b.n	800c370 <__libc_init_array+0xc>
 800c392:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c396:	4798      	blx	r3
 800c398:	3501      	adds	r5, #1
 800c39a:	e7f2      	b.n	800c382 <__libc_init_array+0x1e>
 800c39c:	0800c710 	.word	0x0800c710
 800c3a0:	0800c710 	.word	0x0800c710
 800c3a4:	0800c710 	.word	0x0800c710
 800c3a8:	0800c714 	.word	0x0800c714

0800c3ac <malloc>:
 800c3ac:	4b02      	ldr	r3, [pc, #8]	; (800c3b8 <malloc+0xc>)
 800c3ae:	4601      	mov	r1, r0
 800c3b0:	6818      	ldr	r0, [r3, #0]
 800c3b2:	f000 b86d 	b.w	800c490 <_malloc_r>
 800c3b6:	bf00      	nop
 800c3b8:	200000d0 	.word	0x200000d0

0800c3bc <free>:
 800c3bc:	4b02      	ldr	r3, [pc, #8]	; (800c3c8 <free+0xc>)
 800c3be:	4601      	mov	r1, r0
 800c3c0:	6818      	ldr	r0, [r3, #0]
 800c3c2:	f000 b817 	b.w	800c3f4 <_free_r>
 800c3c6:	bf00      	nop
 800c3c8:	200000d0 	.word	0x200000d0

0800c3cc <memcpy>:
 800c3cc:	b510      	push	{r4, lr}
 800c3ce:	1e43      	subs	r3, r0, #1
 800c3d0:	440a      	add	r2, r1
 800c3d2:	4291      	cmp	r1, r2
 800c3d4:	d100      	bne.n	800c3d8 <memcpy+0xc>
 800c3d6:	bd10      	pop	{r4, pc}
 800c3d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3e0:	e7f7      	b.n	800c3d2 <memcpy+0x6>

0800c3e2 <memset>:
 800c3e2:	4402      	add	r2, r0
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d100      	bne.n	800c3ec <memset+0xa>
 800c3ea:	4770      	bx	lr
 800c3ec:	f803 1b01 	strb.w	r1, [r3], #1
 800c3f0:	e7f9      	b.n	800c3e6 <memset+0x4>
	...

0800c3f4 <_free_r>:
 800c3f4:	b538      	push	{r3, r4, r5, lr}
 800c3f6:	4605      	mov	r5, r0
 800c3f8:	2900      	cmp	r1, #0
 800c3fa:	d045      	beq.n	800c488 <_free_r+0x94>
 800c3fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c400:	1f0c      	subs	r4, r1, #4
 800c402:	2b00      	cmp	r3, #0
 800c404:	bfb8      	it	lt
 800c406:	18e4      	addlt	r4, r4, r3
 800c408:	f000 f8ac 	bl	800c564 <__malloc_lock>
 800c40c:	4a1f      	ldr	r2, [pc, #124]	; (800c48c <_free_r+0x98>)
 800c40e:	6813      	ldr	r3, [r2, #0]
 800c410:	4610      	mov	r0, r2
 800c412:	b933      	cbnz	r3, 800c422 <_free_r+0x2e>
 800c414:	6063      	str	r3, [r4, #4]
 800c416:	6014      	str	r4, [r2, #0]
 800c418:	4628      	mov	r0, r5
 800c41a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c41e:	f000 b8a2 	b.w	800c566 <__malloc_unlock>
 800c422:	42a3      	cmp	r3, r4
 800c424:	d90c      	bls.n	800c440 <_free_r+0x4c>
 800c426:	6821      	ldr	r1, [r4, #0]
 800c428:	1862      	adds	r2, r4, r1
 800c42a:	4293      	cmp	r3, r2
 800c42c:	bf04      	itt	eq
 800c42e:	681a      	ldreq	r2, [r3, #0]
 800c430:	685b      	ldreq	r3, [r3, #4]
 800c432:	6063      	str	r3, [r4, #4]
 800c434:	bf04      	itt	eq
 800c436:	1852      	addeq	r2, r2, r1
 800c438:	6022      	streq	r2, [r4, #0]
 800c43a:	6004      	str	r4, [r0, #0]
 800c43c:	e7ec      	b.n	800c418 <_free_r+0x24>
 800c43e:	4613      	mov	r3, r2
 800c440:	685a      	ldr	r2, [r3, #4]
 800c442:	b10a      	cbz	r2, 800c448 <_free_r+0x54>
 800c444:	42a2      	cmp	r2, r4
 800c446:	d9fa      	bls.n	800c43e <_free_r+0x4a>
 800c448:	6819      	ldr	r1, [r3, #0]
 800c44a:	1858      	adds	r0, r3, r1
 800c44c:	42a0      	cmp	r0, r4
 800c44e:	d10b      	bne.n	800c468 <_free_r+0x74>
 800c450:	6820      	ldr	r0, [r4, #0]
 800c452:	4401      	add	r1, r0
 800c454:	1858      	adds	r0, r3, r1
 800c456:	4282      	cmp	r2, r0
 800c458:	6019      	str	r1, [r3, #0]
 800c45a:	d1dd      	bne.n	800c418 <_free_r+0x24>
 800c45c:	6810      	ldr	r0, [r2, #0]
 800c45e:	6852      	ldr	r2, [r2, #4]
 800c460:	605a      	str	r2, [r3, #4]
 800c462:	4401      	add	r1, r0
 800c464:	6019      	str	r1, [r3, #0]
 800c466:	e7d7      	b.n	800c418 <_free_r+0x24>
 800c468:	d902      	bls.n	800c470 <_free_r+0x7c>
 800c46a:	230c      	movs	r3, #12
 800c46c:	602b      	str	r3, [r5, #0]
 800c46e:	e7d3      	b.n	800c418 <_free_r+0x24>
 800c470:	6820      	ldr	r0, [r4, #0]
 800c472:	1821      	adds	r1, r4, r0
 800c474:	428a      	cmp	r2, r1
 800c476:	bf04      	itt	eq
 800c478:	6811      	ldreq	r1, [r2, #0]
 800c47a:	6852      	ldreq	r2, [r2, #4]
 800c47c:	6062      	str	r2, [r4, #4]
 800c47e:	bf04      	itt	eq
 800c480:	1809      	addeq	r1, r1, r0
 800c482:	6021      	streq	r1, [r4, #0]
 800c484:	605c      	str	r4, [r3, #4]
 800c486:	e7c7      	b.n	800c418 <_free_r+0x24>
 800c488:	bd38      	pop	{r3, r4, r5, pc}
 800c48a:	bf00      	nop
 800c48c:	20004a70 	.word	0x20004a70

0800c490 <_malloc_r>:
 800c490:	b570      	push	{r4, r5, r6, lr}
 800c492:	1ccd      	adds	r5, r1, #3
 800c494:	f025 0503 	bic.w	r5, r5, #3
 800c498:	3508      	adds	r5, #8
 800c49a:	2d0c      	cmp	r5, #12
 800c49c:	bf38      	it	cc
 800c49e:	250c      	movcc	r5, #12
 800c4a0:	2d00      	cmp	r5, #0
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	db01      	blt.n	800c4aa <_malloc_r+0x1a>
 800c4a6:	42a9      	cmp	r1, r5
 800c4a8:	d903      	bls.n	800c4b2 <_malloc_r+0x22>
 800c4aa:	230c      	movs	r3, #12
 800c4ac:	6033      	str	r3, [r6, #0]
 800c4ae:	2000      	movs	r0, #0
 800c4b0:	bd70      	pop	{r4, r5, r6, pc}
 800c4b2:	f000 f857 	bl	800c564 <__malloc_lock>
 800c4b6:	4a21      	ldr	r2, [pc, #132]	; (800c53c <_malloc_r+0xac>)
 800c4b8:	6814      	ldr	r4, [r2, #0]
 800c4ba:	4621      	mov	r1, r4
 800c4bc:	b991      	cbnz	r1, 800c4e4 <_malloc_r+0x54>
 800c4be:	4c20      	ldr	r4, [pc, #128]	; (800c540 <_malloc_r+0xb0>)
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	b91b      	cbnz	r3, 800c4cc <_malloc_r+0x3c>
 800c4c4:	4630      	mov	r0, r6
 800c4c6:	f000 f83d 	bl	800c544 <_sbrk_r>
 800c4ca:	6020      	str	r0, [r4, #0]
 800c4cc:	4629      	mov	r1, r5
 800c4ce:	4630      	mov	r0, r6
 800c4d0:	f000 f838 	bl	800c544 <_sbrk_r>
 800c4d4:	1c43      	adds	r3, r0, #1
 800c4d6:	d124      	bne.n	800c522 <_malloc_r+0x92>
 800c4d8:	230c      	movs	r3, #12
 800c4da:	6033      	str	r3, [r6, #0]
 800c4dc:	4630      	mov	r0, r6
 800c4de:	f000 f842 	bl	800c566 <__malloc_unlock>
 800c4e2:	e7e4      	b.n	800c4ae <_malloc_r+0x1e>
 800c4e4:	680b      	ldr	r3, [r1, #0]
 800c4e6:	1b5b      	subs	r3, r3, r5
 800c4e8:	d418      	bmi.n	800c51c <_malloc_r+0x8c>
 800c4ea:	2b0b      	cmp	r3, #11
 800c4ec:	d90f      	bls.n	800c50e <_malloc_r+0x7e>
 800c4ee:	600b      	str	r3, [r1, #0]
 800c4f0:	50cd      	str	r5, [r1, r3]
 800c4f2:	18cc      	adds	r4, r1, r3
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	f000 f836 	bl	800c566 <__malloc_unlock>
 800c4fa:	f104 000b 	add.w	r0, r4, #11
 800c4fe:	1d23      	adds	r3, r4, #4
 800c500:	f020 0007 	bic.w	r0, r0, #7
 800c504:	1ac3      	subs	r3, r0, r3
 800c506:	d0d3      	beq.n	800c4b0 <_malloc_r+0x20>
 800c508:	425a      	negs	r2, r3
 800c50a:	50e2      	str	r2, [r4, r3]
 800c50c:	e7d0      	b.n	800c4b0 <_malloc_r+0x20>
 800c50e:	428c      	cmp	r4, r1
 800c510:	684b      	ldr	r3, [r1, #4]
 800c512:	bf16      	itet	ne
 800c514:	6063      	strne	r3, [r4, #4]
 800c516:	6013      	streq	r3, [r2, #0]
 800c518:	460c      	movne	r4, r1
 800c51a:	e7eb      	b.n	800c4f4 <_malloc_r+0x64>
 800c51c:	460c      	mov	r4, r1
 800c51e:	6849      	ldr	r1, [r1, #4]
 800c520:	e7cc      	b.n	800c4bc <_malloc_r+0x2c>
 800c522:	1cc4      	adds	r4, r0, #3
 800c524:	f024 0403 	bic.w	r4, r4, #3
 800c528:	42a0      	cmp	r0, r4
 800c52a:	d005      	beq.n	800c538 <_malloc_r+0xa8>
 800c52c:	1a21      	subs	r1, r4, r0
 800c52e:	4630      	mov	r0, r6
 800c530:	f000 f808 	bl	800c544 <_sbrk_r>
 800c534:	3001      	adds	r0, #1
 800c536:	d0cf      	beq.n	800c4d8 <_malloc_r+0x48>
 800c538:	6025      	str	r5, [r4, #0]
 800c53a:	e7db      	b.n	800c4f4 <_malloc_r+0x64>
 800c53c:	20004a70 	.word	0x20004a70
 800c540:	20004a74 	.word	0x20004a74

0800c544 <_sbrk_r>:
 800c544:	b538      	push	{r3, r4, r5, lr}
 800c546:	4c06      	ldr	r4, [pc, #24]	; (800c560 <_sbrk_r+0x1c>)
 800c548:	2300      	movs	r3, #0
 800c54a:	4605      	mov	r5, r0
 800c54c:	4608      	mov	r0, r1
 800c54e:	6023      	str	r3, [r4, #0]
 800c550:	f7f5 f980 	bl	8001854 <_sbrk>
 800c554:	1c43      	adds	r3, r0, #1
 800c556:	d102      	bne.n	800c55e <_sbrk_r+0x1a>
 800c558:	6823      	ldr	r3, [r4, #0]
 800c55a:	b103      	cbz	r3, 800c55e <_sbrk_r+0x1a>
 800c55c:	602b      	str	r3, [r5, #0]
 800c55e:	bd38      	pop	{r3, r4, r5, pc}
 800c560:	2000539c 	.word	0x2000539c

0800c564 <__malloc_lock>:
 800c564:	4770      	bx	lr

0800c566 <__malloc_unlock>:
 800c566:	4770      	bx	lr

0800c568 <_init>:
 800c568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56a:	bf00      	nop
 800c56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c56e:	bc08      	pop	{r3}
 800c570:	469e      	mov	lr, r3
 800c572:	4770      	bx	lr

0800c574 <_fini>:
 800c574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c576:	bf00      	nop
 800c578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c57a:	bc08      	pop	{r3}
 800c57c:	469e      	mov	lr, r3
 800c57e:	4770      	bx	lr
