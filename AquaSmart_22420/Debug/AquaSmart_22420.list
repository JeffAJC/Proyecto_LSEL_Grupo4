
AquaSmart_22420.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c360  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800c4f0  0800c4f0  0001c4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c678  0800c678  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  0800c678  0800c678  0001c678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c680  0800c680  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c680  0800c680  0001c680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c684  0800c684  0001c684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0800c688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005224  20000134  0800c7bc  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005358  0800c7bc  00025358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029e46  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005428  00000000  00000000  00049faa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b00  00000000  00000000  0004f3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018c8  00000000  00000000  00050ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028288  00000000  00000000  000527a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b95d  00000000  00000000  0007aa28  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9f6b  00000000  00000000  00096385  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001702f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007120  00000000  00000000  0017036c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000134 	.word	0x20000134
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c4d8 	.word	0x0800c4d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000138 	.word	0x20000138
 80001cc:	0800c4d8 	.word	0x0800c4d8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <send_data>:
//{
//	return(HAL_GetTick() >= +LoRa_timer);
//}

void send_data(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
	 sensor_buf_t data;

	 data = ringbuf_get(&data_ring_buff);
 80004d6:	463b      	mov	r3, r7
 80004d8:	4903      	ldr	r1, [pc, #12]	; (80004e8 <send_data+0x18>)
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 ff82 	bl	80013e4 <ringbuf_get>
	 /*
	  *
	  * LORA COMM.
	  *
	  * */
}
 80004e0:	bf00      	nop
 80004e2:	3720      	adds	r7, #32
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20004a80 	.word	0x20004a80

080004ec <LoRa_initialization>:
//	  {-1, NULL, -1, NULL },
//};

//fsm_t* LoRa_initialization(uint16_t period)
void LoRa_initialization(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
//	fsm_t* fsm_LoRa;
	ringbuf_init(&data_ring_buff, RBUF_SIZE);
 80004f0:	2103      	movs	r1, #3
 80004f2:	4802      	ldr	r0, [pc, #8]	; (80004fc <LoRa_initialization+0x10>)
 80004f4:	f000 ff19 	bl	800132a <ringbuf_init>
//	fsm_LoRa = fsm_new(send_wireless);
//	LoRa_timer = HAL_GetTick() + period;
//	LoRa_period = period;

//	return fsm_LoRa;
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20004a80 	.word	0x20004a80

08000500 <save_new_data>:

void save_new_data(sensor_buf_t data)
{
 8000500:	b084      	sub	sp, #16
 8000502:	b5b0      	push	{r4, r5, r7, lr}
 8000504:	b086      	sub	sp, #24
 8000506:	af06      	add	r7, sp, #24
 8000508:	f107 0410 	add.w	r4, r7, #16
 800050c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ringbuf_put(&data_ring_buff, data);
 8000510:	466d      	mov	r5, sp
 8000512:	f107 041c 	add.w	r4, r7, #28
 8000516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800051a:	6823      	ldr	r3, [r4, #0]
 800051c:	602b      	str	r3, [r5, #0]
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000524:	4804      	ldr	r0, [pc, #16]	; (8000538 <save_new_data+0x38>)
 8000526:	f000 ff1d 	bl	8001364 <ringbuf_put>
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000532:	b004      	add	sp, #16
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20004a80 	.word	0x20004a80

0800053c <PreSleepProcessing>:
void PreSleepProcessing(uint32_t *ulExpectedIdleTime);
void PostSleepProcessing(uint32_t *ulExpectedIdleTime);

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
/* place for user code */ 
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <fsm_init>:
  fsm_init (this, tt);
  return this;
}

void fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	683a      	ldr	r2, [r7, #0]
 8000572:	605a      	str	r2, [r3, #4]
  this->current_state = tt->orig_state;
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	601a      	str	r2, [r3, #0]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <fsm_fire>:

void fsm_fire (fsm_t* this)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	e01c      	b.n	80005d2 <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d113      	bne.n	80005cc <fsm_fire+0x44>
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	4798      	blx	r3
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d00c      	beq.n	80005cc <fsm_fire+0x44>
      this->current_state = t->dest_state;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	689a      	ldr	r2, [r3, #8]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	601a      	str	r2, [r3, #0]
      if (t->out)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d00c      	beq.n	80005dc <fsm_fire+0x54>
        t->out(this);
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	4798      	blx	r3
      break;
 80005ca:	e007      	b.n	80005dc <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	3310      	adds	r3, #16
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	dade      	bge.n	8000598 <fsm_fire+0x10>
    }
  }
}
 80005da:	e000      	b.n	80005de <fsm_fire+0x56>
      break;
 80005dc:	bf00      	nop
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <data_saved>:
	  Saving,
	  Sleeping,
	  Setup
}sensor_state;

int data_saved(fsm_t* this){ return 1; }
 80005e6:	b480      	push	{r7}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <error>:

int error (fsm_t* this) {
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	60bb      	str	r3, [r7, #8]
	if (config->data_average <= 0 || config->data_average > config->threshold_Max)
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	889b      	ldrh	r3, [r3, #4]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d005      	beq.n	8000622 <error+0x26>
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	889a      	ldrh	r2, [r3, #4]
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800061e:	429a      	cmp	r2, r3
 8000620:	d901      	bls.n	8000626 <error+0x2a>
		return 1;
 8000622:	2301      	movs	r3, #1
 8000624:	e000      	b.n	8000628 <error+0x2c>
	else return 0;
 8000626:	2300      	movs	r3, #0
}
 8000628:	4618      	mov	r0, r3
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <no_error>:

int no_error (fsm_t* this) {
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	60bb      	str	r3, [r7, #8]
	if (config->data_average > 0 && config->data_average <= config->threshold_Max)
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	889b      	ldrh	r3, [r3, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d007      	beq.n	800065e <no_error+0x2a>
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	889a      	ldrh	r2, [r3, #4]
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000656:	429a      	cmp	r2, r3
 8000658:	d801      	bhi.n	800065e <no_error+0x2a>
		return 1;
 800065a:	2301      	movs	r3, #1
 800065c:	e000      	b.n	8000660 <no_error+0x2c>
	else return 0;
 800065e:	2300      	movs	r3, #0
}
 8000660:	4618      	mov	r0, r3
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <timer_sleep>:

int timer_sleep (fsm_t* this) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	60bb      	str	r3, [r7, #8]
	if(config->active && HAL_GetTick()>=config->sleep_timer) return 1;
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d008      	beq.n	8000698 <timer_sleep+0x2c>
 8000686:	f001 f96f 	bl	8001968 <HAL_GetTick>
 800068a:	4602      	mov	r2, r0
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	429a      	cmp	r2, r3
 8000692:	d301      	bcc.n	8000698 <timer_sleep+0x2c>
 8000694:	2301      	movs	r3, #1
 8000696:	e000      	b.n	800069a <timer_sleep+0x2e>
	else return 0;
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <timer_setup>:

int timer_setup (fsm_t* this) {
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b084      	sub	sp, #16
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	60bb      	str	r3, [r7, #8]
	return (HAL_GetTick()>config->setup_timer);
 80006b4:	f001 f958 	bl	8001968 <HAL_GetTick>
 80006b8:	4602      	mov	r2, r0
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	429a      	cmp	r2, r3
 80006c0:	bf8c      	ite	hi
 80006c2:	2301      	movhi	r3, #1
 80006c4:	2300      	movls	r3, #0
 80006c6:	b2db      	uxtb	r3, r3
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <warned>:

int warned (fsm_t* this) {
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	60bb      	str	r3, [r7, #8]
	return (config->warning_count < 2);
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	bfd4      	ite	le
 80006ea:	2301      	movle	r3, #1
 80006ec:	2300      	movgt	r3, #0
 80006ee:	b2db      	uxtb	r3, r3
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <contador>:

int contador (fsm_t* this) {
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	60bb      	str	r3, [r7, #8]
	if(config->measure_count>=(config->measure_average))
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	7f1b      	ldrb	r3, [r3, #28]
 8000712:	b29a      	uxth	r2, r3
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000718:	429a      	cmp	r2, r3
 800071a:	d301      	bcc.n	8000720 <contador+0x24>
		return 1;
 800071c:	2301      	movs	r3, #1
 800071e:	e000      	b.n	8000722 <contador+0x26>
	else return 0;
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <timer_measure>:


int timer_measure (fsm_t* this) {
 800072e:	b580      	push	{r7, lr}
 8000730:	b086      	sub	sp, #24
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
	long debug = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	613b      	str	r3, [r7, #16]
	sensor_t* config = punt->param;
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	689b      	ldr	r3, [r3, #8]
 8000742:	60fb      	str	r3, [r7, #12]

	debug = HAL_GetTick();
 8000744:	f001 f910 	bl	8001968 <HAL_GetTick>
 8000748:	4603      	mov	r3, r0
 800074a:	617b      	str	r3, [r7, #20]
	if(config->measure_count>=(config->measure_average))
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	7f1b      	ldrb	r3, [r3, #28]
 8000750:	b29a      	uxth	r2, r3
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000756:	429a      	cmp	r2, r3
 8000758:	d301      	bcc.n	800075e <timer_measure+0x30>
	return 0;
 800075a:	2300      	movs	r3, #0
 800075c:	e009      	b.n	8000772 <timer_measure+0x44>
	else return (HAL_GetTick()>=(config->measure_timer));
 800075e:	f001 f903 	bl	8001968 <HAL_GetTick>
 8000762:	4602      	mov	r2, r0
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	429a      	cmp	r2, r3
 800076a:	bf2c      	ite	cs
 800076c:	2301      	movcs	r3, #1
 800076e:	2300      	movcc	r3, #0
 8000770:	b2db      	uxtb	r3, r3
}
 8000772:	4618      	mov	r0, r3
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <warning_limit>:

int warning_limit (fsm_t* this) {
 800077a:	b480      	push	{r7}
 800077c:	b085      	sub	sp, #20
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	60bb      	str	r3, [r7, #8]
	return(config->warning_count >= 2);
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	2b01      	cmp	r3, #1
 8000792:	bfcc      	ite	gt
 8000794:	2301      	movgt	r3, #1
 8000796:	2300      	movle	r3, #0
 8000798:	b2db      	uxtb	r3, r3
}
 800079a:	4618      	mov	r0, r3
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <measuring>:

void measuring (fsm_t* this) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	uint16_t data=0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	82fb      	strh	r3, [r7, #22]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	613b      	str	r3, [r7, #16]
	sensor_t* config = punt->param;
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	60fb      	str	r3, [r7, #12]

//	if(config->adc_channel == 1)
//	{
	HAL_Delay(100);
 80007be:	2064      	movs	r0, #100	; 0x64
 80007c0:	f001 f8de 	bl	8001980 <HAL_Delay>
		data = HAL_ADC_GetValue(&hadc1);
 80007c4:	480f      	ldr	r0, [pc, #60]	; (8000804 <measuring+0x5c>)
 80007c6:	f001 fa3a 	bl	8001c3e <HAL_ADC_GetValue>
 80007ca:	4603      	mov	r3, r0
 80007cc:	82fb      	strh	r3, [r7, #22]
//	}
//	else data = HAL_ADC_GetValue(&hadc2);

	config->data_recovered = config->data_recovered + data;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	885a      	ldrh	r2, [r3, #2]
 80007d2:	8afb      	ldrh	r3, [r7, #22]
 80007d4:	4413      	add	r3, r2
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	805a      	strh	r2, [r3, #2]
	config->measure_count = config->measure_count +1;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	7f1b      	ldrb	r3, [r3, #28]
 80007e0:	3301      	adds	r3, #1
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	771a      	strb	r2, [r3, #28]
	config->measure_timer = HAL_GetTick()+ config->measure_period;
 80007e8:	f001 f8be 	bl	8001968 <HAL_GetTick>
 80007ec:	4602      	mov	r2, r0
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80007f2:	4413      	add	r3, r2
 80007f4:	461a      	mov	r2, r3
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	619a      	str	r2, [r3, #24]
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20004aec 	.word	0x20004aec

08000808 <process_data>:

void process_data (fsm_t* this) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	60bb      	str	r3, [r7, #8]
	config->data_average = config->data_recovered/config->measure_count;
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	885b      	ldrh	r3, [r3, #2]
 800081e:	461a      	mov	r2, r3
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	7f1b      	ldrb	r3, [r3, #28]
 8000824:	fb92 f3f3 	sdiv	r3, r2, r3
 8000828:	b29a      	uxth	r2, r3
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	809a      	strh	r2, [r3, #4]

//	if(config->adc_channel == 1)
	HAL_ADC_Stop(&hadc1);
 800082e:	480d      	ldr	r0, [pc, #52]	; (8000864 <process_data+0x5c>)
 8000830:	f001 f9d2 	bl	8001bd8 <HAL_ADC_Stop>
//	else HAL_ADC_Stop(&hadc2);

	if (config->data_average <= config->threshold_H && config->data_average >= config->threshold_L)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	889a      	ldrh	r2, [r3, #4]
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800083c:	429a      	cmp	r2, r3
 800083e:	d809      	bhi.n	8000854 <process_data+0x4c>
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	889a      	ldrh	r2, [r3, #4]
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000848:	429a      	cmp	r2, r3
 800084a:	d303      	bcc.n	8000854 <process_data+0x4c>
	{
		config->alarm = FALSE;
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	2200      	movs	r2, #0
 8000850:	719a      	strb	r2, [r3, #6]
 8000852:	e002      	b.n	800085a <process_data+0x52>
	}
	else
	{
		config->alarm = TRUE;
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	2201      	movs	r2, #1
 8000858:	719a      	strb	r2, [r3, #6]
	}

}
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20004aec 	.word	0x20004aec

08000868 <alert>:
void alert (fsm_t* this) {
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	60bb      	str	r3, [r7, #8]
	config->warning_count = config->warning_count +1;
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	1c5a      	adds	r2, r3, #1
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	615a      	str	r2, [r3, #20]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <sleep>:

void sleep (fsm_t* this) { // led orange
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	60bb      	str	r3, [r7, #8]
	config->sleep_timer = HAL_GetTick()+config->sleep_period;
 80008a2:	f001 f861 	bl	8001968 <HAL_GetTick>
 80008a6:	4602      	mov	r2, r0
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80008ac:	4413      	add	r3, r2
 80008ae:	461a      	mov	r2, r3
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, RESET);
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	8c1b      	ldrh	r3, [r3, #32]
 80008b8:	2200      	movs	r2, #0
 80008ba:	4619      	mov	r1, r3
 80008bc:	480b      	ldr	r0, [pc, #44]	; (80008ec <sleep+0x5c>)
 80008be:	f001 fe95 	bl	80025ec <HAL_GPIO_WritePin>

	config->sleeping = TRUE;
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	2201      	movs	r2, #1
 80008c6:	725a      	strb	r2, [r3, #9]
	config->measuring = FALSE;
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	2200      	movs	r2, #0
 80008cc:	721a      	strb	r2, [r3, #8]

	if(config->warning_count >= 2)
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	dd03      	ble.n	80008de <sleep+0x4e>
	{
		config->error = TRUE;
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	2201      	movs	r2, #1
 80008da:	71da      	strb	r2, [r3, #7]
	}
	else
	{
		config->error = FALSE;
	}
}
 80008dc:	e002      	b.n	80008e4 <sleep+0x54>
		config->error = FALSE;
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	2200      	movs	r2, #0
 80008e2:	71da      	strb	r2, [r3, #7]
}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40020c00 	.word	0x40020c00

080008f0 <setting_up>:

void setting_up (fsm_t* this) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	60fb      	str	r3, [r7, #12]
	sensor_t* config = punt->param;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	60bb      	str	r3, [r7, #8]
	config->measure_count = 0;
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	2200      	movs	r2, #0
 8000906:	771a      	strb	r2, [r3, #28]
	config->warning_count = 0;
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
	config->data_recovered = 0;
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	2200      	movs	r2, #0
 8000912:	805a      	strh	r2, [r3, #2]
	config->data_average = 0;
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	2200      	movs	r2, #0
 8000918:	809a      	strh	r2, [r3, #4]
	config->setup_timer = HAL_GetTick() + config->setup_period;
 800091a:	f001 f825 	bl	8001968 <HAL_GetTick>
 800091e:	4602      	mov	r2, r0
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000924:	4413      	add	r3, r2
 8000926:	461a      	mov	r2, r3
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOD, config->supply_Pin, SET);
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	8c1b      	ldrh	r3, [r3, #32]
 8000930:	2201      	movs	r2, #1
 8000932:	4619      	mov	r1, r3
 8000934:	4807      	ldr	r0, [pc, #28]	; (8000954 <setting_up+0x64>)
 8000936:	f001 fe59 	bl	80025ec <HAL_GPIO_WritePin>

	//if (config->adc_channel == 1)
		HAL_ADC_Start(&hadc1);
 800093a:	4807      	ldr	r0, [pc, #28]	; (8000958 <setting_up+0x68>)
 800093c:	f001 f886 	bl	8001a4c <HAL_ADC_Start>
	//else HAL_ADC_Start(&hadc2);

	config->measuring = TRUE;
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	2201      	movs	r2, #1
 8000944:	721a      	strb	r2, [r3, #8]
	config->sleeping = FALSE;
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	2200      	movs	r2, #0
 800094a:	725a      	strb	r2, [r3, #9]
}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40020c00 	.word	0x40020c00
 8000958:	20004aec 	.word	0x20004aec

0800095c <save_data>:

void save_data (fsm_t* this)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b091      	sub	sp, #68	; 0x44
 8000960:	af04      	add	r7, sp, #16
 8000962:	6078      	str	r0, [r7, #4]
	sensor_buf_t data2save;

	fsm_sensor_t* punt = (fsm_sensor_t*) this;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
	sensor_t* config = punt->param;
 8000968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28

	data2save.ID = config->ID;
 800096e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000970:	8bdb      	ldrh	r3, [r3, #30]
 8000972:	813b      	strh	r3, [r7, #8]
	data2save.alarm = config->alarm;
 8000974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000976:	799b      	ldrb	r3, [r3, #6]
 8000978:	733b      	strb	r3, [r7, #12]
	data2save.error = config->error;
 800097a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800097c:	79db      	ldrb	r3, [r3, #7]
 800097e:	737b      	strb	r3, [r7, #13]
	data2save.measure = config->data_average;
 8000980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000982:	889b      	ldrh	r3, [r3, #4]
 8000984:	817b      	strh	r3, [r7, #10]
	data2save.threshold_H = config->threshold_H;
 8000986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000988:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800098a:	823b      	strh	r3, [r7, #16]
	data2save.threshold_L = config->threshold_L;
 800098c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000990:	81fb      	strh	r3, [r7, #14]
//	data2save.timestamp =

	save_new_data(data2save);
 8000992:	466c      	mov	r4, sp
 8000994:	f107 0318 	add.w	r3, r7, #24
 8000998:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800099a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009a4:	f7ff fdac 	bl	8000500 <save_new_data>
}
 80009a8:	bf00      	nop
 80009aa:	3734      	adds	r7, #52	; 0x34
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd90      	pop	{r4, r7, pc}

080009b0 <fsm_sensor_init>:
  fsm_param_init (fl, param);
  return fl;
}
#endif

void fsm_sensor_init (fsm_sensor_t* f, sensor_t* c) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  fsm_init ((fsm_t*)f, trans_sensor);
 80009ba:	4905      	ldr	r1, [pc, #20]	; (80009d0 <fsm_sensor_init+0x20>)
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff fdd1 	bl	8000564 <fsm_init>
  f->param = c;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	683a      	ldr	r2, [r7, #0]
 80009c6:	609a      	str	r2, [r3, #8]
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000000 	.word	0x20000000

080009d4 <sensor_initialization>:


void sensor_initialization(sensor_t* sensor, uint16_t ID, uint16_t supply_Pin, uint8_t adc_channel, uint16_t threshold_L, uint16_t threshold_H, uint16_t threshold_Max, uint16_t setup_period, uint16_t sleep_period, uint16_t measure_period, uint16_t measure_average)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	4608      	mov	r0, r1
 80009de:	4611      	mov	r1, r2
 80009e0:	461a      	mov	r2, r3
 80009e2:	4603      	mov	r3, r0
 80009e4:	817b      	strh	r3, [r7, #10]
 80009e6:	460b      	mov	r3, r1
 80009e8:	813b      	strh	r3, [r7, #8]
 80009ea:	4613      	mov	r3, r2
 80009ec:	71fb      	strb	r3, [r7, #7]
	/*SENSOR CONTROL*/
	sensor->active = TRUE;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
	sensor->data_recovered = 0;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	2200      	movs	r2, #0
 80009f8:	805a      	strh	r2, [r3, #2]
	sensor->data_average = 0;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2200      	movs	r2, #0
 80009fe:	809a      	strh	r2, [r3, #4]
	sensor->alarm = FALSE;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2200      	movs	r2, #0
 8000a04:	719a      	strb	r2, [r3, #6]
	sensor->error = FALSE;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	71da      	strb	r2, [r3, #7]
	sensor->measuring = FALSE;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	721a      	strb	r2, [r3, #8]
	sensor->sleeping = FALSE;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2200      	movs	r2, #0
 8000a16:	725a      	strb	r2, [r3, #9]
	sensor->setup_timer = 0;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
	sensor->sleep_timer = 0;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
	sensor->warning_count = 0;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
	sensor->measure_timer = 0;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
	sensor->measure_count = 0;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2200      	movs	r2, #0
 8000a34:	771a      	strb	r2, [r3, #28]

	/*SENSOR PARAMS*/
	sensor->ID = ID;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	897a      	ldrh	r2, [r7, #10]
 8000a3a:	83da      	strh	r2, [r3, #30]
	sensor->supply_Pin = supply_Pin;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	893a      	ldrh	r2, [r7, #8]
 8000a40:	841a      	strh	r2, [r3, #32]
	sensor->adc_channel = adc_channel;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	79fa      	ldrb	r2, [r7, #7]
 8000a46:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sensor->threshold_L = threshold_L;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	8b3a      	ldrh	r2, [r7, #24]
 8000a4e:	849a      	strh	r2, [r3, #36]	; 0x24
	sensor->threshold_H = threshold_H;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	8bba      	ldrh	r2, [r7, #28]
 8000a54:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor->threshold_Max = threshold_Max;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	8c3a      	ldrh	r2, [r7, #32]
 8000a5a:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor->setup_period = setup_period;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000a60:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor->sleep_period = sleep_period;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000a66:	859a      	strh	r2, [r3, #44]	; 0x2c
	sensor->measure_period = measure_period;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000a6c:	85da      	strh	r2, [r3, #46]	; 0x2e
	sensor->measure_average = measure_average;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000a72:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a86:	f000 ff09 	bl	800189c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8a:	f000 f873 	bl	8000b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8e:	f000 f9db 	bl	8000e48 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a92:	f000 f945 	bl	8000d20 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000a96:	f000 f971 	bl	8000d7c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000a9a:	f000 f99f 	bl	8000ddc <MX_SPI1_Init>
  MX_ADC1_Init();
 8000a9e:	f000 f8eb 	bl	8000c78 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  LoRa_initialization();
 8000aa2:	f7ff fd23 	bl	80004ec <LoRa_initialization>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000aa6:	f007 ff19 	bl	80088dc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueueSensor1 */
  myQueueSensor1Handle = osMessageQueueNew (1, sizeof(sensor_t), &myQueueSensor1_attributes);
 8000aaa:	4a1f      	ldr	r2, [pc, #124]	; (8000b28 <main+0xa8>)
 8000aac:	2134      	movs	r1, #52	; 0x34
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f008 f8ba 	bl	8008c28 <osMessageQueueNew>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <main+0xac>)
 8000ab8:	601a      	str	r2, [r3, #0]

  /* creation of myQueueSensor2 */
  myQueueSensor2Handle = osMessageQueueNew (2, sizeof(sensor_t), &myQueueSensor2_attributes);
 8000aba:	4a1d      	ldr	r2, [pc, #116]	; (8000b30 <main+0xb0>)
 8000abc:	2134      	movs	r1, #52	; 0x34
 8000abe:	2002      	movs	r0, #2
 8000ac0:	f008 f8b2 	bl	8008c28 <osMessageQueueNew>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <main+0xb4>)
 8000ac8:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000aca:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <main+0xb8>)
 8000acc:	2100      	movs	r1, #0
 8000ace:	481b      	ldr	r0, [pc, #108]	; (8000b3c <main+0xbc>)
 8000ad0:	f007 ff96 	bl	8008a00 <osThreadNew>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <main+0xc0>)
 8000ad8:	601a      	str	r2, [r3, #0]

  /* creation of myTaskSensor1 */
  myTaskSensor1Handle = osThreadNew(StartTaskSensor1, &fsm_s1, &myTaskSensor1_attributes);
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	4a19      	ldr	r2, [pc, #100]	; (8000b44 <main+0xc4>)
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4819      	ldr	r0, [pc, #100]	; (8000b48 <main+0xc8>)
 8000ae4:	f007 ff8c 	bl	8008a00 <osThreadNew>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <main+0xcc>)
 8000aec:	601a      	str	r2, [r3, #0]

  /* creation of myTaskLoRa */
  myTaskLoRaHandle = osThreadNew(StartTaskLoRa, NULL, &myTaskLoRa_attributes);
 8000aee:	4a18      	ldr	r2, [pc, #96]	; (8000b50 <main+0xd0>)
 8000af0:	2100      	movs	r1, #0
 8000af2:	4818      	ldr	r0, [pc, #96]	; (8000b54 <main+0xd4>)
 8000af4:	f007 ff84 	bl	8008a00 <osThreadNew>
 8000af8:	4602      	mov	r2, r0
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <main+0xd8>)
 8000afc:	601a      	str	r2, [r3, #0]

  /* creation of myTaskSensor2 */
  myTaskSensor2Handle = osThreadNew(StartTaskSensor2, &fsm_s2, &myTaskSensor2_attributes);
 8000afe:	463b      	mov	r3, r7
 8000b00:	4a16      	ldr	r2, [pc, #88]	; (8000b5c <main+0xdc>)
 8000b02:	4619      	mov	r1, r3
 8000b04:	4816      	ldr	r0, [pc, #88]	; (8000b60 <main+0xe0>)
 8000b06:	f007 ff7b 	bl	8008a00 <osThreadNew>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <main+0xe4>)
 8000b0e:	601a      	str	r2, [r3, #0]

  /* creation of myTaskLEDs */
  myTaskLEDsHandle = osThreadNew(StartTaskLEDs, NULL, &myTaskLEDs_attributes);
 8000b10:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <main+0xe8>)
 8000b12:	2100      	movs	r1, #0
 8000b14:	4815      	ldr	r0, [pc, #84]	; (8000b6c <main+0xec>)
 8000b16:	f007 ff73 	bl	8008a00 <osThreadNew>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <main+0xf0>)
 8000b1e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b20:	f007 ff10 	bl	8008944 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <main+0xa4>
 8000b26:	bf00      	nop
 8000b28:	0800c630 	.word	0x0800c630
 8000b2c:	20004bf4 	.word	0x20004bf4
 8000b30:	0800c648 	.word	0x0800c648
 8000b34:	20004b90 	.word	0x20004b90
 8000b38:	0800c57c 	.word	0x0800c57c
 8000b3c:	08001045 	.word	0x08001045
 8000b40:	20004b38 	.word	0x20004b38
 8000b44:	0800c5a0 	.word	0x0800c5a0
 8000b48:	08001059 	.word	0x08001059
 8000b4c:	20004b94 	.word	0x20004b94
 8000b50:	0800c5c4 	.word	0x0800c5c4
 8000b54:	0800111d 	.word	0x0800111d
 8000b58:	20004b34 	.word	0x20004b34
 8000b5c:	0800c5e8 	.word	0x0800c5e8
 8000b60:	08001145 	.word	0x08001145
 8000b64:	20004bf8 	.word	0x20004bf8
 8000b68:	0800c60c 	.word	0x0800c60c
 8000b6c:	08001209 	.word	0x08001209
 8000b70:	20004bf0 	.word	0x20004bf0

08000b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b098      	sub	sp, #96	; 0x60
 8000b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b7e:	2230      	movs	r2, #48	; 0x30
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f00b fbe5 	bl	800c352 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	4b31      	ldr	r3, [pc, #196]	; (8000c70 <SystemClock_Config+0xfc>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a30      	ldr	r2, [pc, #192]	; (8000c70 <SystemClock_Config+0xfc>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <SystemClock_Config+0xfc>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <SystemClock_Config+0x100>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a2a      	ldr	r2, [pc, #168]	; (8000c74 <SystemClock_Config+0x100>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd0:	6013      	str	r3, [r2, #0]
 8000bd2:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <SystemClock_Config+0x100>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bde:	2301      	movs	r3, #1
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000be2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be8:	2302      	movs	r3, #2
 8000bea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bf2:	2308      	movs	r3, #8
 8000bf4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bf6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bfa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c00:	2307      	movs	r3, #7
 8000c02:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f003 ffd1 	bl	8004bb0 <HAL_RCC_OscConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c14:	f000 fb82 	bl	800131c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c18:	230f      	movs	r3, #15
 8000c1a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	2105      	movs	r1, #5
 8000c36:	4618      	mov	r0, r3
 8000c38:	f004 fa2a 	bl	8005090 <HAL_RCC_ClockConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c42:	f000 fb6b 	bl	800131c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c46:	2301      	movs	r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c4a:	23c0      	movs	r3, #192	; 0xc0
 8000c4c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	4618      	mov	r0, r3
 8000c58:	f004 fbf8 	bl	800544c <HAL_RCCEx_PeriphCLKConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000c62:	f000 fb5b 	bl	800131c <Error_Handler>
  }
}
 8000c66:	bf00      	nop
 8000c68:	3760      	adds	r7, #96	; 0x60
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40007000 	.word	0x40007000

08000c78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7e:	463b      	mov	r3, r7
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000c8a:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <MX_ADC1_Init+0x9c>)
 8000c8c:	4a22      	ldr	r2, [pc, #136]	; (8000d18 <MX_ADC1_Init+0xa0>)
 8000c8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c90:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <MX_ADC1_Init+0x9c>)
 8000c92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <MX_ADC1_Init+0x9c>)
 8000c9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <MX_ADC1_Init+0x9c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_ADC1_Init+0x9c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_ADC1_Init+0x9c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <MX_ADC1_Init+0x9c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_ADC1_Init+0x9c>)
 8000cbc:	4a17      	ldr	r2, [pc, #92]	; (8000d1c <MX_ADC1_Init+0xa4>)
 8000cbe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_ADC1_Init+0x9c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <MX_ADC1_Init+0x9c>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_ADC1_Init+0x9c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_ADC1_Init+0x9c>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cda:	480e      	ldr	r0, [pc, #56]	; (8000d14 <MX_ADC1_Init+0x9c>)
 8000cdc:	f000 fe72 	bl	80019c4 <HAL_ADC_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000ce6:	f000 fb19 	bl	800131c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <MX_ADC1_Init+0x9c>)
 8000cfc:	f000 ffac 	bl	8001c58 <HAL_ADC_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000d06:	f000 fb09 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20004aec 	.word	0x20004aec
 8000d18:	40012000 	.word	0x40012000
 8000d1c:	0f000001 	.word	0x0f000001

08000d20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d26:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <MX_I2C1_Init+0x54>)
 8000d28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d2c:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <MX_I2C1_Init+0x58>)
 8000d2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d5c:	4804      	ldr	r0, [pc, #16]	; (8000d70 <MX_I2C1_Init+0x50>)
 8000d5e:	f003 f94f 	bl	8004000 <HAL_I2C_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d68:	f000 fad8 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20004b3c 	.word	0x20004b3c
 8000d74:	40005400 	.word	0x40005400
 8000d78:	000186a0 	.word	0x000186a0

08000d7c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <MX_I2S3_Init+0x54>)
 8000d82:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <MX_I2S3_Init+0x58>)
 8000d84:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_I2S3_Init+0x54>)
 8000d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d8c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <MX_I2S3_Init+0x54>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_I2S3_Init+0x54>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <MX_I2S3_Init+0x54>)
 8000d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_I2S3_Init+0x54>)
 8000da4:	4a0c      	ldr	r2, [pc, #48]	; (8000dd8 <MX_I2S3_Init+0x5c>)
 8000da6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_I2S3_Init+0x54>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <MX_I2S3_Init+0x54>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_I2S3_Init+0x54>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_I2S3_Init+0x54>)
 8000dbc:	f003 fa58 	bl	8004270 <HAL_I2S_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000dc6:	f000 faa9 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20004bfc 	.word	0x20004bfc
 8000dd4:	40003c00 	.word	0x40003c00
 8000dd8:	00017700 	.word	0x00017700

08000ddc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000de0:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000de2:	4a18      	ldr	r2, [pc, #96]	; (8000e44 <MX_SPI1_Init+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000de8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000e28:	220a      	movs	r2, #10
 8000e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000e2e:	f004 fc4b 	bl	80056c8 <HAL_SPI_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e38:	f000 fa70 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20004b98 	.word	0x20004b98
 8000e44:	40013000 	.word	0x40013000

08000e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08c      	sub	sp, #48	; 0x30
 8000e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
 8000e62:	4b71      	ldr	r3, [pc, #452]	; (8001028 <MX_GPIO_Init+0x1e0>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a70      	ldr	r2, [pc, #448]	; (8001028 <MX_GPIO_Init+0x1e0>)
 8000e68:	f043 0310 	orr.w	r3, r3, #16
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b6e      	ldr	r3, [pc, #440]	; (8001028 <MX_GPIO_Init+0x1e0>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0310 	and.w	r3, r3, #16
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	4b6a      	ldr	r3, [pc, #424]	; (8001028 <MX_GPIO_Init+0x1e0>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a69      	ldr	r2, [pc, #420]	; (8001028 <MX_GPIO_Init+0x1e0>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b67      	ldr	r3, [pc, #412]	; (8001028 <MX_GPIO_Init+0x1e0>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	4b63      	ldr	r3, [pc, #396]	; (8001028 <MX_GPIO_Init+0x1e0>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a62      	ldr	r2, [pc, #392]	; (8001028 <MX_GPIO_Init+0x1e0>)
 8000ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b60      	ldr	r3, [pc, #384]	; (8001028 <MX_GPIO_Init+0x1e0>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b5c      	ldr	r3, [pc, #368]	; (8001028 <MX_GPIO_Init+0x1e0>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a5b      	ldr	r2, [pc, #364]	; (8001028 <MX_GPIO_Init+0x1e0>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b59      	ldr	r3, [pc, #356]	; (8001028 <MX_GPIO_Init+0x1e0>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	4b55      	ldr	r3, [pc, #340]	; (8001028 <MX_GPIO_Init+0x1e0>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a54      	ldr	r2, [pc, #336]	; (8001028 <MX_GPIO_Init+0x1e0>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b52      	ldr	r3, [pc, #328]	; (8001028 <MX_GPIO_Init+0x1e0>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b4e      	ldr	r3, [pc, #312]	; (8001028 <MX_GPIO_Init+0x1e0>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a4d      	ldr	r2, [pc, #308]	; (8001028 <MX_GPIO_Init+0x1e0>)
 8000ef4:	f043 0308 	orr.w	r3, r3, #8
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b4b      	ldr	r3, [pc, #300]	; (8001028 <MX_GPIO_Init+0x1e0>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0308 	and.w	r3, r3, #8
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2108      	movs	r1, #8
 8000f0a:	4848      	ldr	r0, [pc, #288]	; (800102c <MX_GPIO_Init+0x1e4>)
 8000f0c:	f001 fb6e 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	2101      	movs	r1, #1
 8000f14:	4846      	ldr	r0, [pc, #280]	; (8001030 <MX_GPIO_Init+0x1e8>)
 8000f16:	f001 fb69 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f24f 0152 	movw	r1, #61522	; 0xf052
 8000f20:	4844      	ldr	r0, [pc, #272]	; (8001034 <MX_GPIO_Init+0x1ec>)
 8000f22:	f001 fb63 	bl	80025ec <HAL_GPIO_WritePin>
                          |Sensor1_Supply_Pin|Audio_RST_Pin|Sensor2_Supply_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f26:	2308      	movs	r3, #8
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	483b      	ldr	r0, [pc, #236]	; (800102c <MX_GPIO_Init+0x1e4>)
 8000f3e:	f001 f9bb 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f42:	2301      	movs	r3, #1
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4835      	ldr	r0, [pc, #212]	; (8001030 <MX_GPIO_Init+0x1e8>)
 8000f5a:	f001 f9ad 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000f5e:	2308      	movs	r3, #8
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f6e:	2305      	movs	r3, #5
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	482d      	ldr	r0, [pc, #180]	; (8001030 <MX_GPIO_Init+0x1e8>)
 8000f7a:	f001 f99d 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f82:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <MX_GPIO_Init+0x1f0>)
 8000f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	4619      	mov	r1, r3
 8000f90:	482a      	ldr	r0, [pc, #168]	; (800103c <MX_GPIO_Init+0x1f4>)
 8000f92:	f001 f991 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f96:	2304      	movs	r3, #4
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4825      	ldr	r0, [pc, #148]	; (8001040 <MX_GPIO_Init+0x1f8>)
 8000faa:	f001 f985 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fc0:	2305      	movs	r3, #5
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	481d      	ldr	r0, [pc, #116]	; (8001040 <MX_GPIO_Init+0x1f8>)
 8000fcc:	f001 f974 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Sensor1_Supply_Pin Audio_RST_Pin Sensor2_Supply_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000fd0:	f24f 0352 	movw	r3, #61522	; 0xf052
 8000fd4:	61fb      	str	r3, [r7, #28]
                          |Sensor1_Supply_Pin|Audio_RST_Pin|Sensor2_Supply_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4812      	ldr	r0, [pc, #72]	; (8001034 <MX_GPIO_Init+0x1ec>)
 8000fea:	f001 f965 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000fee:	2320      	movs	r3, #32
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <MX_GPIO_Init+0x1ec>)
 8001002:	f001 f959 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001006:	2302      	movs	r3, #2
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_GPIO_Init+0x1f0>)
 800100c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4619      	mov	r1, r3
 8001018:	4804      	ldr	r0, [pc, #16]	; (800102c <MX_GPIO_Init+0x1e4>)
 800101a:	f001 f94d 	bl	80022b8 <HAL_GPIO_Init>

}
 800101e:	bf00      	nop
 8001020:	3730      	adds	r7, #48	; 0x30
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40021000 	.word	0x40021000
 8001030:	40020800 	.word	0x40020800
 8001034:	40020c00 	.word	0x40020c00
 8001038:	10120000 	.word	0x10120000
 800103c:	40020000 	.word	0x40020000
 8001040:	40020400 	.word	0x40020400

08001044 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800104c:	f00a fe3a 	bl	800bcc4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001050:	2001      	movs	r0, #1
 8001052:	f007 fd7b 	bl	8008b4c <osDelay>
 8001056:	e7fb      	b.n	8001050 <StartDefaultTask+0xc>

08001058 <StartTaskSensor1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSensor1 */
void StartTaskSensor1(void *argument)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09e      	sub	sp, #120	; 0x78
 800105c:	af08      	add	r7, sp, #32
 800105e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSensor1 */
	uint32_t tDelay = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	657b      	str	r3, [r7, #84]	; 0x54
	sensor_t sensor1;

	ADC_ChannelConfTypeDef sConfig = {0};
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]

    fsm_sensor_t* fsm_s1 = (fsm_sensor_t*)argument;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	653b      	str	r3, [r7, #80]	; 0x50

    sensor_initialization(&sensor1, ID_ph_sensor, Sensor1_Supply_Pin, ADC_Channel1, range_ph_acido, range_ph_basico, range_ph_max, ph_setup_period, ph_sleep_period, ph_measure_period, ph_average);
 8001076:	f107 001c 	add.w	r0, r7, #28
 800107a:	2304      	movs	r3, #4
 800107c:	9306      	str	r3, [sp, #24]
 800107e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001082:	9305      	str	r3, [sp, #20]
 8001084:	f241 3388 	movw	r3, #5000	; 0x1388
 8001088:	9304      	str	r3, [sp, #16]
 800108a:	2332      	movs	r3, #50	; 0x32
 800108c:	9303      	str	r3, [sp, #12]
 800108e:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001092:	9302      	str	r3, [sp, #8]
 8001094:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	f240 23ee 	movw	r3, #750	; 0x2ee
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2301      	movs	r3, #1
 80010a2:	2202      	movs	r2, #2
 80010a4:	2101      	movs	r1, #1
 80010a6:	f7ff fc95 	bl	80009d4 <sensor_initialization>
    fsm_sensor_init(fsm_s1, &sensor1);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80010b2:	f7ff fc7d 	bl	80009b0 <fsm_sensor_init>

    tDelay = osKernelGetTickCount();
 80010b6:	f007 fc7b 	bl	80089b0 <osKernelGetTickCount>
 80010ba:	6578      	str	r0, [r7, #84]	; 0x54
  for(;;)
  {

	/*Select ADC Channel 1*/

	HAL_ADC_Stop(&hadc1);
 80010bc:	4815      	ldr	r0, [pc, #84]	; (8001114 <StartTaskSensor1+0xbc>)
 80010be:	f000 fd8b 	bl	8001bd8 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_1;
 80010c2:	2301      	movs	r3, #1
 80010c4:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 80010c6:	2301      	movs	r3, #1
 80010c8:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	4619      	mov	r1, r3
 80010d4:	480f      	ldr	r0, [pc, #60]	; (8001114 <StartTaskSensor1+0xbc>)
 80010d6:	f000 fdbf 	bl	8001c58 <HAL_ADC_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <StartTaskSensor1+0x8c>
	{
		Error_Handler();
 80010e0:	f000 f91c 	bl	800131c <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 80010e4:	480b      	ldr	r0, [pc, #44]	; (8001114 <StartTaskSensor1+0xbc>)
 80010e6:	f000 fcb1 	bl	8001a4c <HAL_ADC_Start>
	fsm_fire(&(fsm_s1->fsm));
 80010ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fa4b 	bl	8000588 <fsm_fire>
	osMessageQueuePut (myQueueSensor1Handle, fsm_s1->param, 0, 0);
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <StartTaskSensor1+0xc0>)
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010f8:	6899      	ldr	r1, [r3, #8]
 80010fa:	2300      	movs	r3, #0
 80010fc:	2200      	movs	r2, #0
 80010fe:	f007 fe19 	bl	8008d34 <osMessageQueuePut>

	//	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
    tDelay += pdMS_TO_TICKS(SENSOR1_TIME);
 8001102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001104:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001108:	657b      	str	r3, [r7, #84]	; 0x54
    osDelayUntil(tDelay);
 800110a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800110c:	f007 fd4c 	bl	8008ba8 <osDelayUntil>
	HAL_ADC_Stop(&hadc1);
 8001110:	e7d4      	b.n	80010bc <StartTaskSensor1+0x64>
 8001112:	bf00      	nop
 8001114:	20004aec 	.word	0x20004aec
 8001118:	20004bf4 	.word	0x20004bf4

0800111c <StartTaskLoRa>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLoRa */
void StartTaskLoRa(void *argument)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLoRa */
  uint32_t tDelay = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]

  tDelay = osKernelGetTickCount();
 8001128:	f007 fc42 	bl	80089b0 <osKernelGetTickCount>
 800112c:	60f8      	str	r0, [r7, #12]

  /* Infinite loop */
  for(;;)
  {

    send_data();
 800112e:	f7ff f9cf 	bl	80004d0 <send_data>

	tDelay += pdMS_TO_TICKS(SEND_DATA_TIME);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001138:	3310      	adds	r3, #16
 800113a:	60fb      	str	r3, [r7, #12]
    osDelayUntil(tDelay);
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f007 fd33 	bl	8008ba8 <osDelayUntil>
    send_data();
 8001142:	e7f4      	b.n	800112e <StartTaskLoRa+0x12>

08001144 <StartTaskSensor2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSensor2 */
void StartTaskSensor2(void *argument)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b09e      	sub	sp, #120	; 0x78
 8001148:	af08      	add	r7, sp, #32
 800114a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSensor2 */
	uint32_t tDelay = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	657b      	str	r3, [r7, #84]	; 0x54
	sensor_t sensor2;

	ADC_ChannelConfTypeDef sConfig = {0};
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]

	fsm_sensor_t* fsm_s2 = (fsm_sensor_t*)argument;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	653b      	str	r3, [r7, #80]	; 0x50

	sensor_initialization(&sensor2, ID_turbidity_sensor, Sensor2_Supply_Pin, ADC_Channel2, range_turb_min, range_turb_basico, range_turb_max, turb_setup_period, turb_sleep_period, turb_measure_period, turb_average);
 8001162:	f107 001c 	add.w	r0, r7, #28
 8001166:	2304      	movs	r3, #4
 8001168:	9306      	str	r3, [sp, #24]
 800116a:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800116e:	9305      	str	r3, [sp, #20]
 8001170:	f241 537c 	movw	r3, #5500	; 0x157c
 8001174:	9304      	str	r3, [sp, #16]
 8001176:	2341      	movs	r3, #65	; 0x41
 8001178:	9303      	str	r3, [sp, #12]
 800117a:	f44f 7361 	mov.w	r3, #900	; 0x384
 800117e:	9302      	str	r3, [sp, #8]
 8001180:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	f240 23ee 	movw	r3, #750	; 0x2ee
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2302      	movs	r3, #2
 800118e:	2240      	movs	r2, #64	; 0x40
 8001190:	2102      	movs	r1, #2
 8001192:	f7ff fc1f 	bl	80009d4 <sensor_initialization>
	fsm_sensor_init(fsm_s2, &sensor2);
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800119e:	f7ff fc07 	bl	80009b0 <fsm_sensor_init>

	tDelay = osKernelGetTickCount();
 80011a2:	f007 fc05 	bl	80089b0 <osKernelGetTickCount>
 80011a6:	6578      	str	r0, [r7, #84]	; 0x54
	/* Infinite loop */
	/* Infinite loop */
	for(;;)
	{
		/*Select ADC Channel 2*/
		HAL_ADC_Stop(&hadc1);
 80011a8:	4815      	ldr	r0, [pc, #84]	; (8001200 <StartTaskSensor2+0xbc>)
 80011aa:	f000 fd15 	bl	8001bd8 <HAL_ADC_Stop>
		sConfig.Channel = ADC_CHANNEL_9;
 80011ae:	2309      	movs	r3, #9
 80011b0:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]

		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	4619      	mov	r1, r3
 80011c0:	480f      	ldr	r0, [pc, #60]	; (8001200 <StartTaskSensor2+0xbc>)
 80011c2:	f000 fd49 	bl	8001c58 <HAL_ADC_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <StartTaskSensor2+0x8c>
		{
			Error_Handler();
 80011cc:	f000 f8a6 	bl	800131c <Error_Handler>
		}
		HAL_ADC_Start(&hadc1);
 80011d0:	480b      	ldr	r0, [pc, #44]	; (8001200 <StartTaskSensor2+0xbc>)
 80011d2:	f000 fc3b 	bl	8001a4c <HAL_ADC_Start>
		fsm_fire(&(fsm_s2->fsm));
 80011d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f9d5 	bl	8000588 <fsm_fire>

		osMessageQueuePut (myQueueSensor2Handle, fsm_s2->param, 0, 0);
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <StartTaskSensor2+0xc0>)
 80011e0:	6818      	ldr	r0, [r3, #0]
 80011e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011e4:	6899      	ldr	r1, [r3, #8]
 80011e6:	2300      	movs	r3, #0
 80011e8:	2200      	movs	r2, #0
 80011ea:	f007 fda3 	bl	8008d34 <osMessageQueuePut>
		tDelay += pdMS_TO_TICKS(SENSOR2_TIME);
 80011ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011f0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80011f4:	657b      	str	r3, [r7, #84]	; 0x54
		osDelayUntil(tDelay);
 80011f6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80011f8:	f007 fcd6 	bl	8008ba8 <osDelayUntil>
		HAL_ADC_Stop(&hadc1);
 80011fc:	e7d4      	b.n	80011a8 <StartTaskSensor2+0x64>
 80011fe:	bf00      	nop
 8001200:	20004aec 	.word	0x20004aec
 8001204:	20004b90 	.word	0x20004b90

08001208 <StartTaskLEDs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLEDs */
void StartTaskLEDs(void *argument)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b09e      	sub	sp, #120	; 0x78
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLEDs */
	uint32_t tDelay = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	677b      	str	r3, [r7, #116]	; 0x74
	sensor_t sensor1;
	sensor_t sensor2;

	tDelay = osKernelGetTickCount();
 8001214:	f007 fbcc 	bl	80089b0 <osKernelGetTickCount>
 8001218:	6778      	str	r0, [r7, #116]	; 0x74

  /* Infinite loop */
  for(;;)
  {
		osMessageQueueGet (myQueueSensor1Handle, &sensor1, NULL, 0);
 800121a:	4b3d      	ldr	r3, [pc, #244]	; (8001310 <StartTaskLEDs+0x108>)
 800121c:	6818      	ldr	r0, [r3, #0]
 800121e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001222:	2300      	movs	r3, #0
 8001224:	2200      	movs	r2, #0
 8001226:	f007 fdf9 	bl	8008e1c <osMessageQueueGet>
		osMessageQueueGet (myQueueSensor2Handle, &sensor2, NULL, 0);
 800122a:	4b3a      	ldr	r3, [pc, #232]	; (8001314 <StartTaskLEDs+0x10c>)
 800122c:	6818      	ldr	r0, [r3, #0]
 800122e:	f107 010c 	add.w	r1, r7, #12
 8001232:	2300      	movs	r3, #0
 8001234:	2200      	movs	r2, #0
 8001236:	f007 fdf1 	bl	8008e1c <osMessageQueueGet>


		if(sensor1.measuring == TRUE || sensor2.measuring == TRUE) /*LED BLUE => MEASURING*/
 800123a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800123e:	2b01      	cmp	r3, #1
 8001240:	d002      	beq.n	8001248 <StartTaskLEDs+0x40>
 8001242:	7d3b      	ldrb	r3, [r7, #20]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d10c      	bne.n	8001262 <StartTaskLEDs+0x5a>
		{
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, SET);
 8001248:	2201      	movs	r2, #1
 800124a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800124e:	4832      	ldr	r0, [pc, #200]	; (8001318 <StartTaskLEDs+0x110>)
 8001250:	f001 f9cc 	bl	80025ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800125a:	482f      	ldr	r0, [pc, #188]	; (8001318 <StartTaskLEDs+0x110>)
 800125c:	f001 f9c6 	bl	80025ec <HAL_GPIO_WritePin>
 8001260:	e039      	b.n	80012d6 <StartTaskLEDs+0xce>
		}
		else
		{
			if(sensor1.sleeping == TRUE && sensor2.sleeping == TRUE)
 8001262:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001266:	2b01      	cmp	r3, #1
 8001268:	d129      	bne.n	80012be <StartTaskLEDs+0xb6>
 800126a:	7d7b      	ldrb	r3, [r7, #21]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d126      	bne.n	80012be <StartTaskLEDs+0xb6>
			{
				HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001276:	4828      	ldr	r0, [pc, #160]	; (8001318 <StartTaskLEDs+0x110>)
 8001278:	f001 f9b8 	bl	80025ec <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 800127c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001280:	2b01      	cmp	r3, #1
 8001282:	d002      	beq.n	800128a <StartTaskLEDs+0x82>
 8001284:	7cfb      	ldrb	r3, [r7, #19]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d10c      	bne.n	80012a4 <StartTaskLEDs+0x9c>
				{
					HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 800128a:	2201      	movs	r2, #1
 800128c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001290:	4821      	ldr	r0, [pc, #132]	; (8001318 <StartTaskLEDs+0x110>)
 8001292:	f001 f9ab 	bl	80025ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800129c:	481e      	ldr	r0, [pc, #120]	; (8001318 <StartTaskLEDs+0x110>)
 800129e:	f001 f9a5 	bl	80025ec <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 80012a2:	e018      	b.n	80012d6 <StartTaskLEDs+0xce>
				}
				else	/*GREEN LED => SLEEPING ALL OK*/
				{
					HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012aa:	481b      	ldr	r0, [pc, #108]	; (8001318 <StartTaskLEDs+0x110>)
 80012ac:	f001 f99e 	bl	80025ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b6:	4818      	ldr	r0, [pc, #96]	; (8001318 <StartTaskLEDs+0x110>)
 80012b8:	f001 f998 	bl	80025ec <HAL_GPIO_WritePin>
				if(sensor1.error == TRUE || sensor2.error == TRUE) /*RED LED => SLEEPING SOMETHING WRONG*/
 80012bc:	e00b      	b.n	80012d6 <StartTaskLEDs+0xce>
				}

			}
			else /*STATE UNREACHABLE*/
			{
				HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c4:	4814      	ldr	r0, [pc, #80]	; (8001318 <StartTaskLEDs+0x110>)
 80012c6:	f001 f991 	bl	80025ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d0:	4811      	ldr	r0, [pc, #68]	; (8001318 <StartTaskLEDs+0x110>)
 80012d2:	f001 f98b 	bl	80025ec <HAL_GPIO_WritePin>
			}
		}

		if(sensor1.alarm == TRUE || sensor2.alarm == TRUE) HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 80012d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d002      	beq.n	80012e4 <StartTaskLEDs+0xdc>
 80012de:	7cbb      	ldrb	r3, [r7, #18]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d106      	bne.n	80012f2 <StartTaskLEDs+0xea>
 80012e4:	2201      	movs	r2, #1
 80012e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ea:	480b      	ldr	r0, [pc, #44]	; (8001318 <StartTaskLEDs+0x110>)
 80012ec:	f001 f97e 	bl	80025ec <HAL_GPIO_WritePin>
 80012f0:	e005      	b.n	80012fe <StartTaskLEDs+0xf6>
		else HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f8:	4807      	ldr	r0, [pc, #28]	; (8001318 <StartTaskLEDs+0x110>)
 80012fa:	f001 f977 	bl	80025ec <HAL_GPIO_WritePin>

		tDelay += pdMS_TO_TICKS(SENSOR2_TIME);
 80012fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001300:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001304:	677b      	str	r3, [r7, #116]	; 0x74
	    osDelayUntil(tDelay);
 8001306:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001308:	f007 fc4e 	bl	8008ba8 <osDelayUntil>
		osMessageQueueGet (myQueueSensor1Handle, &sensor1, NULL, 0);
 800130c:	e785      	b.n	800121a <StartTaskLEDs+0x12>
 800130e:	bf00      	nop
 8001310:	20004bf4 	.word	0x20004bf4
 8001314:	20004b90 	.word	0x20004b90
 8001318:	40020c00 	.word	0x40020c00

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <ringbuf_init>:
#define NEXT(A) (A+1)==(RBUF_SIZE)?0:A+1 //Si la siguiente posici�n es el tama�o m�ximo del buffer se apunta al primero de nuevo.


/*RingBuffer initialization*/
void ringbuf_init(rbuf_t *_this, int size)
{
 800132a:	b480      	push	{r7}
 800132c:	b085      	sub	sp, #20
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
   rbuf_t *p = (rbuf_t*)_this->buf;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	60fb      	str	r3, [r7, #12]

   if( (p == NULL) || (size!=sizeof(_this->buf))){
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d002      	beq.n	8001344 <ringbuf_init+0x1a>
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	2b60      	cmp	r3, #96	; 0x60
 8001342:	d003      	beq.n	800134c <ringbuf_init+0x22>

	 p=NULL;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
     size = sizeof(_this->buf);
 8001348:	2360      	movs	r3, #96	; 0x60
 800134a:	603b      	str	r3, [r7, #0]
   }
  _this->head = 0;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	661a      	str	r2, [r3, #96]	; 0x60
  _this->tail = 0;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	665a      	str	r2, [r3, #100]	; 0x64
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <ringbuf_put>:

/*RingBuffer put value*/
void ringbuf_put(rbuf_t* _this, sensor_buf_t item)
{
 8001364:	b084      	sub	sp, #16
 8001366:	b4b0      	push	{r4, r5, r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	f107 001c 	add.w	r0, r7, #28
 8001372:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if(NEXT(_this->head) != 0){
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137a:	2b02      	cmp	r3, #2
 800137c:	d018      	beq.n	80013b0 <ringbuf_put+0x4c>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001386:	d013      	beq.n	80013b0 <ringbuf_put+0x4c>
  _this->buf[_this->head] = item;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	015b      	lsls	r3, r3, #5
 8001390:	4413      	add	r3, r2
 8001392:	461d      	mov	r5, r3
 8001394:	f107 041c 	add.w	r4, r7, #28
 8001398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800139c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013a0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  _this->head++;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	661a      	str	r2, [r3, #96]	; 0x60
 80013ae:	e013      	b.n	80013d8 <ringbuf_put+0x74>
  }
  else
  {
  _this->buf[_this->head] = item;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	015b      	lsls	r3, r3, #5
 80013b8:	4413      	add	r3, r2
 80013ba:	461d      	mov	r5, r3
 80013bc:	f107 041c 	add.w	r4, r7, #28
 80013c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013c8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  _this->head = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	661a      	str	r2, [r3, #96]	; 0x60
  _this->tail = RBUF_SIZE - 1; /*Full buffer, reload.*/
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2202      	movs	r2, #2
 80013d6:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bcb0      	pop	{r4, r5, r7}
 80013e0:	b004      	add	sp, #16
 80013e2:	4770      	bx	lr

080013e4 <ringbuf_get>:
//  }
//}

/*RingBuffer Get value*/
sensor_buf_t ringbuf_get(rbuf_t* _this)
{
 80013e4:	b4b0      	push	{r4, r5, r7}
 80013e6:	b08b      	sub	sp, #44	; 0x2c
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
	sensor_buf_t item;

	if (_this->tail != _this->head)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d01f      	beq.n	800143a <ringbuf_get+0x56>
	{
		item = _this->buf[_this->tail];
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	015b      	lsls	r3, r3, #5
 8001402:	4413      	add	r3, r2
 8001404:	f107 0408 	add.w	r4, r7, #8
 8001408:	461d      	mov	r5, r3
 800140a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001412:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if (NEXT(_this->tail) != 0)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800141a:	2b02      	cmp	r3, #2
 800141c:	d00a      	beq.n	8001434 <ringbuf_get+0x50>
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001426:	d005      	beq.n	8001434 <ringbuf_get+0x50>
		{
			_this->tail++;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	665a      	str	r2, [r3, #100]	; 0x64
 8001432:	e002      	b.n	800143a <ringbuf_get+0x56>
		}
		else
		{
			_this->tail = 0;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	2200      	movs	r2, #0
 8001438:	665a      	str	r2, [r3, #100]	; 0x64
		}
    }
	return item;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	461d      	mov	r5, r3
 800143e:	f107 0408 	add.w	r4, r7, #8
 8001442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001446:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800144a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	372c      	adds	r7, #44	; 0x2c
 8001452:	46bd      	mov	sp, r7
 8001454:	bcb0      	pop	{r4, r5, r7}
 8001456:	4770      	bx	lr

08001458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_MspInit+0x54>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	4a11      	ldr	r2, [pc, #68]	; (80014ac <HAL_MspInit+0x54>)
 8001468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146c:	6453      	str	r3, [r2, #68]	; 0x44
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <HAL_MspInit+0x54>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <HAL_MspInit+0x54>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <HAL_MspInit+0x54>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <HAL_MspInit+0x54>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	210f      	movs	r1, #15
 800149a:	f06f 0001 	mvn.w	r0, #1
 800149e:	f000 fed4 	bl	800224a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800

080014b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a24      	ldr	r2, [pc, #144]	; (8001560 <HAL_ADC_MspInit+0xb0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d141      	bne.n	8001556 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b23      	ldr	r3, [pc, #140]	; (8001564 <HAL_ADC_MspInit+0xb4>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	4a22      	ldr	r2, [pc, #136]	; (8001564 <HAL_ADC_MspInit+0xb4>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e0:	6453      	str	r3, [r2, #68]	; 0x44
 80014e2:	4b20      	ldr	r3, [pc, #128]	; (8001564 <HAL_ADC_MspInit+0xb4>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <HAL_ADC_MspInit+0xb4>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a1b      	ldr	r2, [pc, #108]	; (8001564 <HAL_ADC_MspInit+0xb4>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <HAL_ADC_MspInit+0xb4>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_ADC_MspInit+0xb4>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a14      	ldr	r2, [pc, #80]	; (8001564 <HAL_ADC_MspInit+0xb4>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_ADC_MspInit+0xb4>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = ADC_Sensor1_Pin;
 8001526:	2302      	movs	r3, #2
 8001528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152a:	2303      	movs	r3, #3
 800152c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_Sensor1_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <HAL_ADC_MspInit+0xb8>)
 800153a:	f000 febd 	bl	80022b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_Sensor2_Pin;
 800153e:	2302      	movs	r3, #2
 8001540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001542:	2303      	movs	r3, #3
 8001544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_Sensor2_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4806      	ldr	r0, [pc, #24]	; (800156c <HAL_ADC_MspInit+0xbc>)
 8001552:	f000 feb1 	bl	80022b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	; 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40012000 	.word	0x40012000
 8001564:	40023800 	.word	0x40023800
 8001568:	40020000 	.word	0x40020000
 800156c:	40020400 	.word	0x40020400

08001570 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <HAL_I2C_MspInit+0x84>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d12c      	bne.n	80015ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80015ae:	f44f 7310 	mov.w	r3, #576	; 0x240
 80015b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b4:	2312      	movs	r3, #18
 80015b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c0:	2304      	movs	r3, #4
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	480c      	ldr	r0, [pc, #48]	; (80015fc <HAL_I2C_MspInit+0x8c>)
 80015cc:	f000 fe74 	bl	80022b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 80015da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015de:	6413      	str	r3, [r2, #64]	; 0x40
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015ec:	bf00      	nop
 80015ee:	3728      	adds	r7, #40	; 0x28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40005400 	.word	0x40005400
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020400 	.word	0x40020400

08001600 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a28      	ldr	r2, [pc, #160]	; (80016c0 <HAL_I2S_MspInit+0xc0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d14a      	bne.n	80016b8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <HAL_I2S_MspInit+0xc4>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a26      	ldr	r2, [pc, #152]	; (80016c4 <HAL_I2S_MspInit+0xc4>)
 800162c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b24      	ldr	r3, [pc, #144]	; (80016c4 <HAL_I2S_MspInit+0xc4>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <HAL_I2S_MspInit+0xc4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a1f      	ldr	r2, [pc, #124]	; (80016c4 <HAL_I2S_MspInit+0xc4>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <HAL_I2S_MspInit+0xc4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <HAL_I2S_MspInit+0xc4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a18      	ldr	r2, [pc, #96]	; (80016c4 <HAL_I2S_MspInit+0xc4>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <HAL_I2S_MspInit+0xc4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001676:	2310      	movs	r3, #16
 8001678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001686:	2306      	movs	r3, #6
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	480d      	ldr	r0, [pc, #52]	; (80016c8 <HAL_I2S_MspInit+0xc8>)
 8001692:	f000 fe11 	bl	80022b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001696:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800169a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016a8:	2306      	movs	r3, #6
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	4806      	ldr	r0, [pc, #24]	; (80016cc <HAL_I2S_MspInit+0xcc>)
 80016b4:	f000 fe00 	bl	80022b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016b8:	bf00      	nop
 80016ba:	3728      	adds	r7, #40	; 0x28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40003c00 	.word	0x40003c00
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020000 	.word	0x40020000
 80016cc:	40020800 	.word	0x40020800

080016d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a19      	ldr	r2, [pc, #100]	; (8001754 <HAL_SPI_MspInit+0x84>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d12b      	bne.n	800174a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <HAL_SPI_MspInit+0x88>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a17      	ldr	r2, [pc, #92]	; (8001758 <HAL_SPI_MspInit+0x88>)
 80016fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_SPI_MspInit+0x88>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_SPI_MspInit+0x88>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <HAL_SPI_MspInit+0x88>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_SPI_MspInit+0x88>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800172a:	23e0      	movs	r3, #224	; 0xe0
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800173a:	2305      	movs	r3, #5
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	4805      	ldr	r0, [pc, #20]	; (800175c <HAL_SPI_MspInit+0x8c>)
 8001746:	f000 fdb7 	bl	80022b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	3728      	adds	r7, #40	; 0x28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40013000 	.word	0x40013000
 8001758:	40023800 	.word	0x40023800
 800175c:	40020000 	.word	0x40020000

08001760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <HardFault_Handler+0x4>

08001774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <MemManage_Handler+0x4>

0800177a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <UsageFault_Handler+0x4>

08001786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001798:	f000 f8d2 	bl	8001940 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800179c:	f009 f972 	bl	800aa84 <xTaskGetSchedulerState>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d001      	beq.n	80017aa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80017a6:	f009 ff47 	bl	800b638 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <OTG_FS_IRQHandler+0x10>)
 80017b6:	f001 f9c1 	bl	8002b3c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20005090 	.word	0x20005090

080017c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <_sbrk+0x50>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <_sbrk+0x16>
		heap_end = &end;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <_sbrk+0x50>)
 80017d6:	4a10      	ldr	r2, [pc, #64]	; (8001818 <_sbrk+0x54>)
 80017d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <_sbrk+0x50>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <_sbrk+0x50>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	466a      	mov	r2, sp
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d907      	bls.n	80017fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80017ee:	f00a fd6b 	bl	800c2c8 <__errno>
 80017f2:	4602      	mov	r2, r0
 80017f4:	230c      	movs	r3, #12
 80017f6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295
 80017fc:	e006      	b.n	800180c <_sbrk+0x48>
	}

	heap_end += incr;
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <_sbrk+0x50>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	4a03      	ldr	r2, [pc, #12]	; (8001814 <_sbrk+0x50>)
 8001808:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000150 	.word	0x20000150
 8001818:	20005358 	.word	0x20005358

0800181c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <SystemInit+0x28>)
 8001822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001826:	4a07      	ldr	r2, [pc, #28]	; (8001844 <SystemInit+0x28>)
 8001828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800182c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <SystemInit+0x28>)
 8001832:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001836:	609a      	str	r2, [r3, #8]
#endif
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001880 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800184c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800184e:	e003      	b.n	8001858 <LoopCopyDataInit>

08001850 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001852:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001854:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001856:	3104      	adds	r1, #4

08001858 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001858:	480b      	ldr	r0, [pc, #44]	; (8001888 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800185c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800185e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001860:	d3f6      	bcc.n	8001850 <CopyDataInit>
  ldr  r2, =_sbss
 8001862:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001864:	e002      	b.n	800186c <LoopFillZerobss>

08001866 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001866:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001868:	f842 3b04 	str.w	r3, [r2], #4

0800186c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800186e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001870:	d3f9      	bcc.n	8001866 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001872:	f7ff ffd3 	bl	800181c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001876:	f00a fd2d 	bl	800c2d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800187a:	f7ff f901 	bl	8000a80 <main>
  bx  lr    
 800187e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001880:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001884:	0800c688 	.word	0x0800c688
  ldr  r0, =_sdata
 8001888:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800188c:	20000134 	.word	0x20000134
  ldr  r2, =_sbss
 8001890:	20000134 	.word	0x20000134
  ldr  r3, = _ebss
 8001894:	20005358 	.word	0x20005358

08001898 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC_IRQHandler>
	...

0800189c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <HAL_Init+0x40>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_Init+0x40>)
 80018b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_Init+0x40>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a07      	ldr	r2, [pc, #28]	; (80018dc <HAL_Init+0x40>)
 80018be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c4:	2003      	movs	r0, #3
 80018c6:	f000 fcb5 	bl	8002234 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ca:	200f      	movs	r0, #15
 80018cc:	f000 f808 	bl	80018e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d0:	f7ff fdc2 	bl	8001458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023c00 	.word	0x40023c00

080018e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_InitTick+0x54>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_InitTick+0x58>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 fccd 	bl	800229e <HAL_SYSTICK_Config>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e00e      	b.n	800192c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b0f      	cmp	r3, #15
 8001912:	d80a      	bhi.n	800192a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001914:	2200      	movs	r2, #0
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f000 fc95 	bl	800224a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001920:	4a06      	ldr	r2, [pc, #24]	; (800193c <HAL_InitTick+0x5c>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e000      	b.n	800192c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200000a0 	.word	0x200000a0
 8001938:	200000a8 	.word	0x200000a8
 800193c:	200000a4 	.word	0x200000a4

08001940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x20>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_IncTick+0x24>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4413      	add	r3, r2
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <HAL_IncTick+0x24>)
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	200000a8 	.word	0x200000a8
 8001964:	20004c44 	.word	0x20004c44

08001968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <HAL_GetTick+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20004c44 	.word	0x20004c44

08001980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff ffee 	bl	8001968 <HAL_GetTick>
 800198c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001998:	d005      	beq.n	80019a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_Delay+0x40>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019a6:	bf00      	nop
 80019a8:	f7ff ffde 	bl	8001968 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d8f7      	bhi.n	80019a8 <HAL_Delay+0x28>
  {
  }
}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200000a8 	.word	0x200000a8

080019c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e033      	b.n	8001a42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fd64 	bl	80014b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d118      	bne.n	8001a34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a0a:	f023 0302 	bic.w	r3, r3, #2
 8001a0e:	f043 0202 	orr.w	r2, r3, #2
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 fa40 	bl	8001e9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f023 0303 	bic.w	r3, r3, #3
 8001a2a:	f043 0201 	orr.w	r2, r3, #1
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40
 8001a32:	e001      	b.n	8001a38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_Start+0x1a>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e0a5      	b.n	8001bb2 <HAL_ADC_Start+0x166>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d018      	beq.n	8001aae <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a8c:	4b4c      	ldr	r3, [pc, #304]	; (8001bc0 <HAL_ADC_Start+0x174>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a4c      	ldr	r2, [pc, #304]	; (8001bc4 <HAL_ADC_Start+0x178>)
 8001a92:	fba2 2303 	umull	r2, r3, r2, r3
 8001a96:	0c9a      	lsrs	r2, r3, #18
 8001a98:	4613      	mov	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001aa0:	e002      	b.n	8001aa8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f9      	bne.n	8001aa2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d179      	bne.n	8001bb0 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d007      	beq.n	8001aee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ae6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001afa:	d106      	bne.n	8001b0a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	f023 0206 	bic.w	r2, r3, #6
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	645a      	str	r2, [r3, #68]	; 0x44
 8001b08:	e002      	b.n	8001b10 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b18:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <HAL_ADC_Start+0x17c>)
 8001b1a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b24:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d12a      	bne.n	8001b88 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a25      	ldr	r2, [pc, #148]	; (8001bcc <HAL_ADC_Start+0x180>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d015      	beq.n	8001b68 <HAL_ADC_Start+0x11c>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a23      	ldr	r2, [pc, #140]	; (8001bd0 <HAL_ADC_Start+0x184>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d105      	bne.n	8001b52 <HAL_ADC_Start+0x106>
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <HAL_ADC_Start+0x17c>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 031f 	and.w	r3, r3, #31
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00a      	beq.n	8001b68 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a1f      	ldr	r2, [pc, #124]	; (8001bd4 <HAL_ADC_Start+0x188>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d129      	bne.n	8001bb0 <HAL_ADC_Start+0x164>
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <HAL_ADC_Start+0x17c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	2b0f      	cmp	r3, #15
 8001b66:	d823      	bhi.n	8001bb0 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d11c      	bne.n	8001bb0 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	e013      	b.n	8001bb0 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <HAL_ADC_Start+0x180>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d10e      	bne.n	8001bb0 <HAL_ADC_Start+0x164>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d107      	bne.n	8001bb0 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bae:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	200000a0 	.word	0x200000a0
 8001bc4:	431bde83 	.word	0x431bde83
 8001bc8:	40012300 	.word	0x40012300
 8001bcc:	40012000 	.word	0x40012000
 8001bd0:	40012100 	.word	0x40012100
 8001bd4:	40012200 	.word	0x40012200

08001bd8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_ADC_Stop+0x16>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e021      	b.n	8001c32 <HAL_ADC_Stop+0x5a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0201 	bic.w	r2, r2, #1
 8001c04:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d109      	bne.n	8001c28 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c1c:	f023 0301 	bic.w	r3, r3, #1
 8001c20:	f043 0201 	orr.w	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x1c>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e105      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x228>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b09      	cmp	r3, #9
 8001c82:	d925      	bls.n	8001cd0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68d9      	ldr	r1, [r3, #12]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	4613      	mov	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	3b1e      	subs	r3, #30
 8001c9a:	2207      	movs	r2, #7
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43da      	mvns	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68d9      	ldr	r1, [r3, #12]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4403      	add	r3, r0
 8001cc2:	3b1e      	subs	r3, #30
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	e022      	b.n	8001d16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6919      	ldr	r1, [r3, #16]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4613      	mov	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	400a      	ands	r2, r1
 8001cf2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6919      	ldr	r1, [r3, #16]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	4618      	mov	r0, r3
 8001d06:	4603      	mov	r3, r0
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4403      	add	r3, r0
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b06      	cmp	r3, #6
 8001d1c:	d824      	bhi.n	8001d68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3b05      	subs	r3, #5
 8001d30:	221f      	movs	r2, #31
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	3b05      	subs	r3, #5
 8001d5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	635a      	str	r2, [r3, #52]	; 0x34
 8001d66:	e04c      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b0c      	cmp	r3, #12
 8001d6e:	d824      	bhi.n	8001dba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	3b23      	subs	r3, #35	; 0x23
 8001d82:	221f      	movs	r2, #31
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43da      	mvns	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	400a      	ands	r2, r1
 8001d90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	3b23      	subs	r3, #35	; 0x23
 8001dac:	fa00 f203 	lsl.w	r2, r0, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	631a      	str	r2, [r3, #48]	; 0x30
 8001db8:	e023      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	3b41      	subs	r3, #65	; 0x41
 8001dcc:	221f      	movs	r2, #31
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	400a      	ands	r2, r1
 8001dda:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	4618      	mov	r0, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	3b41      	subs	r3, #65	; 0x41
 8001df6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e02:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <HAL_ADC_ConfigChannel+0x234>)
 8001e04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a21      	ldr	r2, [pc, #132]	; (8001e90 <HAL_ADC_ConfigChannel+0x238>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d109      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x1cc>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b12      	cmp	r3, #18
 8001e16:	d105      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a19      	ldr	r2, [pc, #100]	; (8001e90 <HAL_ADC_ConfigChannel+0x238>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d123      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x21e>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b10      	cmp	r3, #16
 8001e34:	d003      	beq.n	8001e3e <HAL_ADC_ConfigChannel+0x1e6>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b11      	cmp	r3, #17
 8001e3c:	d11b      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b10      	cmp	r3, #16
 8001e50:	d111      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <HAL_ADC_ConfigChannel+0x23c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a10      	ldr	r2, [pc, #64]	; (8001e98 <HAL_ADC_ConfigChannel+0x240>)
 8001e58:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5c:	0c9a      	lsrs	r2, r3, #18
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e68:	e002      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f9      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	40012300 	.word	0x40012300
 8001e90:	40012000 	.word	0x40012000
 8001e94:	200000a0 	.word	0x200000a0
 8001e98:	431bde83 	.word	0x431bde83

08001e9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ea4:	4b79      	ldr	r3, [pc, #484]	; (800208c <ADC_Init+0x1f0>)
 8001ea6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ed0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6859      	ldr	r1, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	021a      	lsls	r2, r3, #8
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ef4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6899      	ldr	r1, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	4a58      	ldr	r2, [pc, #352]	; (8002090 <ADC_Init+0x1f4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d022      	beq.n	8001f7a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6899      	ldr	r1, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6899      	ldr	r1, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	e00f      	b.n	8001f9a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f98:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0202 	bic.w	r2, r2, #2
 8001fa8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6899      	ldr	r1, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7e1b      	ldrb	r3, [r3, #24]
 8001fb4:	005a      	lsls	r2, r3, #1
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01b      	beq.n	8002000 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fd6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fe6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6859      	ldr	r1, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	035a      	lsls	r2, r3, #13
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	e007      	b.n	8002010 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800200e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	3b01      	subs	r3, #1
 800202c:	051a      	lsls	r2, r3, #20
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002044:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6899      	ldr	r1, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002052:	025a      	lsls	r2, r3, #9
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800206a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6899      	ldr	r1, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	029a      	lsls	r2, r3, #10
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	609a      	str	r2, [r3, #8]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	40012300 	.word	0x40012300
 8002090:	0f000001 	.word	0x0f000001

08002094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b0:	4013      	ands	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c6:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	60d3      	str	r3, [r2, #12]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <__NVIC_GetPriorityGrouping+0x18>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	f003 0307 	and.w	r3, r3, #7
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	2b00      	cmp	r3, #0
 8002108:	db0b      	blt.n	8002122 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	4907      	ldr	r1, [pc, #28]	; (8002130 <__NVIC_EnableIRQ+0x38>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	2001      	movs	r0, #1
 800211a:	fa00 f202 	lsl.w	r2, r0, r2
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000e100 	.word	0xe000e100

08002134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002144:	2b00      	cmp	r3, #0
 8002146:	db0a      	blt.n	800215e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	490c      	ldr	r1, [pc, #48]	; (8002180 <__NVIC_SetPriority+0x4c>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	0112      	lsls	r2, r2, #4
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	440b      	add	r3, r1
 8002158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800215c:	e00a      	b.n	8002174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4908      	ldr	r1, [pc, #32]	; (8002184 <__NVIC_SetPriority+0x50>)
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	3b04      	subs	r3, #4
 800216c:	0112      	lsls	r2, r2, #4
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	440b      	add	r3, r1
 8002172:	761a      	strb	r2, [r3, #24]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000e100 	.word	0xe000e100
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	; 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f1c3 0307 	rsb	r3, r3, #7
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	bf28      	it	cs
 80021a6:	2304      	movcs	r3, #4
 80021a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3304      	adds	r3, #4
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	d902      	bls.n	80021b8 <NVIC_EncodePriority+0x30>
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3b03      	subs	r3, #3
 80021b6:	e000      	b.n	80021ba <NVIC_EncodePriority+0x32>
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43da      	mvns	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	401a      	ands	r2, r3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	43d9      	mvns	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	4313      	orrs	r3, r2
         );
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002200:	d301      	bcc.n	8002206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002202:	2301      	movs	r3, #1
 8002204:	e00f      	b.n	8002226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002206:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <SysTick_Config+0x40>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220e:	210f      	movs	r1, #15
 8002210:	f04f 30ff 	mov.w	r0, #4294967295
 8002214:	f7ff ff8e 	bl	8002134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <SysTick_Config+0x40>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221e:	4b04      	ldr	r3, [pc, #16]	; (8002230 <SysTick_Config+0x40>)
 8002220:	2207      	movs	r2, #7
 8002222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	e000e010 	.word	0xe000e010

08002234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ff29 	bl	8002094 <__NVIC_SetPriorityGrouping>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800224a:	b580      	push	{r7, lr}
 800224c:	b086      	sub	sp, #24
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800225c:	f7ff ff3e 	bl	80020dc <__NVIC_GetPriorityGrouping>
 8002260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	6978      	ldr	r0, [r7, #20]
 8002268:	f7ff ff8e 	bl	8002188 <NVIC_EncodePriority>
 800226c:	4602      	mov	r2, r0
 800226e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff5d 	bl	8002134 <__NVIC_SetPriority>
}
 800227a:	bf00      	nop
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff31 	bl	80020f8 <__NVIC_EnableIRQ>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ffa2 	bl	80021f0 <SysTick_Config>
 80022ac:	4603      	mov	r3, r0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	e16b      	b.n	80025ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d4:	2201      	movs	r2, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	f040 815a 	bne.w	80025a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d00b      	beq.n	8002312 <HAL_GPIO_Init+0x5a>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d007      	beq.n	8002312 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002306:	2b11      	cmp	r3, #17
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b12      	cmp	r3, #18
 8002310:	d130      	bne.n	8002374 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002348:	2201      	movs	r2, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 0201 	and.w	r2, r3, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0xfc>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b12      	cmp	r3, #18
 80023b2:	d123      	bne.n	80023fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	08da      	lsrs	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3208      	adds	r2, #8
 80023bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	220f      	movs	r2, #15
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	08da      	lsrs	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3208      	adds	r2, #8
 80023f6:	69b9      	ldr	r1, [r7, #24]
 80023f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	2203      	movs	r2, #3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0203 	and.w	r2, r3, #3
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80b4 	beq.w	80025a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4b5f      	ldr	r3, [pc, #380]	; (80025c0 <HAL_GPIO_Init+0x308>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	4a5e      	ldr	r2, [pc, #376]	; (80025c0 <HAL_GPIO_Init+0x308>)
 8002448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800244c:	6453      	str	r3, [r2, #68]	; 0x44
 800244e:	4b5c      	ldr	r3, [pc, #368]	; (80025c0 <HAL_GPIO_Init+0x308>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800245a:	4a5a      	ldr	r2, [pc, #360]	; (80025c4 <HAL_GPIO_Init+0x30c>)
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	3302      	adds	r3, #2
 8002462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	220f      	movs	r2, #15
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a51      	ldr	r2, [pc, #324]	; (80025c8 <HAL_GPIO_Init+0x310>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d02b      	beq.n	80024de <HAL_GPIO_Init+0x226>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a50      	ldr	r2, [pc, #320]	; (80025cc <HAL_GPIO_Init+0x314>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d025      	beq.n	80024da <HAL_GPIO_Init+0x222>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4f      	ldr	r2, [pc, #316]	; (80025d0 <HAL_GPIO_Init+0x318>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d01f      	beq.n	80024d6 <HAL_GPIO_Init+0x21e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a4e      	ldr	r2, [pc, #312]	; (80025d4 <HAL_GPIO_Init+0x31c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d019      	beq.n	80024d2 <HAL_GPIO_Init+0x21a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4d      	ldr	r2, [pc, #308]	; (80025d8 <HAL_GPIO_Init+0x320>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d013      	beq.n	80024ce <HAL_GPIO_Init+0x216>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4c      	ldr	r2, [pc, #304]	; (80025dc <HAL_GPIO_Init+0x324>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00d      	beq.n	80024ca <HAL_GPIO_Init+0x212>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4b      	ldr	r2, [pc, #300]	; (80025e0 <HAL_GPIO_Init+0x328>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d007      	beq.n	80024c6 <HAL_GPIO_Init+0x20e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4a      	ldr	r2, [pc, #296]	; (80025e4 <HAL_GPIO_Init+0x32c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d101      	bne.n	80024c2 <HAL_GPIO_Init+0x20a>
 80024be:	2307      	movs	r3, #7
 80024c0:	e00e      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024c2:	2308      	movs	r3, #8
 80024c4:	e00c      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024c6:	2306      	movs	r3, #6
 80024c8:	e00a      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024ca:	2305      	movs	r3, #5
 80024cc:	e008      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024ce:	2304      	movs	r3, #4
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024d2:	2303      	movs	r3, #3
 80024d4:	e004      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e002      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024de:	2300      	movs	r3, #0
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	f002 0203 	and.w	r2, r2, #3
 80024e6:	0092      	lsls	r2, r2, #2
 80024e8:	4093      	lsls	r3, r2
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f0:	4934      	ldr	r1, [pc, #208]	; (80025c4 <HAL_GPIO_Init+0x30c>)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	3302      	adds	r3, #2
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024fe:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <HAL_GPIO_Init+0x330>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002522:	4a31      	ldr	r2, [pc, #196]	; (80025e8 <HAL_GPIO_Init+0x330>)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002528:	4b2f      	ldr	r3, [pc, #188]	; (80025e8 <HAL_GPIO_Init+0x330>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800254c:	4a26      	ldr	r2, [pc, #152]	; (80025e8 <HAL_GPIO_Init+0x330>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002552:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <HAL_GPIO_Init+0x330>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002576:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <HAL_GPIO_Init+0x330>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800257c:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <HAL_GPIO_Init+0x330>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025a0:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <HAL_GPIO_Init+0x330>)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3301      	adds	r3, #1
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b0f      	cmp	r3, #15
 80025b0:	f67f ae90 	bls.w	80022d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025b4:	bf00      	nop
 80025b6:	3724      	adds	r7, #36	; 0x24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40013800 	.word	0x40013800
 80025c8:	40020000 	.word	0x40020000
 80025cc:	40020400 	.word	0x40020400
 80025d0:	40020800 	.word	0x40020800
 80025d4:	40020c00 	.word	0x40020c00
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40021400 	.word	0x40021400
 80025e0:	40021800 	.word	0x40021800
 80025e4:	40021c00 	.word	0x40021c00
 80025e8:	40013c00 	.word	0x40013c00

080025ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
 80025f8:	4613      	mov	r3, r2
 80025fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025fc:	787b      	ldrb	r3, [r7, #1]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002608:	e003      	b.n	8002612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800260a:	887b      	ldrh	r3, [r7, #2]
 800260c:	041a      	lsls	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	619a      	str	r2, [r3, #24]
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800261e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002620:	b08f      	sub	sp, #60	; 0x3c
 8002622:	af0a      	add	r7, sp, #40	; 0x28
 8002624:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e054      	b.n	80026da <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f009 fb8e 	bl	800bd6c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2203      	movs	r2, #3
 8002654:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f003 f900 	bl	8005874 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	603b      	str	r3, [r7, #0]
 800267a:	687e      	ldr	r6, [r7, #4]
 800267c:	466d      	mov	r5, sp
 800267e:	f106 0410 	add.w	r4, r6, #16
 8002682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800268a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800268e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002692:	1d33      	adds	r3, r6, #4
 8002694:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002696:	6838      	ldr	r0, [r7, #0]
 8002698:	f003 f87a 	bl	8005790 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2101      	movs	r1, #1
 80026a2:	4618      	mov	r0, r3
 80026a4:	f003 f8f7 	bl	8005896 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	603b      	str	r3, [r7, #0]
 80026ae:	687e      	ldr	r6, [r7, #4]
 80026b0:	466d      	mov	r5, sp
 80026b2:	f106 0410 	add.w	r4, r6, #16
 80026b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80026c6:	1d33      	adds	r3, r6, #4
 80026c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ca:	6838      	ldr	r0, [r7, #0]
 80026cc:	f003 fa0a 	bl	8005ae4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026e2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80026e2:	b590      	push	{r4, r7, lr}
 80026e4:	b089      	sub	sp, #36	; 0x24
 80026e6:	af04      	add	r7, sp, #16
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	4608      	mov	r0, r1
 80026ec:	4611      	mov	r1, r2
 80026ee:	461a      	mov	r2, r3
 80026f0:	4603      	mov	r3, r0
 80026f2:	70fb      	strb	r3, [r7, #3]
 80026f4:	460b      	mov	r3, r1
 80026f6:	70bb      	strb	r3, [r7, #2]
 80026f8:	4613      	mov	r3, r2
 80026fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_HCD_HC_Init+0x28>
 8002706:	2302      	movs	r3, #2
 8002708:	e07f      	b.n	800280a <HAL_HCD_HC_Init+0x128>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002712:	78fa      	ldrb	r2, [r7, #3]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	440b      	add	r3, r1
 8002720:	333d      	adds	r3, #61	; 0x3d
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002726:	78fa      	ldrb	r2, [r7, #3]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	440b      	add	r3, r1
 8002734:	3338      	adds	r3, #56	; 0x38
 8002736:	787a      	ldrb	r2, [r7, #1]
 8002738:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800273a:	78fa      	ldrb	r2, [r7, #3]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	440b      	add	r3, r1
 8002748:	3340      	adds	r3, #64	; 0x40
 800274a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800274c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	440b      	add	r3, r1
 800275c:	3339      	adds	r3, #57	; 0x39
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002762:	78fa      	ldrb	r2, [r7, #3]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	440b      	add	r3, r1
 8002770:	333f      	adds	r3, #63	; 0x3f
 8002772:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002776:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	78bb      	ldrb	r3, [r7, #2]
 800277c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002780:	b2d8      	uxtb	r0, r3
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	440b      	add	r3, r1
 800278e:	333a      	adds	r3, #58	; 0x3a
 8002790:	4602      	mov	r2, r0
 8002792:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002794:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002798:	2b00      	cmp	r3, #0
 800279a:	da0a      	bge.n	80027b2 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	440b      	add	r3, r1
 80027aa:	333b      	adds	r3, #59	; 0x3b
 80027ac:	2201      	movs	r2, #1
 80027ae:	701a      	strb	r2, [r3, #0]
 80027b0:	e009      	b.n	80027c6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	440b      	add	r3, r1
 80027c0:	333b      	adds	r3, #59	; 0x3b
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80027c6:	78fa      	ldrb	r2, [r7, #3]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	440b      	add	r3, r1
 80027d4:	333c      	adds	r3, #60	; 0x3c
 80027d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80027da:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	787c      	ldrb	r4, [r7, #1]
 80027e2:	78ba      	ldrb	r2, [r7, #2]
 80027e4:	78f9      	ldrb	r1, [r7, #3]
 80027e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80027e8:	9302      	str	r3, [sp, #8]
 80027ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	4623      	mov	r3, r4
 80027f8:	f003 faf6 	bl	8005de8 <USB_HC_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002808:	7bfb      	ldrb	r3, [r7, #15]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	bd90      	pop	{r4, r7, pc}

08002812 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_HCD_HC_Halt+0x1e>
 800282c:	2302      	movs	r3, #2
 800282e:	e00f      	b.n	8002850 <HAL_HCD_HC_Halt+0x3e>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f003 fd30 	bl	80062a6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800284e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	4608      	mov	r0, r1
 8002862:	4611      	mov	r1, r2
 8002864:	461a      	mov	r2, r3
 8002866:	4603      	mov	r3, r0
 8002868:	70fb      	strb	r3, [r7, #3]
 800286a:	460b      	mov	r3, r1
 800286c:	70bb      	strb	r3, [r7, #2]
 800286e:	4613      	mov	r3, r2
 8002870:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	440b      	add	r3, r1
 8002880:	333b      	adds	r3, #59	; 0x3b
 8002882:	78ba      	ldrb	r2, [r7, #2]
 8002884:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	440b      	add	r3, r1
 8002894:	333f      	adds	r3, #63	; 0x3f
 8002896:	787a      	ldrb	r2, [r7, #1]
 8002898:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800289a:	7c3b      	ldrb	r3, [r7, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d114      	bne.n	80028ca <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	440b      	add	r3, r1
 80028ae:	3342      	adds	r3, #66	; 0x42
 80028b0:	2203      	movs	r2, #3
 80028b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	440b      	add	r3, r1
 80028c2:	333d      	adds	r3, #61	; 0x3d
 80028c4:	7f3a      	ldrb	r2, [r7, #28]
 80028c6:	701a      	strb	r2, [r3, #0]
 80028c8:	e009      	b.n	80028de <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	440b      	add	r3, r1
 80028d8:	3342      	adds	r3, #66	; 0x42
 80028da:	2202      	movs	r2, #2
 80028dc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80028de:	787b      	ldrb	r3, [r7, #1]
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	f200 80d6 	bhi.w	8002a92 <HAL_HCD_HC_SubmitRequest+0x23a>
 80028e6:	a201      	add	r2, pc, #4	; (adr r2, 80028ec <HAL_HCD_HC_SubmitRequest+0x94>)
 80028e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ec:	080028fd 	.word	0x080028fd
 80028f0:	08002a7d 	.word	0x08002a7d
 80028f4:	08002969 	.word	0x08002969
 80028f8:	080029f3 	.word	0x080029f3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80028fc:	7c3b      	ldrb	r3, [r7, #16]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	f040 80c9 	bne.w	8002a96 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002904:	78bb      	ldrb	r3, [r7, #2]
 8002906:	2b00      	cmp	r3, #0
 8002908:	f040 80c5 	bne.w	8002a96 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800290c:	8b3b      	ldrh	r3, [r7, #24]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d109      	bne.n	8002926 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002912:	78fa      	ldrb	r2, [r7, #3]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	440b      	add	r3, r1
 8002920:	3351      	adds	r3, #81	; 0x51
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	440b      	add	r3, r1
 8002934:	3351      	adds	r3, #81	; 0x51
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10a      	bne.n	8002952 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	440b      	add	r3, r1
 800294a:	3342      	adds	r3, #66	; 0x42
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002950:	e0a1      	b.n	8002a96 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002952:	78fa      	ldrb	r2, [r7, #3]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	3342      	adds	r3, #66	; 0x42
 8002962:	2202      	movs	r2, #2
 8002964:	701a      	strb	r2, [r3, #0]
      break;
 8002966:	e096      	b.n	8002a96 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002968:	78bb      	ldrb	r3, [r7, #2]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d120      	bne.n	80029b0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	440b      	add	r3, r1
 800297c:	3351      	adds	r3, #81	; 0x51
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10a      	bne.n	800299a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002984:	78fa      	ldrb	r2, [r7, #3]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	3342      	adds	r3, #66	; 0x42
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002998:	e07e      	b.n	8002a98 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800299a:	78fa      	ldrb	r2, [r7, #3]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	440b      	add	r3, r1
 80029a8:	3342      	adds	r3, #66	; 0x42
 80029aa:	2202      	movs	r2, #2
 80029ac:	701a      	strb	r2, [r3, #0]
      break;
 80029ae:	e073      	b.n	8002a98 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029b0:	78fa      	ldrb	r2, [r7, #3]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	440b      	add	r3, r1
 80029be:	3350      	adds	r3, #80	; 0x50
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10a      	bne.n	80029dc <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	440b      	add	r3, r1
 80029d4:	3342      	adds	r3, #66	; 0x42
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
      break;
 80029da:	e05d      	b.n	8002a98 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	440b      	add	r3, r1
 80029ea:	3342      	adds	r3, #66	; 0x42
 80029ec:	2202      	movs	r2, #2
 80029ee:	701a      	strb	r2, [r3, #0]
      break;
 80029f0:	e052      	b.n	8002a98 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80029f2:	78bb      	ldrb	r3, [r7, #2]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d120      	bne.n	8002a3a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	440b      	add	r3, r1
 8002a06:	3351      	adds	r3, #81	; 0x51
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10a      	bne.n	8002a24 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a0e:	78fa      	ldrb	r2, [r7, #3]
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	440b      	add	r3, r1
 8002a1c:	3342      	adds	r3, #66	; 0x42
 8002a1e:	2200      	movs	r2, #0
 8002a20:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a22:	e039      	b.n	8002a98 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a24:	78fa      	ldrb	r2, [r7, #3]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	3342      	adds	r3, #66	; 0x42
 8002a34:	2202      	movs	r2, #2
 8002a36:	701a      	strb	r2, [r3, #0]
      break;
 8002a38:	e02e      	b.n	8002a98 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a3a:	78fa      	ldrb	r2, [r7, #3]
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	440b      	add	r3, r1
 8002a48:	3350      	adds	r3, #80	; 0x50
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10a      	bne.n	8002a66 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3342      	adds	r3, #66	; 0x42
 8002a60:	2200      	movs	r2, #0
 8002a62:	701a      	strb	r2, [r3, #0]
      break;
 8002a64:	e018      	b.n	8002a98 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	440b      	add	r3, r1
 8002a74:	3342      	adds	r3, #66	; 0x42
 8002a76:	2202      	movs	r2, #2
 8002a78:	701a      	strb	r2, [r3, #0]
      break;
 8002a7a:	e00d      	b.n	8002a98 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a7c:	78fa      	ldrb	r2, [r7, #3]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	440b      	add	r3, r1
 8002a8a:	3342      	adds	r3, #66	; 0x42
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
      break;
 8002a90:	e002      	b.n	8002a98 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002a92:	bf00      	nop
 8002a94:	e000      	b.n	8002a98 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002a96:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3344      	adds	r3, #68	; 0x44
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002aac:	78fa      	ldrb	r2, [r7, #3]
 8002aae:	8b39      	ldrh	r1, [r7, #24]
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4403      	add	r3, r0
 8002abc:	3348      	adds	r3, #72	; 0x48
 8002abe:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ac0:	78fa      	ldrb	r2, [r7, #3]
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	335c      	adds	r3, #92	; 0x5c
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002ad4:	78fa      	ldrb	r2, [r7, #3]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	440b      	add	r3, r1
 8002ae2:	334c      	adds	r3, #76	; 0x4c
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	440b      	add	r3, r1
 8002af6:	3339      	adds	r3, #57	; 0x39
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002afc:	78fa      	ldrb	r2, [r7, #3]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	440b      	add	r3, r1
 8002b0a:	335d      	adds	r3, #93	; 0x5d
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	3338      	adds	r3, #56	; 0x38
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	18d1      	adds	r1, r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f003 fa66 	bl	8005ffc <USB_HC_StartXfer>
 8002b30:	4603      	mov	r3, r0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop

08002b3c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f002 ff83 	bl	8005a5e <USB_GetMode>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	f040 80ef 	bne.w	8002d3e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f002 ff67 	bl	8005a38 <USB_ReadInterrupts>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80e5 	beq.w	8002d3c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f002 ff5e 	bl	8005a38 <USB_ReadInterrupts>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b86:	d104      	bne.n	8002b92 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f002 ff4e 	bl	8005a38 <USB_ReadInterrupts>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ba6:	d104      	bne.n	8002bb2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002bb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f002 ff3e 	bl	8005a38 <USB_ReadInterrupts>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bc6:	d104      	bne.n	8002bd2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f002 ff2e 	bl	8005a38 <USB_ReadInterrupts>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d103      	bne.n	8002bee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2202      	movs	r2, #2
 8002bec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f002 ff20 	bl	8005a38 <USB_ReadInterrupts>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c02:	d115      	bne.n	8002c30 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002c0c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d108      	bne.n	8002c30 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f009 f922 	bl	800be68 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2101      	movs	r1, #1
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f003 f816 	bl	8005c5c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f002 feff 	bl	8005a38 <USB_ReadInterrupts>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c44:	d102      	bne.n	8002c4c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f001 f966 	bl	8003f18 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f002 fef1 	bl	8005a38 <USB_ReadInterrupts>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d106      	bne.n	8002c6e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f009 f8e5 	bl	800be30 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 fee0 	bl	8005a38 <USB_ReadInterrupts>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c82:	d138      	bne.n	8002cf6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f003 fafb 	bl	8006284 <USB_HC_ReadInterrupt>
 8002c8e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	e025      	b.n	8002ce2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d018      	beq.n	8002cdc <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc0:	d106      	bne.n	8002cd0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f8cf 	bl	8002e6c <HCD_HC_IN_IRQHandler>
 8002cce:	e005      	b.n	8002cdc <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fcfd 	bl	80036d6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d3d4      	bcc.n	8002c96 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f002 fe9c 	bl	8005a38 <USB_ReadInterrupts>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b10      	cmp	r3, #16
 8002d08:	d101      	bne.n	8002d0e <HAL_HCD_IRQHandler+0x1d2>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_HCD_IRQHandler+0x1d4>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d014      	beq.n	8002d3e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0210 	bic.w	r2, r2, #16
 8002d22:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f001 f84b 	bl	8003dc0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699a      	ldr	r2, [r3, #24]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0210 	orr.w	r2, r2, #16
 8002d38:	619a      	str	r2, [r3, #24]
 8002d3a:	e000      	b.n	8002d3e <HAL_HCD_IRQHandler+0x202>
      return;
 8002d3c:	bf00      	nop
    }
  }
}
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_HCD_Start+0x16>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e013      	b.n	8002d82 <HAL_HCD_Start+0x3e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f002 fd73 	bl	8005852 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2101      	movs	r1, #1
 8002d72:	4618      	mov	r0, r3
 8002d74:	f002 ffd6 	bl	8005d24 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_HCD_Stop+0x16>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e00d      	b.n	8002dbc <HAL_HCD_Stop+0x32>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f003 fbb5 	bl	800651c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f002 ff7d 	bl	8005cd0 <USB_ResetPort>
 8002dd6:	4603      	mov	r3, r0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	335c      	adds	r3, #92	; 0x5c
 8002dfc:	781b      	ldrb	r3, [r3, #0]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	460b      	mov	r3, r1
 8002e14:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	440b      	add	r3, r1
 8002e24:	334c      	adds	r3, #76	; 0x4c
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f002 ffbf 	bl	8005dc4 <USB_GetCurrentFrame>
 8002e46:	4603      	mov	r3, r0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f002 ff9a 	bl	8005d96 <USB_GetHostSpeed>
 8002e62:	4603      	mov	r3, r0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	015a      	lsls	r2, r3, #5
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d119      	bne.n	8002ed0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2304      	movs	r3, #4
 8002eac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	0151      	lsls	r1, r2, #5
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	440a      	add	r2, r1
 8002ec4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ec8:	f043 0302 	orr.w	r3, r3, #2
 8002ecc:	60d3      	str	r3, [r2, #12]
 8002ece:	e0ce      	b.n	800306e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ee6:	d12c      	bne.n	8002f42 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002efa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	440b      	add	r3, r1
 8002f0a:	335d      	adds	r3, #93	; 0x5d
 8002f0c:	2207      	movs	r2, #7
 8002f0e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	0151      	lsls	r1, r2, #5
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	440a      	add	r2, r1
 8002f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f2a:	f043 0302 	orr.w	r3, r3, #2
 8002f2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f003 f9b3 	bl	80062a6 <USB_HC_Halt>
 8002f40:	e095      	b.n	800306e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b20      	cmp	r3, #32
 8002f56:	d109      	bne.n	8002f6c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f64:	461a      	mov	r2, r3
 8002f66:	2320      	movs	r3, #32
 8002f68:	6093      	str	r3, [r2, #8]
 8002f6a:	e080      	b.n	800306e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d134      	bne.n	8002fec <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	0151      	lsls	r1, r2, #5
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	440a      	add	r2, r1
 8002f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f9c:	f043 0302 	orr.w	r3, r3, #2
 8002fa0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	440b      	add	r3, r1
 8002fb0:	335d      	adds	r3, #93	; 0x5d
 8002fb2:	2205      	movs	r2, #5
 8002fb4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2310      	movs	r3, #16
 8002fc6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	2308      	movs	r3, #8
 8002fd8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f003 f95e 	bl	80062a6 <USB_HC_Halt>
 8002fea:	e040      	b.n	800306e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003002:	d134      	bne.n	800306e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	0151      	lsls	r1, r2, #5
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	440a      	add	r2, r1
 800301a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800301e:	f043 0302 	orr.w	r3, r3, #2
 8003022:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f003 f939 	bl	80062a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4413      	add	r3, r2
 800303c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003040:	461a      	mov	r2, r3
 8003042:	2310      	movs	r3, #16
 8003044:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	440b      	add	r3, r1
 8003054:	335d      	adds	r3, #93	; 0x5d
 8003056:	2208      	movs	r2, #8
 8003058:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4413      	add	r3, r2
 8003062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003066:	461a      	mov	r2, r3
 8003068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800306c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	015a      	lsls	r2, r3, #5
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4413      	add	r3, r2
 8003076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003084:	d122      	bne.n	80030cc <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4413      	add	r3, r2
 800308e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	0151      	lsls	r1, r2, #5
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	440a      	add	r2, r1
 800309c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030a0:	f043 0302 	orr.w	r3, r3, #2
 80030a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f003 f8f8 	bl	80062a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c2:	461a      	mov	r2, r3
 80030c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030c8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80030ca:	e300      	b.n	80036ce <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b01      	cmp	r3, #1
 80030e0:	f040 80fd 	bne.w	80032de <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01b      	beq.n	8003124 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	440b      	add	r3, r1
 80030fa:	3348      	adds	r3, #72	; 0x48
 80030fc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	0159      	lsls	r1, r3, #5
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	440b      	add	r3, r1
 8003106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003110:	1ad1      	subs	r1, r2, r3
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4403      	add	r3, r0
 8003120:	334c      	adds	r3, #76	; 0x4c
 8003122:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	440b      	add	r3, r1
 8003132:	335d      	adds	r3, #93	; 0x5d
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	440b      	add	r3, r1
 8003146:	3358      	adds	r3, #88	; 0x58
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4413      	add	r3, r2
 8003154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003158:	461a      	mov	r2, r3
 800315a:	2301      	movs	r3, #1
 800315c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	440b      	add	r3, r1
 800316c:	333f      	adds	r3, #63	; 0x3f
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	440b      	add	r3, r1
 8003182:	333f      	adds	r3, #63	; 0x3f
 8003184:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003186:	2b02      	cmp	r3, #2
 8003188:	d121      	bne.n	80031ce <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4413      	add	r3, r2
 8003192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	0151      	lsls	r1, r2, #5
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	440a      	add	r2, r1
 80031a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031a4:	f043 0302 	orr.w	r3, r3, #2
 80031a8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f003 f876 	bl	80062a6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c6:	461a      	mov	r2, r3
 80031c8:	2310      	movs	r3, #16
 80031ca:	6093      	str	r3, [r2, #8]
 80031cc:	e070      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	440b      	add	r3, r1
 80031dc:	333f      	adds	r3, #63	; 0x3f
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d12a      	bne.n	800323a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	0151      	lsls	r1, r2, #5
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	440a      	add	r2, r1
 80031fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003202:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	440b      	add	r3, r1
 8003212:	335c      	adds	r3, #92	; 0x5c
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	b2d8      	uxtb	r0, r3
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	440b      	add	r3, r1
 800322a:	335c      	adds	r3, #92	; 0x5c
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	4601      	mov	r1, r0
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f008 fe26 	bl	800be84 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003238:	e03a      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	440b      	add	r3, r1
 8003248:	333f      	adds	r3, #63	; 0x3f
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d12f      	bne.n	80032b0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	440b      	add	r3, r1
 800325e:	335c      	adds	r3, #92	; 0x5c
 8003260:	2201      	movs	r2, #1
 8003262:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	440b      	add	r3, r1
 8003272:	3350      	adds	r3, #80	; 0x50
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	f083 0301 	eor.w	r3, r3, #1
 800327a:	b2d8      	uxtb	r0, r3
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	440b      	add	r3, r1
 800328a:	3350      	adds	r3, #80	; 0x50
 800328c:	4602      	mov	r2, r0
 800328e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	b2d8      	uxtb	r0, r3
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	440b      	add	r3, r1
 80032a2:	335c      	adds	r3, #92	; 0x5c
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	4601      	mov	r1, r0
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f008 fdea 	bl	800be84 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	440b      	add	r3, r1
 80032be:	3350      	adds	r3, #80	; 0x50
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	f083 0301 	eor.w	r3, r3, #1
 80032c6:	b2d8      	uxtb	r0, r3
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	440b      	add	r3, r1
 80032d6:	3350      	adds	r3, #80	; 0x50
 80032d8:	4602      	mov	r2, r0
 80032da:	701a      	strb	r2, [r3, #0]
}
 80032dc:	e1f7      	b.n	80036ce <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	f040 811a 	bne.w	800352a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	0151      	lsls	r1, r2, #5
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	440a      	add	r2, r1
 800330c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003310:	f023 0302 	bic.w	r3, r3, #2
 8003314:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	440b      	add	r3, r1
 8003324:	335d      	adds	r3, #93	; 0x5d
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d10a      	bne.n	8003342 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	440b      	add	r3, r1
 800333a:	335c      	adds	r3, #92	; 0x5c
 800333c:	2201      	movs	r2, #1
 800333e:	701a      	strb	r2, [r3, #0]
 8003340:	e0d9      	b.n	80034f6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	440b      	add	r3, r1
 8003350:	335d      	adds	r3, #93	; 0x5d
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b05      	cmp	r3, #5
 8003356:	d10a      	bne.n	800336e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	440b      	add	r3, r1
 8003366:	335c      	adds	r3, #92	; 0x5c
 8003368:	2205      	movs	r2, #5
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	e0c3      	b.n	80034f6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	440b      	add	r3, r1
 800337c:	335d      	adds	r3, #93	; 0x5d
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b06      	cmp	r3, #6
 8003382:	d00a      	beq.n	800339a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	440b      	add	r3, r1
 8003392:	335d      	adds	r3, #93	; 0x5d
 8003394:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003396:	2b08      	cmp	r3, #8
 8003398:	d156      	bne.n	8003448 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	440b      	add	r3, r1
 80033a8:	3358      	adds	r3, #88	; 0x58
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	1c59      	adds	r1, r3, #1
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4403      	add	r3, r0
 80033bc:	3358      	adds	r3, #88	; 0x58
 80033be:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	440b      	add	r3, r1
 80033ce:	3358      	adds	r3, #88	; 0x58
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b03      	cmp	r3, #3
 80033d4:	d914      	bls.n	8003400 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	440b      	add	r3, r1
 80033e4:	3358      	adds	r3, #88	; 0x58
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	440b      	add	r3, r1
 80033f8:	335c      	adds	r3, #92	; 0x5c
 80033fa:	2204      	movs	r2, #4
 80033fc:	701a      	strb	r2, [r3, #0]
 80033fe:	e009      	b.n	8003414 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	440b      	add	r3, r1
 800340e:	335c      	adds	r3, #92	; 0x5c
 8003410:	2202      	movs	r2, #2
 8003412:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800342a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003432:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4413      	add	r3, r2
 800343c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003440:	461a      	mov	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e056      	b.n	80034f6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	440b      	add	r3, r1
 8003456:	335d      	adds	r3, #93	; 0x5d
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b03      	cmp	r3, #3
 800345c:	d123      	bne.n	80034a6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	440b      	add	r3, r1
 800346c:	335c      	adds	r3, #92	; 0x5c
 800346e:	2202      	movs	r2, #2
 8003470:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4413      	add	r3, r2
 800347a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003488:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003490:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4413      	add	r3, r2
 800349a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349e:	461a      	mov	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	e027      	b.n	80034f6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	440b      	add	r3, r1
 80034b4:	335d      	adds	r3, #93	; 0x5d
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b07      	cmp	r3, #7
 80034ba:	d11c      	bne.n	80034f6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	440b      	add	r3, r1
 80034ca:	3358      	adds	r3, #88	; 0x58
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	1c59      	adds	r1, r3, #1
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4403      	add	r3, r0
 80034de:	3358      	adds	r3, #88	; 0x58
 80034e0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	440b      	add	r3, r1
 80034f0:	335c      	adds	r3, #92	; 0x5c
 80034f2:	2204      	movs	r2, #4
 80034f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	015a      	lsls	r2, r3, #5
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003502:	461a      	mov	r2, r3
 8003504:	2302      	movs	r3, #2
 8003506:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	b2d8      	uxtb	r0, r3
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	440b      	add	r3, r1
 800351a:	335c      	adds	r3, #92	; 0x5c
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	4601      	mov	r1, r0
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f008 fcae 	bl	800be84 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003528:	e0d1      	b.n	80036ce <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4413      	add	r3, r2
 8003532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353c:	2b80      	cmp	r3, #128	; 0x80
 800353e:	d13e      	bne.n	80035be <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4413      	add	r3, r2
 8003548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	0151      	lsls	r1, r2, #5
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	440a      	add	r2, r1
 8003556:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800355a:	f043 0302 	orr.w	r3, r3, #2
 800355e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	440b      	add	r3, r1
 800356e:	3358      	adds	r3, #88	; 0x58
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	1c59      	adds	r1, r3, #1
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4403      	add	r3, r0
 8003582:	3358      	adds	r3, #88	; 0x58
 8003584:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	440b      	add	r3, r1
 8003594:	335d      	adds	r3, #93	; 0x5d
 8003596:	2206      	movs	r2, #6
 8003598:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f002 fe7e 	bl	80062a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b6:	461a      	mov	r2, r3
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	6093      	str	r3, [r2, #8]
}
 80035bc:	e087      	b.n	80036ce <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	2b10      	cmp	r3, #16
 80035d2:	d17c      	bne.n	80036ce <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	440b      	add	r3, r1
 80035e2:	333f      	adds	r3, #63	; 0x3f
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d122      	bne.n	8003630 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	440b      	add	r3, r1
 80035f8:	3358      	adds	r3, #88	; 0x58
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	0151      	lsls	r1, r2, #5
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	440a      	add	r2, r1
 8003614:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003618:	f043 0302 	orr.w	r3, r3, #2
 800361c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	4611      	mov	r1, r2
 8003628:	4618      	mov	r0, r3
 800362a:	f002 fe3c 	bl	80062a6 <USB_HC_Halt>
 800362e:	e045      	b.n	80036bc <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	440b      	add	r3, r1
 800363e:	333f      	adds	r3, #63	; 0x3f
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	440b      	add	r3, r1
 8003654:	333f      	adds	r3, #63	; 0x3f
 8003656:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003658:	2b02      	cmp	r3, #2
 800365a:	d12f      	bne.n	80036bc <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	440b      	add	r3, r1
 800366a:	3358      	adds	r3, #88	; 0x58
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d121      	bne.n	80036bc <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	440b      	add	r3, r1
 8003686:	335d      	adds	r3, #93	; 0x5d
 8003688:	2203      	movs	r2, #3
 800368a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4413      	add	r3, r2
 8003694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	0151      	lsls	r1, r2, #5
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	440a      	add	r2, r1
 80036a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036a6:	f043 0302 	orr.w	r3, r3, #2
 80036aa:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f002 fdf5 	bl	80062a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	461a      	mov	r2, r3
 80036ca:	2310      	movs	r3, #16
 80036cc:	6093      	str	r3, [r2, #8]
}
 80036ce:	bf00      	nop
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b086      	sub	sp, #24
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	460b      	mov	r3, r1
 80036e0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b04      	cmp	r3, #4
 8003704:	d119      	bne.n	800373a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4413      	add	r3, r2
 800370e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003712:	461a      	mov	r2, r3
 8003714:	2304      	movs	r3, #4
 8003716:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	0151      	lsls	r1, r2, #5
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	440a      	add	r2, r1
 800372e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003732:	f043 0302 	orr.w	r3, r3, #2
 8003736:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003738:	e33e      	b.n	8003db8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4413      	add	r3, r2
 8003742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b20      	cmp	r3, #32
 800374e:	d141      	bne.n	80037d4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4413      	add	r3, r2
 8003758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375c:	461a      	mov	r2, r3
 800375e:	2320      	movs	r3, #32
 8003760:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	440b      	add	r3, r1
 8003770:	333d      	adds	r3, #61	; 0x3d
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	f040 831f 	bne.w	8003db8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	440b      	add	r3, r1
 8003788:	333d      	adds	r3, #61	; 0x3d
 800378a:	2200      	movs	r2, #0
 800378c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	440b      	add	r3, r1
 800379c:	335c      	adds	r3, #92	; 0x5c
 800379e:	2202      	movs	r2, #2
 80037a0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	0151      	lsls	r1, r2, #5
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	440a      	add	r2, r1
 80037b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037bc:	f043 0302 	orr.w	r3, r3, #2
 80037c0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f002 fd6a 	bl	80062a6 <USB_HC_Halt>
}
 80037d2:	e2f1      	b.n	8003db8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e6:	2b40      	cmp	r3, #64	; 0x40
 80037e8:	d13f      	bne.n	800386a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	440b      	add	r3, r1
 80037f8:	335d      	adds	r3, #93	; 0x5d
 80037fa:	2204      	movs	r2, #4
 80037fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	440b      	add	r3, r1
 800380c:	333d      	adds	r3, #61	; 0x3d
 800380e:	2201      	movs	r2, #1
 8003810:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	440b      	add	r3, r1
 8003820:	3358      	adds	r3, #88	; 0x58
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4413      	add	r3, r2
 800382e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	0151      	lsls	r1, r2, #5
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	440a      	add	r2, r1
 800383c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003840:	f043 0302 	orr.w	r3, r3, #2
 8003844:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	4611      	mov	r1, r2
 8003850:	4618      	mov	r0, r3
 8003852:	f002 fd28 	bl	80062a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	4413      	add	r3, r2
 800385e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003862:	461a      	mov	r2, r3
 8003864:	2340      	movs	r3, #64	; 0x40
 8003866:	6093      	str	r3, [r2, #8]
}
 8003868:	e2a6      	b.n	8003db8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4413      	add	r3, r2
 8003872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800387c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003880:	d122      	bne.n	80038c8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4413      	add	r3, r2
 800388a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	0151      	lsls	r1, r2, #5
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	440a      	add	r2, r1
 8003898:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800389c:	f043 0302 	orr.w	r3, r3, #2
 80038a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	4611      	mov	r1, r2
 80038ac:	4618      	mov	r0, r3
 80038ae:	f002 fcfa 	bl	80062a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038be:	461a      	mov	r2, r3
 80038c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038c4:	6093      	str	r3, [r2, #8]
}
 80038c6:	e277      	b.n	8003db8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d135      	bne.n	800394a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	440b      	add	r3, r1
 80038ec:	3358      	adds	r3, #88	; 0x58
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	0151      	lsls	r1, r2, #5
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	440a      	add	r2, r1
 8003908:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800390c:	f043 0302 	orr.w	r3, r3, #2
 8003910:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	4611      	mov	r1, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f002 fcc2 	bl	80062a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4413      	add	r3, r2
 800392a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392e:	461a      	mov	r2, r3
 8003930:	2301      	movs	r3, #1
 8003932:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	440b      	add	r3, r1
 8003942:	335d      	adds	r3, #93	; 0x5d
 8003944:	2201      	movs	r2, #1
 8003946:	701a      	strb	r2, [r3, #0]
}
 8003948:	e236      	b.n	8003db8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4413      	add	r3, r2
 8003952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b08      	cmp	r3, #8
 800395e:	d12b      	bne.n	80039b8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4413      	add	r3, r2
 8003968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396c:	461a      	mov	r2, r3
 800396e:	2308      	movs	r3, #8
 8003970:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4413      	add	r3, r2
 800397a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	0151      	lsls	r1, r2, #5
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	440a      	add	r2, r1
 8003988:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800398c:	f043 0302 	orr.w	r3, r3, #2
 8003990:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	4611      	mov	r1, r2
 800399c:	4618      	mov	r0, r3
 800399e:	f002 fc82 	bl	80062a6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	440b      	add	r3, r1
 80039b0:	335d      	adds	r3, #93	; 0x5d
 80039b2:	2205      	movs	r2, #5
 80039b4:	701a      	strb	r2, [r3, #0]
}
 80039b6:	e1ff      	b.n	8003db8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b10      	cmp	r3, #16
 80039cc:	d155      	bne.n	8003a7a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4613      	mov	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	440b      	add	r3, r1
 80039dc:	3358      	adds	r3, #88	; 0x58
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	440b      	add	r3, r1
 80039f0:	335d      	adds	r3, #93	; 0x5d
 80039f2:	2203      	movs	r2, #3
 80039f4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	440b      	add	r3, r1
 8003a04:	333d      	adds	r3, #61	; 0x3d
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d114      	bne.n	8003a36 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	440b      	add	r3, r1
 8003a1a:	333c      	adds	r3, #60	; 0x3c
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	440b      	add	r3, r1
 8003a30:	333d      	adds	r3, #61	; 0x3d
 8003a32:	2201      	movs	r2, #1
 8003a34:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	0151      	lsls	r1, r2, #5
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	440a      	add	r2, r1
 8003a4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a50:	f043 0302 	orr.w	r3, r3, #2
 8003a54:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	4611      	mov	r1, r2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f002 fc20 	bl	80062a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a72:	461a      	mov	r2, r3
 8003a74:	2310      	movs	r3, #16
 8003a76:	6093      	str	r3, [r2, #8]
}
 8003a78:	e19e      	b.n	8003db8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8c:	2b80      	cmp	r3, #128	; 0x80
 8003a8e:	d12b      	bne.n	8003ae8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	0151      	lsls	r1, r2, #5
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	440a      	add	r2, r1
 8003aa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003aaa:	f043 0302 	orr.w	r3, r3, #2
 8003aae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	4611      	mov	r1, r2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f002 fbf3 	bl	80062a6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	440b      	add	r3, r1
 8003ace:	335d      	adds	r3, #93	; 0x5d
 8003ad0:	2206      	movs	r2, #6
 8003ad2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	6093      	str	r3, [r2, #8]
}
 8003ae6:	e167      	b.n	8003db8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003afe:	d135      	bne.n	8003b6c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	0151      	lsls	r1, r2, #5
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	440a      	add	r2, r1
 8003b16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b1a:	f043 0302 	orr.w	r3, r3, #2
 8003b1e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f002 fbbb 	bl	80062a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2310      	movs	r3, #16
 8003b40:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b54:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	440b      	add	r3, r1
 8003b64:	335d      	adds	r3, #93	; 0x5d
 8003b66:	2208      	movs	r2, #8
 8003b68:	701a      	strb	r2, [r3, #0]
}
 8003b6a:	e125      	b.n	8003db8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	f040 811a 	bne.w	8003db8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	0151      	lsls	r1, r2, #5
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	440a      	add	r2, r1
 8003b9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b9e:	f023 0302 	bic.w	r3, r3, #2
 8003ba2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	440b      	add	r3, r1
 8003bb2:	335d      	adds	r3, #93	; 0x5d
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d137      	bne.n	8003c2a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	440b      	add	r3, r1
 8003bc8:	335c      	adds	r3, #92	; 0x5c
 8003bca:	2201      	movs	r2, #1
 8003bcc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	440b      	add	r3, r1
 8003bdc:	333f      	adds	r3, #63	; 0x3f
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d00b      	beq.n	8003bfc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	440b      	add	r3, r1
 8003bf2:	333f      	adds	r3, #63	; 0x3f
 8003bf4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	f040 80c5 	bne.w	8003d86 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	440b      	add	r3, r1
 8003c0a:	3351      	adds	r3, #81	; 0x51
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	f083 0301 	eor.w	r3, r3, #1
 8003c12:	b2d8      	uxtb	r0, r3
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	440b      	add	r3, r1
 8003c22:	3351      	adds	r3, #81	; 0x51
 8003c24:	4602      	mov	r2, r0
 8003c26:	701a      	strb	r2, [r3, #0]
 8003c28:	e0ad      	b.n	8003d86 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	440b      	add	r3, r1
 8003c38:	335d      	adds	r3, #93	; 0x5d
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d10a      	bne.n	8003c56 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	440b      	add	r3, r1
 8003c4e:	335c      	adds	r3, #92	; 0x5c
 8003c50:	2202      	movs	r2, #2
 8003c52:	701a      	strb	r2, [r3, #0]
 8003c54:	e097      	b.n	8003d86 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	440b      	add	r3, r1
 8003c64:	335d      	adds	r3, #93	; 0x5d
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d10a      	bne.n	8003c82 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	440b      	add	r3, r1
 8003c7a:	335c      	adds	r3, #92	; 0x5c
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	e081      	b.n	8003d86 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4613      	mov	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	440b      	add	r3, r1
 8003c90:	335d      	adds	r3, #93	; 0x5d
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b05      	cmp	r3, #5
 8003c96:	d10a      	bne.n	8003cae <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	440b      	add	r3, r1
 8003ca6:	335c      	adds	r3, #92	; 0x5c
 8003ca8:	2205      	movs	r2, #5
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	e06b      	b.n	8003d86 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	440b      	add	r3, r1
 8003cbc:	335d      	adds	r3, #93	; 0x5d
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b06      	cmp	r3, #6
 8003cc2:	d00a      	beq.n	8003cda <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	440b      	add	r3, r1
 8003cd2:	335d      	adds	r3, #93	; 0x5d
 8003cd4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d155      	bne.n	8003d86 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	440b      	add	r3, r1
 8003ce8:	3358      	adds	r3, #88	; 0x58
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	1c59      	adds	r1, r3, #1
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4403      	add	r3, r0
 8003cfc:	3358      	adds	r3, #88	; 0x58
 8003cfe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	440b      	add	r3, r1
 8003d0e:	3358      	adds	r3, #88	; 0x58
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d914      	bls.n	8003d40 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	440b      	add	r3, r1
 8003d24:	3358      	adds	r3, #88	; 0x58
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	440b      	add	r3, r1
 8003d38:	335c      	adds	r3, #92	; 0x5c
 8003d3a:	2204      	movs	r2, #4
 8003d3c:	701a      	strb	r2, [r3, #0]
 8003d3e:	e009      	b.n	8003d54 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	440b      	add	r3, r1
 8003d4e:	335c      	adds	r3, #92	; 0x5c
 8003d50:	2202      	movs	r2, #2
 8003d52:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d6a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d72:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d80:	461a      	mov	r2, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d92:	461a      	mov	r2, r3
 8003d94:	2302      	movs	r3, #2
 8003d96:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	b2d8      	uxtb	r0, r3
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	440b      	add	r3, r1
 8003daa:	335c      	adds	r3, #92	; 0x5c
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	4601      	mov	r1, r0
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f008 f866 	bl	800be84 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003db8:	bf00      	nop
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08a      	sub	sp, #40	; 0x28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	0c5b      	lsrs	r3, r3, #17
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	091b      	lsrs	r3, r3, #4
 8003df0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003df4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d003      	beq.n	8003e04 <HCD_RXQLVL_IRQHandler+0x44>
 8003dfc:	2b05      	cmp	r3, #5
 8003dfe:	f000 8082 	beq.w	8003f06 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003e02:	e083      	b.n	8003f0c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d07f      	beq.n	8003f0a <HCD_RXQLVL_IRQHandler+0x14a>
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	440b      	add	r3, r1
 8003e18:	3344      	adds	r3, #68	; 0x44
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d074      	beq.n	8003f0a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	440b      	add	r3, r1
 8003e32:	3344      	adds	r3, #68	; 0x44
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	b292      	uxth	r2, r2
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	f001 fdd3 	bl	80059e6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	440b      	add	r3, r1
 8003e4e:	3344      	adds	r3, #68	; 0x44
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	18d1      	adds	r1, r2, r3
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	4403      	add	r3, r0
 8003e64:	3344      	adds	r3, #68	; 0x44
 8003e66:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	440b      	add	r3, r1
 8003e76:	334c      	adds	r3, #76	; 0x4c
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	18d1      	adds	r1, r2, r3
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4403      	add	r3, r0
 8003e8c:	334c      	adds	r3, #76	; 0x4c
 8003e8e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <HCD_RXQLVL_IRQHandler+0x154>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d031      	beq.n	8003f0a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ebc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ec4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	440b      	add	r3, r1
 8003ee6:	3350      	adds	r3, #80	; 0x50
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	f083 0301 	eor.w	r3, r3, #1
 8003eee:	b2d8      	uxtb	r0, r3
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	440b      	add	r3, r1
 8003efe:	3350      	adds	r3, #80	; 0x50
 8003f00:	4602      	mov	r2, r0
 8003f02:	701a      	strb	r2, [r3, #0]
      break;
 8003f04:	e001      	b.n	8003f0a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003f06:	bf00      	nop
 8003f08:	e000      	b.n	8003f0c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003f0a:	bf00      	nop
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	3728      	adds	r7, #40	; 0x28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	1ff80000 	.word	0x1ff80000

08003f18 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f44:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d10b      	bne.n	8003f68 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d102      	bne.n	8003f60 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f007 ff76 	bl	800be4c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f043 0302 	orr.w	r3, r3, #2
 8003f66:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d132      	bne.n	8003fd8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f043 0308 	orr.w	r3, r3, #8
 8003f78:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d126      	bne.n	8003fd2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d113      	bne.n	8003fb4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003f92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f96:	d106      	bne.n	8003fa6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2102      	movs	r1, #2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f001 fe5c 	bl	8005c5c <USB_InitFSLSPClkSel>
 8003fa4:	e011      	b.n	8003fca <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2101      	movs	r1, #1
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 fe55 	bl	8005c5c <USB_InitFSLSPClkSel>
 8003fb2:	e00a      	b.n	8003fca <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d106      	bne.n	8003fca <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003fc8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f007 ff6c 	bl	800bea8 <HAL_HCD_PortEnabled_Callback>
 8003fd0:	e002      	b.n	8003fd8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f007 ff76 	bl	800bec4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	d103      	bne.n	8003fea <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f043 0320 	orr.w	r3, r3, #32
 8003fe8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	6013      	str	r3, [r2, #0]
}
 8003ff6:	bf00      	nop
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e11f      	b.n	8004252 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fd faa2 	bl	8001570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2224      	movs	r2, #36	; 0x24
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0201 	bic.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004052:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004062:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004064:	f001 f9de 	bl	8005424 <HAL_RCC_GetPCLK1Freq>
 8004068:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	4a7b      	ldr	r2, [pc, #492]	; (800425c <HAL_I2C_Init+0x25c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d807      	bhi.n	8004084 <HAL_I2C_Init+0x84>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4a7a      	ldr	r2, [pc, #488]	; (8004260 <HAL_I2C_Init+0x260>)
 8004078:	4293      	cmp	r3, r2
 800407a:	bf94      	ite	ls
 800407c:	2301      	movls	r3, #1
 800407e:	2300      	movhi	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	e006      	b.n	8004092 <HAL_I2C_Init+0x92>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4a77      	ldr	r2, [pc, #476]	; (8004264 <HAL_I2C_Init+0x264>)
 8004088:	4293      	cmp	r3, r2
 800408a:	bf94      	ite	ls
 800408c:	2301      	movls	r3, #1
 800408e:	2300      	movhi	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e0db      	b.n	8004252 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4a72      	ldr	r2, [pc, #456]	; (8004268 <HAL_I2C_Init+0x268>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	0c9b      	lsrs	r3, r3, #18
 80040a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	4a64      	ldr	r2, [pc, #400]	; (800425c <HAL_I2C_Init+0x25c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d802      	bhi.n	80040d4 <HAL_I2C_Init+0xd4>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	3301      	adds	r3, #1
 80040d2:	e009      	b.n	80040e8 <HAL_I2C_Init+0xe8>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040da:	fb02 f303 	mul.w	r3, r2, r3
 80040de:	4a63      	ldr	r2, [pc, #396]	; (800426c <HAL_I2C_Init+0x26c>)
 80040e0:	fba2 2303 	umull	r2, r3, r2, r3
 80040e4:	099b      	lsrs	r3, r3, #6
 80040e6:	3301      	adds	r3, #1
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	430b      	orrs	r3, r1
 80040ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	4956      	ldr	r1, [pc, #344]	; (800425c <HAL_I2C_Init+0x25c>)
 8004104:	428b      	cmp	r3, r1
 8004106:	d80d      	bhi.n	8004124 <HAL_I2C_Init+0x124>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	1e59      	subs	r1, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	fbb1 f3f3 	udiv	r3, r1, r3
 8004116:	3301      	adds	r3, #1
 8004118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411c:	2b04      	cmp	r3, #4
 800411e:	bf38      	it	cc
 8004120:	2304      	movcc	r3, #4
 8004122:	e04f      	b.n	80041c4 <HAL_I2C_Init+0x1c4>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d111      	bne.n	8004150 <HAL_I2C_Init+0x150>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	1e58      	subs	r0, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	440b      	add	r3, r1
 800413a:	fbb0 f3f3 	udiv	r3, r0, r3
 800413e:	3301      	adds	r3, #1
 8004140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf0c      	ite	eq
 8004148:	2301      	moveq	r3, #1
 800414a:	2300      	movne	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	e012      	b.n	8004176 <HAL_I2C_Init+0x176>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	1e58      	subs	r0, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6859      	ldr	r1, [r3, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	0099      	lsls	r1, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	fbb0 f3f3 	udiv	r3, r0, r3
 8004166:	3301      	adds	r3, #1
 8004168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf0c      	ite	eq
 8004170:	2301      	moveq	r3, #1
 8004172:	2300      	movne	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <HAL_I2C_Init+0x17e>
 800417a:	2301      	movs	r3, #1
 800417c:	e022      	b.n	80041c4 <HAL_I2C_Init+0x1c4>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10e      	bne.n	80041a4 <HAL_I2C_Init+0x1a4>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1e58      	subs	r0, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6859      	ldr	r1, [r3, #4]
 800418e:	460b      	mov	r3, r1
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	440b      	add	r3, r1
 8004194:	fbb0 f3f3 	udiv	r3, r0, r3
 8004198:	3301      	adds	r3, #1
 800419a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800419e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a2:	e00f      	b.n	80041c4 <HAL_I2C_Init+0x1c4>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	1e58      	subs	r0, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6859      	ldr	r1, [r3, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	0099      	lsls	r1, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ba:	3301      	adds	r3, #1
 80041bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	6809      	ldr	r1, [r1, #0]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69da      	ldr	r2, [r3, #28]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6911      	ldr	r1, [r2, #16]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	68d2      	ldr	r2, [r2, #12]
 80041fe:	4311      	orrs	r1, r2
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	430b      	orrs	r3, r1
 8004206:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695a      	ldr	r2, [r3, #20]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	000186a0 	.word	0x000186a0
 8004260:	001e847f 	.word	0x001e847f
 8004264:	003d08ff 	.word	0x003d08ff
 8004268:	431bde83 	.word	0x431bde83
 800426c:	10624dd3 	.word	0x10624dd3

08004270 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e128      	b.n	80044d4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a90      	ldr	r2, [pc, #576]	; (80044dc <HAL_I2S_Init+0x26c>)
 800429a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7fd f9af 	bl	8001600 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2202      	movs	r2, #2
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80042b8:	f023 030f 	bic.w	r3, r3, #15
 80042bc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2202      	movs	r2, #2
 80042c4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d060      	beq.n	8004390 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d102      	bne.n	80042dc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80042d6:	2310      	movs	r3, #16
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	e001      	b.n	80042e0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80042dc:	2320      	movs	r3, #32
 80042de:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d802      	bhi.n	80042ee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80042ee:	2001      	movs	r0, #1
 80042f0:	f001 f98e 	bl	8005610 <HAL_RCCEx_GetPeriphCLKFreq>
 80042f4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042fe:	d125      	bne.n	800434c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d010      	beq.n	800432a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	461a      	mov	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	fbb2 f3f3 	udiv	r3, r2, r3
 8004324:	3305      	adds	r3, #5
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	e01f      	b.n	800436a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	fbb2 f2f3 	udiv	r2, r2, r3
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	461a      	mov	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	fbb2 f3f3 	udiv	r3, r2, r3
 8004346:	3305      	adds	r3, #5
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	e00e      	b.n	800436a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	fbb2 f2f3 	udiv	r2, r2, r3
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	461a      	mov	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	fbb2 f3f3 	udiv	r3, r2, r3
 8004366:	3305      	adds	r3, #5
 8004368:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4a5c      	ldr	r2, [pc, #368]	; (80044e0 <HAL_I2S_Init+0x270>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	08db      	lsrs	r3, r3, #3
 8004374:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	085b      	lsrs	r3, r3, #1
 8004386:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	61bb      	str	r3, [r7, #24]
 800438e:	e003      	b.n	8004398 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004390:	2302      	movs	r3, #2
 8004392:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d902      	bls.n	80043a4 <HAL_I2S_Init+0x134>
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	2bff      	cmp	r3, #255	; 0xff
 80043a2:	d907      	bls.n	80043b4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a8:	f043 0210 	orr.w	r2, r3, #16
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e08f      	b.n	80044d4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	ea42 0103 	orr.w	r1, r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69fa      	ldr	r2, [r7, #28]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80043d2:	f023 030f 	bic.w	r3, r3, #15
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6851      	ldr	r1, [r2, #4]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6892      	ldr	r2, [r2, #8]
 80043de:	4311      	orrs	r1, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	68d2      	ldr	r2, [r2, #12]
 80043e4:	4311      	orrs	r1, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6992      	ldr	r2, [r2, #24]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043f6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d161      	bne.n	80044c4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a38      	ldr	r2, [pc, #224]	; (80044e4 <HAL_I2S_Init+0x274>)
 8004404:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a37      	ldr	r2, [pc, #220]	; (80044e8 <HAL_I2S_Init+0x278>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d101      	bne.n	8004414 <HAL_I2S_Init+0x1a4>
 8004410:	4b36      	ldr	r3, [pc, #216]	; (80044ec <HAL_I2S_Init+0x27c>)
 8004412:	e001      	b.n	8004418 <HAL_I2S_Init+0x1a8>
 8004414:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6812      	ldr	r2, [r2, #0]
 800441e:	4932      	ldr	r1, [pc, #200]	; (80044e8 <HAL_I2S_Init+0x278>)
 8004420:	428a      	cmp	r2, r1
 8004422:	d101      	bne.n	8004428 <HAL_I2S_Init+0x1b8>
 8004424:	4a31      	ldr	r2, [pc, #196]	; (80044ec <HAL_I2S_Init+0x27c>)
 8004426:	e001      	b.n	800442c <HAL_I2S_Init+0x1bc>
 8004428:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800442c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004430:	f023 030f 	bic.w	r3, r3, #15
 8004434:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a2b      	ldr	r2, [pc, #172]	; (80044e8 <HAL_I2S_Init+0x278>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d101      	bne.n	8004444 <HAL_I2S_Init+0x1d4>
 8004440:	4b2a      	ldr	r3, [pc, #168]	; (80044ec <HAL_I2S_Init+0x27c>)
 8004442:	e001      	b.n	8004448 <HAL_I2S_Init+0x1d8>
 8004444:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004448:	2202      	movs	r2, #2
 800444a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a25      	ldr	r2, [pc, #148]	; (80044e8 <HAL_I2S_Init+0x278>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d101      	bne.n	800445a <HAL_I2S_Init+0x1ea>
 8004456:	4b25      	ldr	r3, [pc, #148]	; (80044ec <HAL_I2S_Init+0x27c>)
 8004458:	e001      	b.n	800445e <HAL_I2S_Init+0x1ee>
 800445a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800446a:	d003      	beq.n	8004474 <HAL_I2S_Init+0x204>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d103      	bne.n	800447c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	e001      	b.n	8004480 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800447c:	2300      	movs	r3, #0
 800447e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	b299      	uxth	r1, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004496:	4303      	orrs	r3, r0
 8004498:	b29b      	uxth	r3, r3
 800449a:	430b      	orrs	r3, r1
 800449c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800449e:	4313      	orrs	r3, r2
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	897b      	ldrh	r3, [r7, #10]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044ac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a0d      	ldr	r2, [pc, #52]	; (80044e8 <HAL_I2S_Init+0x278>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d101      	bne.n	80044bc <HAL_I2S_Init+0x24c>
 80044b8:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <HAL_I2S_Init+0x27c>)
 80044ba:	e001      	b.n	80044c0 <HAL_I2S_Init+0x250>
 80044bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044c0:	897a      	ldrh	r2, [r7, #10]
 80044c2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3720      	adds	r7, #32
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	080045e7 	.word	0x080045e7
 80044e0:	cccccccd 	.word	0xcccccccd
 80044e4:	080046fd 	.word	0x080046fd
 80044e8:	40003800 	.word	0x40003800
 80044ec:	40003400 	.word	0x40003400

080044f0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	881a      	ldrh	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	1c9a      	adds	r2, r3, #2
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10e      	bne.n	8004580 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004570:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff ffb8 	bl	80044f0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	b292      	uxth	r2, r2
 800459c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	1c9a      	adds	r2, r3, #2
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10e      	bne.n	80045de <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045ce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff ff93 	bl	8004504 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80045de:	bf00      	nop
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b086      	sub	sp, #24
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d13a      	bne.n	8004678 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b01      	cmp	r3, #1
 800460a:	d109      	bne.n	8004620 <I2S_IRQHandler+0x3a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004616:	2b40      	cmp	r3, #64	; 0x40
 8004618:	d102      	bne.n	8004620 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff ffb4 	bl	8004588 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004626:	2b40      	cmp	r3, #64	; 0x40
 8004628:	d126      	bne.n	8004678 <I2S_IRQHandler+0x92>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b20      	cmp	r3, #32
 8004636:	d11f      	bne.n	8004678 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004646:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	f043 0202 	orr.w	r2, r3, #2
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff ff50 	bl	8004518 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b03      	cmp	r3, #3
 8004682:	d136      	bne.n	80046f2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b02      	cmp	r3, #2
 800468c:	d109      	bne.n	80046a2 <I2S_IRQHandler+0xbc>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004698:	2b80      	cmp	r3, #128	; 0x80
 800469a:	d102      	bne.n	80046a2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff ff45 	bl	800452c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d122      	bne.n	80046f2 <I2S_IRQHandler+0x10c>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d11b      	bne.n	80046f2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046c8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e4:	f043 0204 	orr.w	r2, r3, #4
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff ff13 	bl	8004518 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046f2:	bf00      	nop
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4aa2      	ldr	r2, [pc, #648]	; (800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004716:	4ba2      	ldr	r3, [pc, #648]	; (80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004718:	e001      	b.n	800471e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800471a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a9b      	ldr	r2, [pc, #620]	; (800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d101      	bne.n	8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004734:	4b9a      	ldr	r3, [pc, #616]	; (80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004736:	e001      	b.n	800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004738:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004748:	d004      	beq.n	8004754 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	f040 8099 	bne.w	8004886 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b02      	cmp	r3, #2
 800475c:	d107      	bne.n	800476e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f925 	bl	80049b8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b01      	cmp	r3, #1
 8004776:	d107      	bne.n	8004788 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f9c8 	bl	8004b18 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478e:	2b40      	cmp	r3, #64	; 0x40
 8004790:	d13a      	bne.n	8004808 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f003 0320 	and.w	r3, r3, #32
 8004798:	2b00      	cmp	r3, #0
 800479a:	d035      	beq.n	8004808 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a7e      	ldr	r2, [pc, #504]	; (800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d101      	bne.n	80047aa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80047a6:	4b7e      	ldr	r3, [pc, #504]	; (80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047a8:	e001      	b.n	80047ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80047aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4979      	ldr	r1, [pc, #484]	; (800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047b6:	428b      	cmp	r3, r1
 80047b8:	d101      	bne.n	80047be <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80047ba:	4b79      	ldr	r3, [pc, #484]	; (80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047bc:	e001      	b.n	80047c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80047be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047c6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80047d8:	2300      	movs	r3, #0
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fa:	f043 0202 	orr.w	r2, r3, #2
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff fe88 	bl	8004518 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b08      	cmp	r3, #8
 8004810:	f040 80be 	bne.w	8004990 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f003 0320 	and.w	r3, r3, #32
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 80b8 	beq.w	8004990 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800482e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a59      	ldr	r2, [pc, #356]	; (800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d101      	bne.n	800483e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800483a:	4b59      	ldr	r3, [pc, #356]	; (80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800483c:	e001      	b.n	8004842 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800483e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4954      	ldr	r1, [pc, #336]	; (800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800484a:	428b      	cmp	r3, r1
 800484c:	d101      	bne.n	8004852 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800484e:	4b54      	ldr	r3, [pc, #336]	; (80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004850:	e001      	b.n	8004856 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004852:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004856:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800485a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800485c:	2300      	movs	r3, #0
 800485e:	60bb      	str	r3, [r7, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	60bb      	str	r3, [r7, #8]
 8004868:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004876:	f043 0204 	orr.w	r2, r3, #4
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff fe4a 	bl	8004518 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004884:	e084      	b.n	8004990 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b02      	cmp	r3, #2
 800488e:	d107      	bne.n	80048a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f8be 	bl	8004a1c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d107      	bne.n	80048ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f8fd 	bl	8004ab4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d12f      	bne.n	8004924 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d02a      	beq.n	8004924 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048dc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a2e      	ldr	r2, [pc, #184]	; (800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d101      	bne.n	80048ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80048e8:	4b2d      	ldr	r3, [pc, #180]	; (80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80048ea:	e001      	b.n	80048f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80048ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4929      	ldr	r1, [pc, #164]	; (800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80048f8:	428b      	cmp	r3, r1
 80048fa:	d101      	bne.n	8004900 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80048fc:	4b28      	ldr	r3, [pc, #160]	; (80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80048fe:	e001      	b.n	8004904 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004900:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004904:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004908:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004916:	f043 0202 	orr.w	r2, r3, #2
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff fdfa 	bl	8004518 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b08      	cmp	r3, #8
 800492c:	d131      	bne.n	8004992 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f003 0320 	and.w	r3, r3, #32
 8004934:	2b00      	cmp	r3, #0
 8004936:	d02c      	beq.n	8004992 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a17      	ldr	r2, [pc, #92]	; (800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d101      	bne.n	8004946 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004942:	4b17      	ldr	r3, [pc, #92]	; (80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004944:	e001      	b.n	800494a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004946:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4912      	ldr	r1, [pc, #72]	; (800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004952:	428b      	cmp	r3, r1
 8004954:	d101      	bne.n	800495a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004956:	4b12      	ldr	r3, [pc, #72]	; (80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004958:	e001      	b.n	800495e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800495a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800495e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004962:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004972:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004980:	f043 0204 	orr.w	r2, r3, #4
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff fdc5 	bl	8004518 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800498e:	e000      	b.n	8004992 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004990:	bf00      	nop
}
 8004992:	bf00      	nop
 8004994:	3720      	adds	r7, #32
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40003800 	.word	0x40003800
 80049a0:	40003400 	.word	0x40003400

080049a4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	1c99      	adds	r1, r3, #2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6251      	str	r1, [r2, #36]	; 0x24
 80049ca:	881a      	ldrh	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d113      	bne.n	8004a12 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d106      	bne.n	8004a12 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff ffc9 	bl	80049a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a12:	bf00      	nop
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	1c99      	adds	r1, r3, #2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6251      	str	r1, [r2, #36]	; 0x24
 8004a2e:	8819      	ldrh	r1, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1d      	ldr	r2, [pc, #116]	; (8004aac <I2SEx_TxISR_I2SExt+0x90>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d101      	bne.n	8004a3e <I2SEx_TxISR_I2SExt+0x22>
 8004a3a:	4b1d      	ldr	r3, [pc, #116]	; (8004ab0 <I2SEx_TxISR_I2SExt+0x94>)
 8004a3c:	e001      	b.n	8004a42 <I2SEx_TxISR_I2SExt+0x26>
 8004a3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a42:	460a      	mov	r2, r1
 8004a44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d121      	bne.n	8004aa2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a12      	ldr	r2, [pc, #72]	; (8004aac <I2SEx_TxISR_I2SExt+0x90>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d101      	bne.n	8004a6c <I2SEx_TxISR_I2SExt+0x50>
 8004a68:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <I2SEx_TxISR_I2SExt+0x94>)
 8004a6a:	e001      	b.n	8004a70 <I2SEx_TxISR_I2SExt+0x54>
 8004a6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	490d      	ldr	r1, [pc, #52]	; (8004aac <I2SEx_TxISR_I2SExt+0x90>)
 8004a78:	428b      	cmp	r3, r1
 8004a7a:	d101      	bne.n	8004a80 <I2SEx_TxISR_I2SExt+0x64>
 8004a7c:	4b0c      	ldr	r3, [pc, #48]	; (8004ab0 <I2SEx_TxISR_I2SExt+0x94>)
 8004a7e:	e001      	b.n	8004a84 <I2SEx_TxISR_I2SExt+0x68>
 8004a80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d106      	bne.n	8004aa2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff ff81 	bl	80049a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004aa2:	bf00      	nop
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40003800 	.word	0x40003800
 8004ab0:	40003400 	.word	0x40003400

08004ab4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68d8      	ldr	r0, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	1c99      	adds	r1, r3, #2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004acc:	b282      	uxth	r2, r0
 8004ace:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d113      	bne.n	8004b10 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004af6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff ff4a 	bl	80049a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b10:	bf00      	nop
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a20      	ldr	r2, [pc, #128]	; (8004ba8 <I2SEx_RxISR_I2SExt+0x90>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d101      	bne.n	8004b2e <I2SEx_RxISR_I2SExt+0x16>
 8004b2a:	4b20      	ldr	r3, [pc, #128]	; (8004bac <I2SEx_RxISR_I2SExt+0x94>)
 8004b2c:	e001      	b.n	8004b32 <I2SEx_RxISR_I2SExt+0x1a>
 8004b2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b32:	68d8      	ldr	r0, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	1c99      	adds	r1, r3, #2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004b3e:	b282      	uxth	r2, r0
 8004b40:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d121      	bne.n	8004b9e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a12      	ldr	r2, [pc, #72]	; (8004ba8 <I2SEx_RxISR_I2SExt+0x90>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d101      	bne.n	8004b68 <I2SEx_RxISR_I2SExt+0x50>
 8004b64:	4b11      	ldr	r3, [pc, #68]	; (8004bac <I2SEx_RxISR_I2SExt+0x94>)
 8004b66:	e001      	b.n	8004b6c <I2SEx_RxISR_I2SExt+0x54>
 8004b68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	490d      	ldr	r1, [pc, #52]	; (8004ba8 <I2SEx_RxISR_I2SExt+0x90>)
 8004b74:	428b      	cmp	r3, r1
 8004b76:	d101      	bne.n	8004b7c <I2SEx_RxISR_I2SExt+0x64>
 8004b78:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <I2SEx_RxISR_I2SExt+0x94>)
 8004b7a:	e001      	b.n	8004b80 <I2SEx_RxISR_I2SExt+0x68>
 8004b7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b84:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d106      	bne.n	8004b9e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff ff03 	bl	80049a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40003800 	.word	0x40003800
 8004bac:	40003400 	.word	0x40003400

08004bb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e25b      	b.n	800507a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d075      	beq.n	8004cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bce:	4ba3      	ldr	r3, [pc, #652]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 030c 	and.w	r3, r3, #12
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d00c      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bda:	4ba0      	ldr	r3, [pc, #640]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d112      	bne.n	8004c0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004be6:	4b9d      	ldr	r3, [pc, #628]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf2:	d10b      	bne.n	8004c0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf4:	4b99      	ldr	r3, [pc, #612]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d05b      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x108>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d157      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e236      	b.n	800507a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c14:	d106      	bne.n	8004c24 <HAL_RCC_OscConfig+0x74>
 8004c16:	4b91      	ldr	r3, [pc, #580]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a90      	ldr	r2, [pc, #576]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	e01d      	b.n	8004c60 <HAL_RCC_OscConfig+0xb0>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c2c:	d10c      	bne.n	8004c48 <HAL_RCC_OscConfig+0x98>
 8004c2e:	4b8b      	ldr	r3, [pc, #556]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a8a      	ldr	r2, [pc, #552]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	4b88      	ldr	r3, [pc, #544]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a87      	ldr	r2, [pc, #540]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	e00b      	b.n	8004c60 <HAL_RCC_OscConfig+0xb0>
 8004c48:	4b84      	ldr	r3, [pc, #528]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a83      	ldr	r2, [pc, #524]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	4b81      	ldr	r3, [pc, #516]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a80      	ldr	r2, [pc, #512]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d013      	beq.n	8004c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c68:	f7fc fe7e 	bl	8001968 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c70:	f7fc fe7a 	bl	8001968 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b64      	cmp	r3, #100	; 0x64
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e1fb      	b.n	800507a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c82:	4b76      	ldr	r3, [pc, #472]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0f0      	beq.n	8004c70 <HAL_RCC_OscConfig+0xc0>
 8004c8e:	e014      	b.n	8004cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c90:	f7fc fe6a 	bl	8001968 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c98:	f7fc fe66 	bl	8001968 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b64      	cmp	r3, #100	; 0x64
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e1e7      	b.n	800507a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004caa:	4b6c      	ldr	r3, [pc, #432]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1f0      	bne.n	8004c98 <HAL_RCC_OscConfig+0xe8>
 8004cb6:	e000      	b.n	8004cba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d063      	beq.n	8004d8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cc6:	4b65      	ldr	r3, [pc, #404]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 030c 	and.w	r3, r3, #12
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00b      	beq.n	8004cea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cd2:	4b62      	ldr	r3, [pc, #392]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d11c      	bne.n	8004d18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cde:	4b5f      	ldr	r3, [pc, #380]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d116      	bne.n	8004d18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cea:	4b5c      	ldr	r3, [pc, #368]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d005      	beq.n	8004d02 <HAL_RCC_OscConfig+0x152>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d001      	beq.n	8004d02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e1bb      	b.n	800507a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d02:	4b56      	ldr	r3, [pc, #344]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	4952      	ldr	r1, [pc, #328]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d16:	e03a      	b.n	8004d8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d020      	beq.n	8004d62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d20:	4b4f      	ldr	r3, [pc, #316]	; (8004e60 <HAL_RCC_OscConfig+0x2b0>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d26:	f7fc fe1f 	bl	8001968 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d2e:	f7fc fe1b 	bl	8001968 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e19c      	b.n	800507a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d40:	4b46      	ldr	r3, [pc, #280]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0f0      	beq.n	8004d2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d4c:	4b43      	ldr	r3, [pc, #268]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	4940      	ldr	r1, [pc, #256]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	600b      	str	r3, [r1, #0]
 8004d60:	e015      	b.n	8004d8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d62:	4b3f      	ldr	r3, [pc, #252]	; (8004e60 <HAL_RCC_OscConfig+0x2b0>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fc fdfe 	bl	8001968 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d70:	f7fc fdfa 	bl	8001968 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e17b      	b.n	800507a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d82:	4b36      	ldr	r3, [pc, #216]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d030      	beq.n	8004dfc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d016      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004da2:	4b30      	ldr	r3, [pc, #192]	; (8004e64 <HAL_RCC_OscConfig+0x2b4>)
 8004da4:	2201      	movs	r2, #1
 8004da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da8:	f7fc fdde 	bl	8001968 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004db0:	f7fc fdda 	bl	8001968 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e15b      	b.n	800507a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dc2:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0f0      	beq.n	8004db0 <HAL_RCC_OscConfig+0x200>
 8004dce:	e015      	b.n	8004dfc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dd0:	4b24      	ldr	r3, [pc, #144]	; (8004e64 <HAL_RCC_OscConfig+0x2b4>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd6:	f7fc fdc7 	bl	8001968 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dde:	f7fc fdc3 	bl	8001968 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e144      	b.n	800507a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004df0:	4b1a      	ldr	r3, [pc, #104]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1f0      	bne.n	8004dde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 80a0 	beq.w	8004f4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e0e:	4b13      	ldr	r3, [pc, #76]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10f      	bne.n	8004e3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60bb      	str	r3, [r7, #8]
 8004e1e:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	4a0e      	ldr	r2, [pc, #56]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e28:	6413      	str	r3, [r2, #64]	; 0x40
 8004e2a:	4b0c      	ldr	r3, [pc, #48]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e32:	60bb      	str	r3, [r7, #8]
 8004e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e36:	2301      	movs	r3, #1
 8004e38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <HAL_RCC_OscConfig+0x2b8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d121      	bne.n	8004e8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e46:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <HAL_RCC_OscConfig+0x2b8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a07      	ldr	r2, [pc, #28]	; (8004e68 <HAL_RCC_OscConfig+0x2b8>)
 8004e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e52:	f7fc fd89 	bl	8001968 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e58:	e011      	b.n	8004e7e <HAL_RCC_OscConfig+0x2ce>
 8004e5a:	bf00      	nop
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	42470000 	.word	0x42470000
 8004e64:	42470e80 	.word	0x42470e80
 8004e68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6c:	f7fc fd7c 	bl	8001968 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e0fd      	b.n	800507a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e7e:	4b81      	ldr	r3, [pc, #516]	; (8005084 <HAL_RCC_OscConfig+0x4d4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d106      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x2f0>
 8004e92:	4b7d      	ldr	r3, [pc, #500]	; (8005088 <HAL_RCC_OscConfig+0x4d8>)
 8004e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e96:	4a7c      	ldr	r2, [pc, #496]	; (8005088 <HAL_RCC_OscConfig+0x4d8>)
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e9e:	e01c      	b.n	8004eda <HAL_RCC_OscConfig+0x32a>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b05      	cmp	r3, #5
 8004ea6:	d10c      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x312>
 8004ea8:	4b77      	ldr	r3, [pc, #476]	; (8005088 <HAL_RCC_OscConfig+0x4d8>)
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eac:	4a76      	ldr	r2, [pc, #472]	; (8005088 <HAL_RCC_OscConfig+0x4d8>)
 8004eae:	f043 0304 	orr.w	r3, r3, #4
 8004eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb4:	4b74      	ldr	r3, [pc, #464]	; (8005088 <HAL_RCC_OscConfig+0x4d8>)
 8004eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb8:	4a73      	ldr	r2, [pc, #460]	; (8005088 <HAL_RCC_OscConfig+0x4d8>)
 8004eba:	f043 0301 	orr.w	r3, r3, #1
 8004ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec0:	e00b      	b.n	8004eda <HAL_RCC_OscConfig+0x32a>
 8004ec2:	4b71      	ldr	r3, [pc, #452]	; (8005088 <HAL_RCC_OscConfig+0x4d8>)
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec6:	4a70      	ldr	r2, [pc, #448]	; (8005088 <HAL_RCC_OscConfig+0x4d8>)
 8004ec8:	f023 0301 	bic.w	r3, r3, #1
 8004ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ece:	4b6e      	ldr	r3, [pc, #440]	; (8005088 <HAL_RCC_OscConfig+0x4d8>)
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed2:	4a6d      	ldr	r2, [pc, #436]	; (8005088 <HAL_RCC_OscConfig+0x4d8>)
 8004ed4:	f023 0304 	bic.w	r3, r3, #4
 8004ed8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d015      	beq.n	8004f0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee2:	f7fc fd41 	bl	8001968 <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee8:	e00a      	b.n	8004f00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eea:	f7fc fd3d 	bl	8001968 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e0bc      	b.n	800507a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f00:	4b61      	ldr	r3, [pc, #388]	; (8005088 <HAL_RCC_OscConfig+0x4d8>)
 8004f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0ee      	beq.n	8004eea <HAL_RCC_OscConfig+0x33a>
 8004f0c:	e014      	b.n	8004f38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f0e:	f7fc fd2b 	bl	8001968 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f14:	e00a      	b.n	8004f2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f16:	f7fc fd27 	bl	8001968 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e0a6      	b.n	800507a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f2c:	4b56      	ldr	r3, [pc, #344]	; (8005088 <HAL_RCC_OscConfig+0x4d8>)
 8004f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1ee      	bne.n	8004f16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d105      	bne.n	8004f4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f3e:	4b52      	ldr	r3, [pc, #328]	; (8005088 <HAL_RCC_OscConfig+0x4d8>)
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	4a51      	ldr	r2, [pc, #324]	; (8005088 <HAL_RCC_OscConfig+0x4d8>)
 8004f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 8092 	beq.w	8005078 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f54:	4b4c      	ldr	r3, [pc, #304]	; (8005088 <HAL_RCC_OscConfig+0x4d8>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 030c 	and.w	r3, r3, #12
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d05c      	beq.n	800501a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d141      	bne.n	8004fec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f68:	4b48      	ldr	r3, [pc, #288]	; (800508c <HAL_RCC_OscConfig+0x4dc>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6e:	f7fc fcfb 	bl	8001968 <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f76:	f7fc fcf7 	bl	8001968 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e078      	b.n	800507a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f88:	4b3f      	ldr	r3, [pc, #252]	; (8005088 <HAL_RCC_OscConfig+0x4d8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f0      	bne.n	8004f76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	69da      	ldr	r2, [r3, #28]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	019b      	lsls	r3, r3, #6
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	085b      	lsrs	r3, r3, #1
 8004fac:	3b01      	subs	r3, #1
 8004fae:	041b      	lsls	r3, r3, #16
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb6:	061b      	lsls	r3, r3, #24
 8004fb8:	4933      	ldr	r1, [pc, #204]	; (8005088 <HAL_RCC_OscConfig+0x4d8>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fbe:	4b33      	ldr	r3, [pc, #204]	; (800508c <HAL_RCC_OscConfig+0x4dc>)
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc4:	f7fc fcd0 	bl	8001968 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fcc:	f7fc fccc 	bl	8001968 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e04d      	b.n	800507a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fde:	4b2a      	ldr	r3, [pc, #168]	; (8005088 <HAL_RCC_OscConfig+0x4d8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f0      	beq.n	8004fcc <HAL_RCC_OscConfig+0x41c>
 8004fea:	e045      	b.n	8005078 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fec:	4b27      	ldr	r3, [pc, #156]	; (800508c <HAL_RCC_OscConfig+0x4dc>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff2:	f7fc fcb9 	bl	8001968 <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ffa:	f7fc fcb5 	bl	8001968 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e036      	b.n	800507a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800500c:	4b1e      	ldr	r3, [pc, #120]	; (8005088 <HAL_RCC_OscConfig+0x4d8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1f0      	bne.n	8004ffa <HAL_RCC_OscConfig+0x44a>
 8005018:	e02e      	b.n	8005078 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e029      	b.n	800507a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005026:	4b18      	ldr	r3, [pc, #96]	; (8005088 <HAL_RCC_OscConfig+0x4d8>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	429a      	cmp	r2, r3
 8005038:	d11c      	bne.n	8005074 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005044:	429a      	cmp	r2, r3
 8005046:	d115      	bne.n	8005074 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800504e:	4013      	ands	r3, r2
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005054:	4293      	cmp	r3, r2
 8005056:	d10d      	bne.n	8005074 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005062:	429a      	cmp	r2, r3
 8005064:	d106      	bne.n	8005074 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005070:	429a      	cmp	r2, r3
 8005072:	d001      	beq.n	8005078 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40007000 	.word	0x40007000
 8005088:	40023800 	.word	0x40023800
 800508c:	42470060 	.word	0x42470060

08005090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e0cc      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050a4:	4b68      	ldr	r3, [pc, #416]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 030f 	and.w	r3, r3, #15
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d90c      	bls.n	80050cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b2:	4b65      	ldr	r3, [pc, #404]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ba:	4b63      	ldr	r3, [pc, #396]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d001      	beq.n	80050cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0b8      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d020      	beq.n	800511a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050e4:	4b59      	ldr	r3, [pc, #356]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	4a58      	ldr	r2, [pc, #352]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050fc:	4b53      	ldr	r3, [pc, #332]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	4a52      	ldr	r2, [pc, #328]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005108:	4b50      	ldr	r3, [pc, #320]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	494d      	ldr	r1, [pc, #308]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	4313      	orrs	r3, r2
 8005118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d044      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d107      	bne.n	800513e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512e:	4b47      	ldr	r3, [pc, #284]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d119      	bne.n	800516e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e07f      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d003      	beq.n	800514e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800514a:	2b03      	cmp	r3, #3
 800514c:	d107      	bne.n	800515e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800514e:	4b3f      	ldr	r3, [pc, #252]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e06f      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800515e:	4b3b      	ldr	r3, [pc, #236]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e067      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800516e:	4b37      	ldr	r3, [pc, #220]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f023 0203 	bic.w	r2, r3, #3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	4934      	ldr	r1, [pc, #208]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	4313      	orrs	r3, r2
 800517e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005180:	f7fc fbf2 	bl	8001968 <HAL_GetTick>
 8005184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005186:	e00a      	b.n	800519e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005188:	f7fc fbee 	bl	8001968 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	f241 3288 	movw	r2, #5000	; 0x1388
 8005196:	4293      	cmp	r3, r2
 8005198:	d901      	bls.n	800519e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e04f      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800519e:	4b2b      	ldr	r3, [pc, #172]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 020c 	and.w	r2, r3, #12
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d1eb      	bne.n	8005188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051b0:	4b25      	ldr	r3, [pc, #148]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 030f 	and.w	r3, r3, #15
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d20c      	bcs.n	80051d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051be:	4b22      	ldr	r3, [pc, #136]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c6:	4b20      	ldr	r3, [pc, #128]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d001      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e032      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d008      	beq.n	80051f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e4:	4b19      	ldr	r3, [pc, #100]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	4916      	ldr	r1, [pc, #88]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d009      	beq.n	8005216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005202:	4b12      	ldr	r3, [pc, #72]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	490e      	ldr	r1, [pc, #56]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005212:	4313      	orrs	r3, r2
 8005214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005216:	f000 f821 	bl	800525c <HAL_RCC_GetSysClockFreq>
 800521a:	4601      	mov	r1, r0
 800521c:	4b0b      	ldr	r3, [pc, #44]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	091b      	lsrs	r3, r3, #4
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	4a0a      	ldr	r2, [pc, #40]	; (8005250 <HAL_RCC_ClockConfig+0x1c0>)
 8005228:	5cd3      	ldrb	r3, [r2, r3]
 800522a:	fa21 f303 	lsr.w	r3, r1, r3
 800522e:	4a09      	ldr	r2, [pc, #36]	; (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 8005230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005232:	4b09      	ldr	r3, [pc, #36]	; (8005258 <HAL_RCC_ClockConfig+0x1c8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f7fc fb52 	bl	80018e0 <HAL_InitTick>

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	40023c00 	.word	0x40023c00
 800524c:	40023800 	.word	0x40023800
 8005250:	0800c660 	.word	0x0800c660
 8005254:	200000a0 	.word	0x200000a0
 8005258:	200000a4 	.word	0x200000a4

0800525c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800525c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	607b      	str	r3, [r7, #4]
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	2300      	movs	r3, #0
 800526c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005272:	4b63      	ldr	r3, [pc, #396]	; (8005400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 030c 	and.w	r3, r3, #12
 800527a:	2b04      	cmp	r3, #4
 800527c:	d007      	beq.n	800528e <HAL_RCC_GetSysClockFreq+0x32>
 800527e:	2b08      	cmp	r3, #8
 8005280:	d008      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0x38>
 8005282:	2b00      	cmp	r3, #0
 8005284:	f040 80b4 	bne.w	80053f0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005288:	4b5e      	ldr	r3, [pc, #376]	; (8005404 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800528a:	60bb      	str	r3, [r7, #8]
       break;
 800528c:	e0b3      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800528e:	4b5e      	ldr	r3, [pc, #376]	; (8005408 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005290:	60bb      	str	r3, [r7, #8]
      break;
 8005292:	e0b0      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005294:	4b5a      	ldr	r3, [pc, #360]	; (8005400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800529c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800529e:	4b58      	ldr	r3, [pc, #352]	; (8005400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d04a      	beq.n	8005340 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052aa:	4b55      	ldr	r3, [pc, #340]	; (8005400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	099b      	lsrs	r3, r3, #6
 80052b0:	f04f 0400 	mov.w	r4, #0
 80052b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80052b8:	f04f 0200 	mov.w	r2, #0
 80052bc:	ea03 0501 	and.w	r5, r3, r1
 80052c0:	ea04 0602 	and.w	r6, r4, r2
 80052c4:	4629      	mov	r1, r5
 80052c6:	4632      	mov	r2, r6
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	f04f 0400 	mov.w	r4, #0
 80052d0:	0154      	lsls	r4, r2, #5
 80052d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80052d6:	014b      	lsls	r3, r1, #5
 80052d8:	4619      	mov	r1, r3
 80052da:	4622      	mov	r2, r4
 80052dc:	1b49      	subs	r1, r1, r5
 80052de:	eb62 0206 	sbc.w	r2, r2, r6
 80052e2:	f04f 0300 	mov.w	r3, #0
 80052e6:	f04f 0400 	mov.w	r4, #0
 80052ea:	0194      	lsls	r4, r2, #6
 80052ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80052f0:	018b      	lsls	r3, r1, #6
 80052f2:	1a5b      	subs	r3, r3, r1
 80052f4:	eb64 0402 	sbc.w	r4, r4, r2
 80052f8:	f04f 0100 	mov.w	r1, #0
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	00e2      	lsls	r2, r4, #3
 8005302:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005306:	00d9      	lsls	r1, r3, #3
 8005308:	460b      	mov	r3, r1
 800530a:	4614      	mov	r4, r2
 800530c:	195b      	adds	r3, r3, r5
 800530e:	eb44 0406 	adc.w	r4, r4, r6
 8005312:	f04f 0100 	mov.w	r1, #0
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	0262      	lsls	r2, r4, #9
 800531c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005320:	0259      	lsls	r1, r3, #9
 8005322:	460b      	mov	r3, r1
 8005324:	4614      	mov	r4, r2
 8005326:	4618      	mov	r0, r3
 8005328:	4621      	mov	r1, r4
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f04f 0400 	mov.w	r4, #0
 8005330:	461a      	mov	r2, r3
 8005332:	4623      	mov	r3, r4
 8005334:	f7fa ff4c 	bl	80001d0 <__aeabi_uldivmod>
 8005338:	4603      	mov	r3, r0
 800533a:	460c      	mov	r4, r1
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	e049      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005340:	4b2f      	ldr	r3, [pc, #188]	; (8005400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	099b      	lsrs	r3, r3, #6
 8005346:	f04f 0400 	mov.w	r4, #0
 800534a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	ea03 0501 	and.w	r5, r3, r1
 8005356:	ea04 0602 	and.w	r6, r4, r2
 800535a:	4629      	mov	r1, r5
 800535c:	4632      	mov	r2, r6
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	f04f 0400 	mov.w	r4, #0
 8005366:	0154      	lsls	r4, r2, #5
 8005368:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800536c:	014b      	lsls	r3, r1, #5
 800536e:	4619      	mov	r1, r3
 8005370:	4622      	mov	r2, r4
 8005372:	1b49      	subs	r1, r1, r5
 8005374:	eb62 0206 	sbc.w	r2, r2, r6
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	f04f 0400 	mov.w	r4, #0
 8005380:	0194      	lsls	r4, r2, #6
 8005382:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005386:	018b      	lsls	r3, r1, #6
 8005388:	1a5b      	subs	r3, r3, r1
 800538a:	eb64 0402 	sbc.w	r4, r4, r2
 800538e:	f04f 0100 	mov.w	r1, #0
 8005392:	f04f 0200 	mov.w	r2, #0
 8005396:	00e2      	lsls	r2, r4, #3
 8005398:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800539c:	00d9      	lsls	r1, r3, #3
 800539e:	460b      	mov	r3, r1
 80053a0:	4614      	mov	r4, r2
 80053a2:	195b      	adds	r3, r3, r5
 80053a4:	eb44 0406 	adc.w	r4, r4, r6
 80053a8:	f04f 0100 	mov.w	r1, #0
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	02a2      	lsls	r2, r4, #10
 80053b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80053b6:	0299      	lsls	r1, r3, #10
 80053b8:	460b      	mov	r3, r1
 80053ba:	4614      	mov	r4, r2
 80053bc:	4618      	mov	r0, r3
 80053be:	4621      	mov	r1, r4
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f04f 0400 	mov.w	r4, #0
 80053c6:	461a      	mov	r2, r3
 80053c8:	4623      	mov	r3, r4
 80053ca:	f7fa ff01 	bl	80001d0 <__aeabi_uldivmod>
 80053ce:	4603      	mov	r3, r0
 80053d0:	460c      	mov	r4, r1
 80053d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053d4:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	0c1b      	lsrs	r3, r3, #16
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	3301      	adds	r3, #1
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ec:	60bb      	str	r3, [r7, #8]
      break;
 80053ee:	e002      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053f0:	4b04      	ldr	r3, [pc, #16]	; (8005404 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80053f2:	60bb      	str	r3, [r7, #8]
      break;
 80053f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053f6:	68bb      	ldr	r3, [r7, #8]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005400:	40023800 	.word	0x40023800
 8005404:	00f42400 	.word	0x00f42400
 8005408:	007a1200 	.word	0x007a1200

0800540c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005410:	4b03      	ldr	r3, [pc, #12]	; (8005420 <HAL_RCC_GetHCLKFreq+0x14>)
 8005412:	681b      	ldr	r3, [r3, #0]
}
 8005414:	4618      	mov	r0, r3
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	200000a0 	.word	0x200000a0

08005424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005428:	f7ff fff0 	bl	800540c <HAL_RCC_GetHCLKFreq>
 800542c:	4601      	mov	r1, r0
 800542e:	4b05      	ldr	r3, [pc, #20]	; (8005444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	0a9b      	lsrs	r3, r3, #10
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	4a03      	ldr	r2, [pc, #12]	; (8005448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800543a:	5cd3      	ldrb	r3, [r2, r3]
 800543c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005440:	4618      	mov	r0, r3
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40023800 	.word	0x40023800
 8005448:	0800c670 	.word	0x0800c670

0800544c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d105      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005470:	2b00      	cmp	r3, #0
 8005472:	d035      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005474:	4b62      	ldr	r3, [pc, #392]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005476:	2200      	movs	r2, #0
 8005478:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800547a:	f7fc fa75 	bl	8001968 <HAL_GetTick>
 800547e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005480:	e008      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005482:	f7fc fa71 	bl	8001968 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d901      	bls.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e0b0      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005494:	4b5b      	ldr	r3, [pc, #364]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1f0      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	019a      	lsls	r2, r3, #6
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	071b      	lsls	r3, r3, #28
 80054ac:	4955      	ldr	r1, [pc, #340]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054b4:	4b52      	ldr	r3, [pc, #328]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80054b6:	2201      	movs	r2, #1
 80054b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054ba:	f7fc fa55 	bl	8001968 <HAL_GetTick>
 80054be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054c0:	e008      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80054c2:	f7fc fa51 	bl	8001968 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e090      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054d4:	4b4b      	ldr	r3, [pc, #300]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0f0      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8083 	beq.w	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	4b44      	ldr	r3, [pc, #272]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	4a43      	ldr	r2, [pc, #268]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fc:	6413      	str	r3, [r2, #64]	; 0x40
 80054fe:	4b41      	ldr	r3, [pc, #260]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800550a:	4b3f      	ldr	r3, [pc, #252]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a3e      	ldr	r2, [pc, #248]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005514:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005516:	f7fc fa27 	bl	8001968 <HAL_GetTick>
 800551a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800551c:	e008      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800551e:	f7fc fa23 	bl	8001968 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e062      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005530:	4b35      	ldr	r3, [pc, #212]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0f0      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800553c:	4b31      	ldr	r3, [pc, #196]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800553e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005544:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d02f      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	429a      	cmp	r2, r3
 8005558:	d028      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800555a:	4b2a      	ldr	r3, [pc, #168]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800555c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005562:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005564:	4b29      	ldr	r3, [pc, #164]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005566:	2201      	movs	r2, #1
 8005568:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800556a:	4b28      	ldr	r3, [pc, #160]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005570:	4a24      	ldr	r2, [pc, #144]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005576:	4b23      	ldr	r3, [pc, #140]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b01      	cmp	r3, #1
 8005580:	d114      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005582:	f7fc f9f1 	bl	8001968 <HAL_GetTick>
 8005586:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005588:	e00a      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800558a:	f7fc f9ed 	bl	8001968 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	f241 3288 	movw	r2, #5000	; 0x1388
 8005598:	4293      	cmp	r3, r2
 800559a:	d901      	bls.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e02a      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a0:	4b18      	ldr	r3, [pc, #96]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0ee      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055b8:	d10d      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80055ba:	4b12      	ldr	r3, [pc, #72]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80055ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ce:	490d      	ldr	r1, [pc, #52]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	608b      	str	r3, [r1, #8]
 80055d4:	e005      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80055d6:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	4a0a      	ldr	r2, [pc, #40]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055dc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80055e0:	6093      	str	r3, [r2, #8]
 80055e2:	4b08      	ldr	r3, [pc, #32]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ee:	4905      	ldr	r1, [pc, #20]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3718      	adds	r7, #24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	42470068 	.word	0x42470068
 8005604:	40023800 	.word	0x40023800
 8005608:	40007000 	.word	0x40007000
 800560c:	42470e40 	.word	0x42470e40

08005610 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005618:	2300      	movs	r3, #0
 800561a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d13d      	bne.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800562e:	4b22      	ldr	r3, [pc, #136]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005636:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d004      	beq.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800563e:	2b01      	cmp	r3, #1
 8005640:	d12f      	bne.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005642:	4b1e      	ldr	r3, [pc, #120]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005644:	617b      	str	r3, [r7, #20]
          break;
 8005646:	e02f      	b.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005648:	4b1b      	ldr	r3, [pc, #108]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005654:	d108      	bne.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005656:	4b18      	ldr	r3, [pc, #96]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800565e:	4a18      	ldr	r2, [pc, #96]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005660:	fbb2 f3f3 	udiv	r3, r2, r3
 8005664:	613b      	str	r3, [r7, #16]
 8005666:	e007      	b.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005668:	4b13      	ldr	r3, [pc, #76]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005670:	4a14      	ldr	r2, [pc, #80]	; (80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005672:	fbb2 f3f3 	udiv	r3, r2, r3
 8005676:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005678:	4b0f      	ldr	r3, [pc, #60]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800567a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800567e:	099b      	lsrs	r3, r3, #6
 8005680:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	fb02 f303 	mul.w	r3, r2, r3
 800568a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800568c:	4b0a      	ldr	r3, [pc, #40]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800568e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005692:	0f1b      	lsrs	r3, r3, #28
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	fbb2 f3f3 	udiv	r3, r2, r3
 800569e:	617b      	str	r3, [r7, #20]
          break;
 80056a0:	e002      	b.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	617b      	str	r3, [r7, #20]
          break;
 80056a6:	bf00      	nop
        }
      }
      break;
 80056a8:	bf00      	nop
    }
  }
  return frequency;
 80056aa:	697b      	ldr	r3, [r7, #20]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	40023800 	.word	0x40023800
 80056bc:	00bb8000 	.word	0x00bb8000
 80056c0:	007a1200 	.word	0x007a1200
 80056c4:	00f42400 	.word	0x00f42400

080056c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e056      	b.n	8005788 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d106      	bne.n	80056fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7fb ffeb 	bl	80016d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2202      	movs	r2, #2
 80056fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005710:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	431a      	orrs	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	431a      	orrs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	ea42 0103 	orr.w	r1, r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	0c1b      	lsrs	r3, r3, #16
 8005758:	f003 0104 	and.w	r1, r3, #4
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	69da      	ldr	r2, [r3, #28]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005776:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005790:	b084      	sub	sp, #16
 8005792:	b580      	push	{r7, lr}
 8005794:	b084      	sub	sp, #16
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	f107 001c 	add.w	r0, r7, #28
 800579e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d122      	bne.n	80057ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d105      	bne.n	80057e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f94a 	bl	8005a7c <USB_CoreReset>
 80057e8:	4603      	mov	r3, r0
 80057ea:	73fb      	strb	r3, [r7, #15]
 80057ec:	e01a      	b.n	8005824 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f93e 	bl	8005a7c <USB_CoreReset>
 8005800:	4603      	mov	r3, r0
 8005802:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	639a      	str	r2, [r3, #56]	; 0x38
 8005816:	e005      	b.n	8005824 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	2b01      	cmp	r3, #1
 8005828:	d10b      	bne.n	8005842 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f043 0206 	orr.w	r2, r3, #6
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f043 0220 	orr.w	r2, r3, #32
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005842:	7bfb      	ldrb	r3, [r7, #15]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800584e:	b004      	add	sp, #16
 8005850:	4770      	bx	lr

08005852 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f043 0201 	orr.w	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f023 0201 	bic.w	r2, r3, #1
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b082      	sub	sp, #8
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	460b      	mov	r3, r1
 80058a0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058ae:	78fb      	ldrb	r3, [r7, #3]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d106      	bne.n	80058c2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	60da      	str	r2, [r3, #12]
 80058c0:	e00b      	b.n	80058da <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80058c2:	78fb      	ldrb	r3, [r7, #3]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d106      	bne.n	80058d6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	60da      	str	r2, [r3, #12]
 80058d4:	e001      	b.n	80058da <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e003      	b.n	80058e2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80058da:	2032      	movs	r0, #50	; 0x32
 80058dc:	f7fc f850 	bl	8001980 <HAL_Delay>

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	019b      	lsls	r3, r3, #6
 80058fe:	f043 0220 	orr.w	r2, r3, #32
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3301      	adds	r3, #1
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4a09      	ldr	r2, [pc, #36]	; (8005934 <USB_FlushTxFifo+0x48>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d901      	bls.n	8005918 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e006      	b.n	8005926 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f003 0320 	and.w	r3, r3, #32
 8005920:	2b20      	cmp	r3, #32
 8005922:	d0f0      	beq.n	8005906 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	00030d40 	.word	0x00030d40

08005938 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005940:	2300      	movs	r3, #0
 8005942:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2210      	movs	r2, #16
 8005948:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3301      	adds	r3, #1
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4a09      	ldr	r2, [pc, #36]	; (8005978 <USB_FlushRxFifo+0x40>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d901      	bls.n	800595c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e006      	b.n	800596a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	f003 0310 	and.w	r3, r3, #16
 8005964:	2b10      	cmp	r3, #16
 8005966:	d0f0      	beq.n	800594a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	00030d40 	.word	0x00030d40

0800597c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800597c:	b480      	push	{r7}
 800597e:	b089      	sub	sp, #36	; 0x24
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	4611      	mov	r1, r2
 8005988:	461a      	mov	r2, r3
 800598a:	460b      	mov	r3, r1
 800598c:	71fb      	strb	r3, [r7, #7]
 800598e:	4613      	mov	r3, r2
 8005990:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800599a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d11a      	bne.n	80059d8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80059a2:	88bb      	ldrh	r3, [r7, #4]
 80059a4:	3303      	adds	r3, #3
 80059a6:	089b      	lsrs	r3, r3, #2
 80059a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80059aa:	2300      	movs	r3, #0
 80059ac:	61bb      	str	r3, [r7, #24]
 80059ae:	e00f      	b.n	80059d0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	031a      	lsls	r2, r3, #12
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059bc:	461a      	mov	r2, r3
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	3304      	adds	r3, #4
 80059c8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	3301      	adds	r3, #1
 80059ce:	61bb      	str	r3, [r7, #24]
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d3eb      	bcc.n	80059b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3724      	adds	r7, #36	; 0x24
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b089      	sub	sp, #36	; 0x24
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	4613      	mov	r3, r2
 80059f2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80059fc:	88fb      	ldrh	r3, [r7, #6]
 80059fe:	3303      	adds	r3, #3
 8005a00:	089b      	lsrs	r3, r3, #2
 8005a02:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005a04:	2300      	movs	r3, #0
 8005a06:	61bb      	str	r3, [r7, #24]
 8005a08:	e00b      	b.n	8005a22 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	61bb      	str	r3, [r7, #24]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d3ef      	bcc.n	8005a0a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005a2a:	69fb      	ldr	r3, [r7, #28]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3724      	adds	r7, #36	; 0x24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a50:	68fb      	ldr	r3, [r7, #12]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
	...

08005a7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <USB_CoreReset+0x64>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d901      	bls.n	8005a9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e01b      	b.n	8005ad2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	daf2      	bge.n	8005a88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f043 0201 	orr.w	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4a09      	ldr	r2, [pc, #36]	; (8005ae0 <USB_CoreReset+0x64>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d901      	bls.n	8005ac4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e006      	b.n	8005ad2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d0f0      	beq.n	8005ab2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	00030d40 	.word	0x00030d40

08005ae4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b084      	sub	sp, #16
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	f107 001c 	add.w	r0, r7, #28
 8005af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b00:	461a      	mov	r2, r3
 8005b02:	2300      	movs	r3, #0
 8005b04:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d018      	beq.n	8005b68 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d10a      	bne.n	8005b52 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b4a:	f043 0304 	orr.w	r3, r3, #4
 8005b4e:	6013      	str	r3, [r2, #0]
 8005b50:	e014      	b.n	8005b7c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b60:	f023 0304 	bic.w	r3, r3, #4
 8005b64:	6013      	str	r3, [r2, #0]
 8005b66:	e009      	b.n	8005b7c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b76:	f023 0304 	bic.w	r3, r3, #4
 8005b7a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005b7c:	2110      	movs	r1, #16
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7ff feb4 	bl	80058ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f7ff fed7 	bl	8005938 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	e015      	b.n	8005bbc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d3e5      	bcc.n	8005b90 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f8ac 	bl	8005d24 <USB_DriveVbus>

  HAL_Delay(200U);
 8005bcc:	20c8      	movs	r0, #200	; 0xc8
 8005bce:	f7fb fed7 	bl	8001980 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f04f 32ff 	mov.w	r2, #4294967295
 8005bde:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00b      	beq.n	8005c04 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a14      	ldr	r2, [pc, #80]	; (8005c48 <USB_HostInit+0x164>)
 8005bf8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a13      	ldr	r2, [pc, #76]	; (8005c4c <USB_HostInit+0x168>)
 8005bfe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005c02:	e009      	b.n	8005c18 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2280      	movs	r2, #128	; 0x80
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a10      	ldr	r2, [pc, #64]	; (8005c50 <USB_HostInit+0x16c>)
 8005c0e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a10      	ldr	r2, [pc, #64]	; (8005c54 <USB_HostInit+0x170>)
 8005c14:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d105      	bne.n	8005c2a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	f043 0210 	orr.w	r2, r3, #16
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <USB_HostInit+0x174>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c42:	b004      	add	sp, #16
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	01000200 	.word	0x01000200
 8005c4c:	00e00300 	.word	0x00e00300
 8005c50:	00600080 	.word	0x00600080
 8005c54:	004000e0 	.word	0x004000e0
 8005c58:	a3200008 	.word	0xa3200008

08005c5c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c7a:	f023 0303 	bic.w	r3, r3, #3
 8005c7e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	f003 0303 	and.w	r3, r3, #3
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c94:	4313      	orrs	r3, r2
 8005c96:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005c98:	78fb      	ldrb	r3, [r7, #3]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d107      	bne.n	8005cae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005caa:	6053      	str	r3, [r2, #4]
 8005cac:	e009      	b.n	8005cc2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005cae:	78fb      	ldrb	r3, [r7, #3]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d106      	bne.n	8005cc2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f241 7370 	movw	r3, #6000	; 0x1770
 8005cc0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005cf0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cfe:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005d00:	2064      	movs	r0, #100	; 0x64
 8005d02:	f7fb fe3d 	bl	8001980 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d12:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005d14:	200a      	movs	r0, #10
 8005d16:	f7fb fe33 	bl	8001980 <HAL_Delay>

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005d48:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d109      	bne.n	8005d68 <USB_DriveVbus+0x44>
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d106      	bne.n	8005d68 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d66:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d72:	d109      	bne.n	8005d88 <USB_DriveVbus+0x64>
 8005d74:	78fb      	ldrb	r3, [r7, #3]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d106      	bne.n	8005d88 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d86:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b085      	sub	sp, #20
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	0c5b      	lsrs	r3, r3, #17
 8005db4:	f003 0303 	and.w	r3, r3, #3
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	b29b      	uxth	r3, r3
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
	...

08005de8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	4608      	mov	r0, r1
 8005df2:	4611      	mov	r1, r2
 8005df4:	461a      	mov	r2, r3
 8005df6:	4603      	mov	r3, r0
 8005df8:	70fb      	strb	r3, [r7, #3]
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	70bb      	strb	r3, [r7, #2]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e16:	461a      	mov	r2, r3
 8005e18:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005e1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d87e      	bhi.n	8005f24 <USB_HC_Init+0x13c>
 8005e26:	a201      	add	r2, pc, #4	; (adr r2, 8005e2c <USB_HC_Init+0x44>)
 8005e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2c:	08005e3d 	.word	0x08005e3d
 8005e30:	08005ee7 	.word	0x08005ee7
 8005e34:	08005e3d 	.word	0x08005e3d
 8005e38:	08005ea9 	.word	0x08005ea9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e3c:	78fb      	ldrb	r3, [r7, #3]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e48:	461a      	mov	r2, r3
 8005e4a:	f240 439d 	movw	r3, #1181	; 0x49d
 8005e4e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005e50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	da10      	bge.n	8005e7a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	78fa      	ldrb	r2, [r7, #3]
 8005e68:	0151      	lsls	r1, r2, #5
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	440a      	add	r2, r1
 8005e6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e76:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005e78:	e057      	b.n	8005f2a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d051      	beq.n	8005f2a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005e86:	78fb      	ldrb	r3, [r7, #3]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	78fa      	ldrb	r2, [r7, #3]
 8005e96:	0151      	lsls	r1, r2, #5
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	440a      	add	r2, r1
 8005e9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ea0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ea4:	60d3      	str	r3, [r2, #12]
      break;
 8005ea6:	e040      	b.n	8005f2a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ea8:	78fb      	ldrb	r3, [r7, #3]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	f240 639d 	movw	r3, #1693	; 0x69d
 8005eba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ebc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	da34      	bge.n	8005f2e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ec4:	78fb      	ldrb	r3, [r7, #3]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	78fa      	ldrb	r2, [r7, #3]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005ee4:	e023      	b.n	8005f2e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ee6:	78fb      	ldrb	r3, [r7, #3]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f240 2325 	movw	r3, #549	; 0x225
 8005ef8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005efa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	da17      	bge.n	8005f32 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005f02:	78fb      	ldrb	r3, [r7, #3]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	78fa      	ldrb	r2, [r7, #3]
 8005f12:	0151      	lsls	r1, r2, #5
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	440a      	add	r2, r1
 8005f18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f1c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005f20:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005f22:	e006      	b.n	8005f32 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	75fb      	strb	r3, [r7, #23]
      break;
 8005f28:	e004      	b.n	8005f34 <USB_HC_Init+0x14c>
      break;
 8005f2a:	bf00      	nop
 8005f2c:	e002      	b.n	8005f34 <USB_HC_Init+0x14c>
      break;
 8005f2e:	bf00      	nop
 8005f30:	e000      	b.n	8005f34 <USB_HC_Init+0x14c>
      break;
 8005f32:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f3a:	699a      	ldr	r2, [r3, #24]
 8005f3c:	78fb      	ldrb	r3, [r7, #3]
 8005f3e:	f003 030f 	and.w	r3, r3, #15
 8005f42:	2101      	movs	r1, #1
 8005f44:	fa01 f303 	lsl.w	r3, r1, r3
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005f5e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	da03      	bge.n	8005f6e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f6a:	613b      	str	r3, [r7, #16]
 8005f6c:	e001      	b.n	8005f72 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005f72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d103      	bne.n	8005f82 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005f7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	e001      	b.n	8005f86 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f86:	787b      	ldrb	r3, [r7, #1]
 8005f88:	059b      	lsls	r3, r3, #22
 8005f8a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f8e:	78bb      	ldrb	r3, [r7, #2]
 8005f90:	02db      	lsls	r3, r3, #11
 8005f92:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f96:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005f9c:	049b      	lsls	r3, r3, #18
 8005f9e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005fa2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005fa4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005fa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005faa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	0159      	lsls	r1, r3, #5
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	440b      	add	r3, r1
 8005fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fbc:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005fc2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005fc4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d10f      	bne.n	8005fec <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005fcc:	78fb      	ldrb	r3, [r7, #3]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	78fa      	ldrb	r2, [r7, #3]
 8005fdc:	0151      	lsls	r1, r2, #5
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	440a      	add	r2, r1
 8005fe2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fe6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fea:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop

08005ffc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08c      	sub	sp, #48	; 0x30
 8006000:	af02      	add	r7, sp, #8
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	4613      	mov	r3, r2
 8006008:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	785b      	ldrb	r3, [r3, #1]
 8006012:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006018:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006022:	2b00      	cmp	r3, #0
 8006024:	d028      	beq.n	8006078 <USB_HC_StartXfer+0x7c>
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	791b      	ldrb	r3, [r3, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d124      	bne.n	8006078 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800602e:	79fb      	ldrb	r3, [r7, #7]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10b      	bne.n	800604c <USB_HC_StartXfer+0x50>
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	795b      	ldrb	r3, [r3, #5]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d107      	bne.n	800604c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	785b      	ldrb	r3, [r3, #1]
 8006040:	4619      	mov	r1, r3
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 fa2e 	bl	80064a4 <USB_DoPing>
      return HAL_OK;
 8006048:	2300      	movs	r3, #0
 800604a:	e112      	b.n	8006272 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800604c:	79fb      	ldrb	r3, [r7, #7]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d112      	bne.n	8006078 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	4413      	add	r3, r2
 800605a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	0151      	lsls	r1, r2, #5
 8006064:	6a3a      	ldr	r2, [r7, #32]
 8006066:	440a      	add	r2, r1
 8006068:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800606c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006070:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2200      	movs	r2, #0
 8006076:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d018      	beq.n	80060b2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	8912      	ldrh	r2, [r2, #8]
 8006088:	4413      	add	r3, r2
 800608a:	3b01      	subs	r3, #1
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	8912      	ldrh	r2, [r2, #8]
 8006090:	fbb3 f3f2 	udiv	r3, r3, r2
 8006094:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006096:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006098:	8b7b      	ldrh	r3, [r7, #26]
 800609a:	429a      	cmp	r2, r3
 800609c:	d90b      	bls.n	80060b6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800609e:	8b7b      	ldrh	r3, [r7, #26]
 80060a0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80060a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	8912      	ldrh	r2, [r2, #8]
 80060a8:	fb02 f203 	mul.w	r2, r2, r3
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	611a      	str	r2, [r3, #16]
 80060b0:	e001      	b.n	80060b6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80060b2:	2301      	movs	r3, #1
 80060b4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	78db      	ldrb	r3, [r3, #3]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d006      	beq.n	80060cc <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80060be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	8912      	ldrh	r2, [r2, #8]
 80060c4:	fb02 f203 	mul.w	r2, r2, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060d6:	04d9      	lsls	r1, r3, #19
 80060d8:	4b68      	ldr	r3, [pc, #416]	; (800627c <USB_HC_StartXfer+0x280>)
 80060da:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80060dc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	7a9b      	ldrb	r3, [r3, #10]
 80060e2:	075b      	lsls	r3, r3, #29
 80060e4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80060e8:	69f9      	ldr	r1, [r7, #28]
 80060ea:	0148      	lsls	r0, r1, #5
 80060ec:	6a39      	ldr	r1, [r7, #32]
 80060ee:	4401      	add	r1, r0
 80060f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060f4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80060f6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80060f8:	79fb      	ldrb	r3, [r7, #7]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d009      	beq.n	8006112 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	68d9      	ldr	r1, [r3, #12]
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	4413      	add	r3, r2
 800610a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610e:	460a      	mov	r2, r1
 8006110:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	bf0c      	ite	eq
 8006122:	2301      	moveq	r3, #1
 8006124:	2300      	movne	r3, #0
 8006126:	b2db      	uxtb	r3, r3
 8006128:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	6a3b      	ldr	r3, [r7, #32]
 8006130:	4413      	add	r3, r2
 8006132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	0151      	lsls	r1, r2, #5
 800613c:	6a3a      	ldr	r2, [r7, #32]
 800613e:	440a      	add	r2, r1
 8006140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006144:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006148:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	4413      	add	r3, r2
 8006152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	7e7b      	ldrb	r3, [r7, #25]
 800615a:	075b      	lsls	r3, r3, #29
 800615c:	69f9      	ldr	r1, [r7, #28]
 800615e:	0148      	lsls	r0, r1, #5
 8006160:	6a39      	ldr	r1, [r7, #32]
 8006162:	4401      	add	r1, r0
 8006164:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006168:	4313      	orrs	r3, r2
 800616a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	4413      	add	r3, r2
 8006174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a41      	ldr	r2, [pc, #260]	; (8006280 <USB_HC_StartXfer+0x284>)
 800617c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800617e:	4b40      	ldr	r3, [pc, #256]	; (8006280 <USB_HC_StartXfer+0x284>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006186:	4a3e      	ldr	r2, [pc, #248]	; (8006280 <USB_HC_StartXfer+0x284>)
 8006188:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	78db      	ldrb	r3, [r3, #3]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d006      	beq.n	80061a0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006192:	4b3b      	ldr	r3, [pc, #236]	; (8006280 <USB_HC_StartXfer+0x284>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800619a:	4a39      	ldr	r2, [pc, #228]	; (8006280 <USB_HC_StartXfer+0x284>)
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	e005      	b.n	80061ac <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80061a0:	4b37      	ldr	r3, [pc, #220]	; (8006280 <USB_HC_StartXfer+0x284>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061a8:	4a35      	ldr	r2, [pc, #212]	; (8006280 <USB_HC_StartXfer+0x284>)
 80061aa:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061ac:	4b34      	ldr	r3, [pc, #208]	; (8006280 <USB_HC_StartXfer+0x284>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061b4:	4a32      	ldr	r2, [pc, #200]	; (8006280 <USB_HC_StartXfer+0x284>)
 80061b6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c4:	461a      	mov	r2, r3
 80061c6:	4b2e      	ldr	r3, [pc, #184]	; (8006280 <USB_HC_StartXfer+0x284>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80061cc:	79fb      	ldrb	r3, [r7, #7]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d14e      	bne.n	8006270 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	78db      	ldrb	r3, [r3, #3]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d14a      	bne.n	8006270 <USB_HC_StartXfer+0x274>
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d046      	beq.n	8006270 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	79db      	ldrb	r3, [r3, #7]
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d830      	bhi.n	800624c <USB_HC_StartXfer+0x250>
 80061ea:	a201      	add	r2, pc, #4	; (adr r2, 80061f0 <USB_HC_StartXfer+0x1f4>)
 80061ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f0:	08006201 	.word	0x08006201
 80061f4:	08006225 	.word	0x08006225
 80061f8:	08006201 	.word	0x08006201
 80061fc:	08006225 	.word	0x08006225
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	3303      	adds	r3, #3
 8006206:	089b      	lsrs	r3, r3, #2
 8006208:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800620a:	8afa      	ldrh	r2, [r7, #22]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006210:	b29b      	uxth	r3, r3
 8006212:	429a      	cmp	r2, r3
 8006214:	d91c      	bls.n	8006250 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	f043 0220 	orr.w	r2, r3, #32
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	619a      	str	r2, [r3, #24]
          }
          break;
 8006222:	e015      	b.n	8006250 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	3303      	adds	r3, #3
 800622a:	089b      	lsrs	r3, r3, #2
 800622c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800622e:	8afa      	ldrh	r2, [r7, #22]
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	b29b      	uxth	r3, r3
 800623a:	429a      	cmp	r2, r3
 800623c:	d90a      	bls.n	8006254 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	619a      	str	r2, [r3, #24]
          }
          break;
 800624a:	e003      	b.n	8006254 <USB_HC_StartXfer+0x258>

        default:
          break;
 800624c:	bf00      	nop
 800624e:	e002      	b.n	8006256 <USB_HC_StartXfer+0x25a>
          break;
 8006250:	bf00      	nop
 8006252:	e000      	b.n	8006256 <USB_HC_StartXfer+0x25a>
          break;
 8006254:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	68d9      	ldr	r1, [r3, #12]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	785a      	ldrb	r2, [r3, #1]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	b298      	uxth	r0, r3
 8006264:	2300      	movs	r3, #0
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	4603      	mov	r3, r0
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7ff fb86 	bl	800597c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3728      	adds	r7, #40	; 0x28
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	1ff80000 	.word	0x1ff80000
 8006280:	20000154 	.word	0x20000154

08006284 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	b29b      	uxth	r3, r3
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b087      	sub	sp, #28
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	460b      	mov	r3, r1
 80062b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80062b6:	78fb      	ldrb	r3, [r7, #3]
 80062b8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	0c9b      	lsrs	r3, r3, #18
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <USB_HC_Halt+0x3a>
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d16c      	bne.n	80063ba <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	0151      	lsls	r1, r2, #5
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	440a      	add	r2, r1
 80062f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062fe:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d143      	bne.n	8006394 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	4413      	add	r3, r2
 8006314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	0151      	lsls	r1, r2, #5
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	440a      	add	r2, r1
 8006322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006326:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800632a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	4413      	add	r3, r2
 8006334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	0151      	lsls	r1, r2, #5
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	440a      	add	r2, r1
 8006342:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006346:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800634a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	4413      	add	r3, r2
 8006354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	0151      	lsls	r1, r2, #5
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	440a      	add	r2, r1
 8006362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006366:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800636a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	3301      	adds	r3, #1
 8006370:	617b      	str	r3, [r7, #20]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006378:	d81d      	bhi.n	80063b6 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	4413      	add	r3, r2
 8006382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800638c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006390:	d0ec      	beq.n	800636c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006392:	e080      	b.n	8006496 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	4413      	add	r3, r2
 800639c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	0151      	lsls	r1, r2, #5
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	440a      	add	r2, r1
 80063aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063b2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80063b4:	e06f      	b.n	8006496 <USB_HC_Halt+0x1f0>
          break;
 80063b6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80063b8:	e06d      	b.n	8006496 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	0151      	lsls	r1, r2, #5
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	440a      	add	r2, r1
 80063d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063d8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d143      	bne.n	8006472 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	0151      	lsls	r1, r2, #5
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	440a      	add	r2, r1
 8006400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006404:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006408:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	4413      	add	r3, r2
 8006412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	0151      	lsls	r1, r2, #5
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	440a      	add	r2, r1
 8006420:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006424:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006428:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	4413      	add	r3, r2
 8006432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	0151      	lsls	r1, r2, #5
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	440a      	add	r2, r1
 8006440:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006444:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006448:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	3301      	adds	r3, #1
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006456:	d81d      	bhi.n	8006494 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	4413      	add	r3, r2
 8006460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800646a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800646e:	d0ec      	beq.n	800644a <USB_HC_Halt+0x1a4>
 8006470:	e011      	b.n	8006496 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	4413      	add	r3, r2
 800647a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	0151      	lsls	r1, r2, #5
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	440a      	add	r2, r1
 8006488:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800648c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	e000      	b.n	8006496 <USB_HC_Halt+0x1f0>
          break;
 8006494:	bf00      	nop
    }
  }

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	371c      	adds	r7, #28
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80064b8:	2301      	movs	r3, #1
 80064ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	04da      	lsls	r2, r3, #19
 80064c0:	4b15      	ldr	r3, [pc, #84]	; (8006518 <USB_DoPing+0x74>)
 80064c2:	4013      	ands	r3, r2
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	0151      	lsls	r1, r2, #5
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	440a      	add	r2, r1
 80064cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064d4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064ec:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064f4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006502:	461a      	mov	r2, r3
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	1ff80000 	.word	0x1ff80000

0800651c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff f9a1 	bl	8005874 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006532:	2110      	movs	r1, #16
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7ff f9d9 	bl	80058ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff f9fc 	bl	8005938 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006540:	2300      	movs	r3, #0
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	e01f      	b.n	8006586 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4413      	add	r3, r2
 800654e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800655c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006564:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800656c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4413      	add	r3, r2
 8006576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657a:	461a      	mov	r2, r3
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	3301      	adds	r3, #1
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	2b0f      	cmp	r3, #15
 800658a:	d9dc      	bls.n	8006546 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800658c:	2300      	movs	r3, #0
 800658e:	613b      	str	r3, [r7, #16]
 8006590:	e034      	b.n	80065fc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065a8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065b0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065b8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c6:	461a      	mov	r2, r3
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	3301      	adds	r3, #1
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065d8:	d80c      	bhi.n	80065f4 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065f0:	d0ec      	beq.n	80065cc <USB_StopHost+0xb0>
 80065f2:	e000      	b.n	80065f6 <USB_StopHost+0xda>
        break;
 80065f4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	3301      	adds	r3, #1
 80065fa:	613b      	str	r3, [r7, #16]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	2b0f      	cmp	r3, #15
 8006600:	d9c7      	bls.n	8006592 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006608:	461a      	mov	r2, r3
 800660a:	f04f 33ff 	mov.w	r3, #4294967295
 800660e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f04f 32ff 	mov.w	r2, #4294967295
 8006616:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7ff f91a 	bl	8005852 <USB_EnableGlobalInt>

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006628:	b590      	push	{r4, r7, lr}
 800662a:	b089      	sub	sp, #36	; 0x24
 800662c:	af04      	add	r7, sp, #16
 800662e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006630:	2301      	movs	r3, #1
 8006632:	2202      	movs	r2, #2
 8006634:	2102      	movs	r1, #2
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fcb4 	bl	8006fa4 <USBH_FindInterface>
 800663c:	4603      	mov	r3, r0
 800663e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	2bff      	cmp	r3, #255	; 0xff
 8006644:	d002      	beq.n	800664c <USBH_CDC_InterfaceInit+0x24>
 8006646:	7bfb      	ldrb	r3, [r7, #15]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d901      	bls.n	8006650 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800664c:	2302      	movs	r3, #2
 800664e:	e13d      	b.n	80068cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	4619      	mov	r1, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fc89 	bl	8006f6c <USBH_SelectInterface>
 800665a:	4603      	mov	r3, r0
 800665c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800665e:	7bbb      	ldrb	r3, [r7, #14]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006664:	2302      	movs	r3, #2
 8006666:	e131      	b.n	80068cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800666e:	2050      	movs	r0, #80	; 0x50
 8006670:	f005 fe54 	bl	800c31c <malloc>
 8006674:	4603      	mov	r3, r0
 8006676:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006688:	2302      	movs	r3, #2
 800668a:	e11f      	b.n	80068cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800668c:	2250      	movs	r2, #80	; 0x50
 800668e:	2100      	movs	r1, #0
 8006690:	68b8      	ldr	r0, [r7, #8]
 8006692:	f005 fe5e 	bl	800c352 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	211a      	movs	r1, #26
 800669c:	fb01 f303 	mul.w	r3, r1, r3
 80066a0:	4413      	add	r3, r2
 80066a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	b25b      	sxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	da15      	bge.n	80066da <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	211a      	movs	r1, #26
 80066b4:	fb01 f303 	mul.w	r3, r1, r3
 80066b8:	4413      	add	r3, r2
 80066ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066be:	781a      	ldrb	r2, [r3, #0]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	211a      	movs	r1, #26
 80066ca:	fb01 f303 	mul.w	r3, r1, r3
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80066d4:	881a      	ldrh	r2, [r3, #0]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	785b      	ldrb	r3, [r3, #1]
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f002 f890 	bl	8008806 <USBH_AllocPipe>
 80066e6:	4603      	mov	r3, r0
 80066e8:	461a      	mov	r2, r3
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	7819      	ldrb	r1, [r3, #0]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	7858      	ldrb	r0, [r3, #1]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	8952      	ldrh	r2, [r2, #10]
 8006706:	9202      	str	r2, [sp, #8]
 8006708:	2203      	movs	r2, #3
 800670a:	9201      	str	r2, [sp, #4]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	4623      	mov	r3, r4
 8006710:	4602      	mov	r2, r0
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f002 f848 	bl	80087a8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	2200      	movs	r2, #0
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f005 fd4b 	bl	800c1bc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006726:	2300      	movs	r3, #0
 8006728:	2200      	movs	r2, #0
 800672a:	210a      	movs	r1, #10
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fc39 	bl	8006fa4 <USBH_FindInterface>
 8006732:	4603      	mov	r3, r0
 8006734:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	2bff      	cmp	r3, #255	; 0xff
 800673a:	d002      	beq.n	8006742 <USBH_CDC_InterfaceInit+0x11a>
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d901      	bls.n	8006746 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006742:	2302      	movs	r3, #2
 8006744:	e0c2      	b.n	80068cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006746:	7bfb      	ldrb	r3, [r7, #15]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	211a      	movs	r1, #26
 800674c:	fb01 f303 	mul.w	r3, r1, r3
 8006750:	4413      	add	r3, r2
 8006752:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	b25b      	sxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	da16      	bge.n	800678c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800675e:	7bfb      	ldrb	r3, [r7, #15]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	211a      	movs	r1, #26
 8006764:	fb01 f303 	mul.w	r3, r1, r3
 8006768:	4413      	add	r3, r2
 800676a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800676e:	781a      	ldrb	r2, [r3, #0]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	211a      	movs	r1, #26
 800677a:	fb01 f303 	mul.w	r3, r1, r3
 800677e:	4413      	add	r3, r2
 8006780:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006784:	881a      	ldrh	r2, [r3, #0]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	835a      	strh	r2, [r3, #26]
 800678a:	e015      	b.n	80067b8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800678c:	7bfb      	ldrb	r3, [r7, #15]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	211a      	movs	r1, #26
 8006792:	fb01 f303 	mul.w	r3, r1, r3
 8006796:	4413      	add	r3, r2
 8006798:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800679c:	781a      	ldrb	r2, [r3, #0]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	211a      	movs	r1, #26
 80067a8:	fb01 f303 	mul.w	r3, r1, r3
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80067b2:	881a      	ldrh	r2, [r3, #0]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	211a      	movs	r1, #26
 80067be:	fb01 f303 	mul.w	r3, r1, r3
 80067c2:	4413      	add	r3, r2
 80067c4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	b25b      	sxtb	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	da16      	bge.n	80067fe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	211a      	movs	r1, #26
 80067d6:	fb01 f303 	mul.w	r3, r1, r3
 80067da:	4413      	add	r3, r2
 80067dc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067e0:	781a      	ldrb	r2, [r3, #0]
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	211a      	movs	r1, #26
 80067ec:	fb01 f303 	mul.w	r3, r1, r3
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80067f6:	881a      	ldrh	r2, [r3, #0]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	835a      	strh	r2, [r3, #26]
 80067fc:	e015      	b.n	800682a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	211a      	movs	r1, #26
 8006804:	fb01 f303 	mul.w	r3, r1, r3
 8006808:	4413      	add	r3, r2
 800680a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800680e:	781a      	ldrb	r2, [r3, #0]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	211a      	movs	r1, #26
 800681a:	fb01 f303 	mul.w	r3, r1, r3
 800681e:	4413      	add	r3, r2
 8006820:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006824:	881a      	ldrh	r2, [r3, #0]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	7b9b      	ldrb	r3, [r3, #14]
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 ffe8 	bl	8008806 <USBH_AllocPipe>
 8006836:	4603      	mov	r3, r0
 8006838:	461a      	mov	r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	7bdb      	ldrb	r3, [r3, #15]
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f001 ffde 	bl	8008806 <USBH_AllocPipe>
 800684a:	4603      	mov	r3, r0
 800684c:	461a      	mov	r2, r3
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	7b59      	ldrb	r1, [r3, #13]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	7b98      	ldrb	r0, [r3, #14]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	8b12      	ldrh	r2, [r2, #24]
 800686a:	9202      	str	r2, [sp, #8]
 800686c:	2202      	movs	r2, #2
 800686e:	9201      	str	r2, [sp, #4]
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	4623      	mov	r3, r4
 8006874:	4602      	mov	r2, r0
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f001 ff96 	bl	80087a8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	7b19      	ldrb	r1, [r3, #12]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	7bd8      	ldrb	r0, [r3, #15]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	8b52      	ldrh	r2, [r2, #26]
 8006894:	9202      	str	r2, [sp, #8]
 8006896:	2202      	movs	r2, #2
 8006898:	9201      	str	r2, [sp, #4]
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	4623      	mov	r3, r4
 800689e:	4602      	mov	r2, r0
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 ff81 	bl	80087a8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	7b5b      	ldrb	r3, [r3, #13]
 80068b2:	2200      	movs	r2, #0
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f005 fc80 	bl	800c1bc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	7b1b      	ldrb	r3, [r3, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f005 fc79 	bl	800c1bc <USBH_LL_SetToggle>

  return USBH_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd90      	pop	{r4, r7, pc}

080068d4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00e      	beq.n	800690c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 ff76 	bl	80087e6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	4619      	mov	r1, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f001 ffa1 	bl	8008848 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	7b1b      	ldrb	r3, [r3, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00e      	beq.n	8006932 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	7b1b      	ldrb	r3, [r3, #12]
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 ff63 	bl	80087e6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	7b1b      	ldrb	r3, [r3, #12]
 8006924:	4619      	mov	r1, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f001 ff8e 	bl	8008848 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	7b5b      	ldrb	r3, [r3, #13]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00e      	beq.n	8006958 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	7b5b      	ldrb	r3, [r3, #13]
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f001 ff50 	bl	80087e6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	7b5b      	ldrb	r3, [r3, #13]
 800694a:	4619      	mov	r1, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f001 ff7b 	bl	8008848 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800695e:	69db      	ldr	r3, [r3, #28]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00b      	beq.n	800697c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	4618      	mov	r0, r3
 800696e:	f005 fcdd 	bl	800c32c <free>
    phost->pActiveClass->pData = 0U;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006978:	2200      	movs	r2, #0
 800697a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3340      	adds	r3, #64	; 0x40
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f8b1 	bl	8006b06 <GetLineCoding>
 80069a4:	4603      	mov	r3, r0
 80069a6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80069a8:	7afb      	ldrb	r3, [r7, #11]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d105      	bne.n	80069ba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069b4:	2102      	movs	r1, #2
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80069ba:	7afb      	ldrb	r3, [r7, #11]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80069cc:	2301      	movs	r3, #1
 80069ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	d877      	bhi.n	8006ad8 <USBH_CDC_Process+0x114>
 80069e8:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <USBH_CDC_Process+0x2c>)
 80069ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ee:	bf00      	nop
 80069f0:	08006a05 	.word	0x08006a05
 80069f4:	08006a0b 	.word	0x08006a0b
 80069f8:	08006a3b 	.word	0x08006a3b
 80069fc:	08006aaf 	.word	0x08006aaf
 8006a00:	08006abd 	.word	0x08006abd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	73fb      	strb	r3, [r7, #15]
      break;
 8006a08:	e06d      	b.n	8006ae6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f897 	bl	8006b44 <SetLineCoding>
 8006a16:	4603      	mov	r3, r0
 8006a18:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a1a:	7bbb      	ldrb	r3, [r7, #14]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d104      	bne.n	8006a2a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a28:	e058      	b.n	8006adc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006a2a:	7bbb      	ldrb	r3, [r7, #14]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d055      	beq.n	8006adc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2204      	movs	r2, #4
 8006a34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a38:	e050      	b.n	8006adc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	3340      	adds	r3, #64	; 0x40
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f860 	bl	8006b06 <GetLineCoding>
 8006a46:	4603      	mov	r3, r0
 8006a48:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a4a:	7bbb      	ldrb	r3, [r7, #14]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d126      	bne.n	8006a9e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a62:	791b      	ldrb	r3, [r3, #4]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d13b      	bne.n	8006ae0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a72:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d133      	bne.n	8006ae0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a82:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d12b      	bne.n	8006ae0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a90:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d124      	bne.n	8006ae0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f984 	bl	8006da4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a9c:	e020      	b.n	8006ae0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d01d      	beq.n	8006ae0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2204      	movs	r2, #4
 8006aa8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006aac:	e018      	b.n	8006ae0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f867 	bl	8006b82 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f8f8 	bl	8006caa <CDC_ProcessReception>
      break;
 8006aba:	e014      	b.n	8006ae6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006abc:	2100      	movs	r1, #0
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f001 f94f 	bl	8007d62 <USBH_ClrFeature>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10a      	bne.n	8006ae4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006ad6:	e005      	b.n	8006ae4 <USBH_CDC_Process+0x120>

    default:
      break;
 8006ad8:	bf00      	nop
 8006ada:	e004      	b.n	8006ae6 <USBH_CDC_Process+0x122>
      break;
 8006adc:	bf00      	nop
 8006ade:	e002      	b.n	8006ae6 <USBH_CDC_Process+0x122>
      break;
 8006ae0:	bf00      	nop
 8006ae2:	e000      	b.n	8006ae6 <USBH_CDC_Process+0x122>
      break;
 8006ae4:	bf00      	nop

  }

  return status;
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	22a1      	movs	r2, #161	; 0xa1
 8006b14:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2221      	movs	r2, #33	; 0x21
 8006b1a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2207      	movs	r2, #7
 8006b2c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2207      	movs	r2, #7
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 faf4 	bl	8008122 <USBH_CtlReq>
 8006b3a:	4603      	mov	r3, r0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2221      	movs	r2, #33	; 0x21
 8006b52:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2220      	movs	r2, #32
 8006b58:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2207      	movs	r2, #7
 8006b6a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2207      	movs	r2, #7
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 fad5 	bl	8008122 <USBH_CtlReq>
 8006b78:	4603      	mov	r3, r0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b086      	sub	sp, #24
 8006b86:	af02      	add	r7, sp, #8
 8006b88:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b94:	2300      	movs	r3, #0
 8006b96:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d002      	beq.n	8006ba8 <CDC_ProcessTransmission+0x26>
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d025      	beq.n	8006bf2 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8006ba6:	e07c      	b.n	8006ca2 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	8b12      	ldrh	r2, [r2, #24]
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d90c      	bls.n	8006bce <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	69d9      	ldr	r1, [r3, #28]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8b1a      	ldrh	r2, [r3, #24]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	7b58      	ldrb	r0, [r3, #13]
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f001 fdab 	bl	8008722 <USBH_BulkSendData>
 8006bcc:	e00c      	b.n	8006be8 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	7b58      	ldrb	r0, [r3, #13]
 8006bdc:	2301      	movs	r3, #1
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	4603      	mov	r3, r0
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f001 fd9d 	bl	8008722 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2202      	movs	r2, #2
 8006bec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006bf0:	e057      	b.n	8006ca2 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	7b5b      	ldrb	r3, [r3, #13]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f005 fab5 	bl	800c168 <USBH_LL_GetURBState>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006c02:	7afb      	ldrb	r3, [r7, #11]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d136      	bne.n	8006c76 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	8b12      	ldrh	r2, [r2, #24]
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d90e      	bls.n	8006c32 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	8b12      	ldrh	r2, [r2, #24]
 8006c1c:	1a9a      	subs	r2, r3, r2
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	8b12      	ldrh	r2, [r2, #24]
 8006c2a:	441a      	add	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	61da      	str	r2, [r3, #28]
 8006c30:	e002      	b.n	8006c38 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d004      	beq.n	8006c4a <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006c48:	e006      	b.n	8006c58 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f892 	bl	8006d7c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2204      	movs	r2, #4
 8006c5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f002 f860 	bl	8008d34 <osMessageQueuePut>
      break;
 8006c74:	e014      	b.n	8006ca0 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8006c76:	7afb      	ldrb	r3, [r7, #11]
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d111      	bne.n	8006ca0 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2204      	movs	r2, #4
 8006c88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006c98:	2300      	movs	r3, #0
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f002 f84a 	bl	8008d34 <osMessageQueuePut>
      break;
 8006ca0:	bf00      	nop
  }
}
 8006ca2:	bf00      	nop
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b086      	sub	sp, #24
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	d002      	beq.n	8006cd0 <CDC_ProcessReception+0x26>
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	d00e      	beq.n	8006cec <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006cce:	e051      	b.n	8006d74 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	6a19      	ldr	r1, [r3, #32]
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	8b5a      	ldrh	r2, [r3, #26]
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	7b1b      	ldrb	r3, [r3, #12]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f001 fd45 	bl	800876c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2204      	movs	r2, #4
 8006ce6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006cea:	e043      	b.n	8006d74 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	7b1b      	ldrb	r3, [r3, #12]
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f005 fa38 	bl	800c168 <USBH_LL_GetURBState>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006cfc:	7cfb      	ldrb	r3, [r7, #19]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d137      	bne.n	8006d72 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	7b1b      	ldrb	r3, [r3, #12]
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f005 f99b 	bl	800c044 <USBH_LL_GetLastXferSize>
 8006d0e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d016      	beq.n	8006d48 <CDC_ProcessReception+0x9e>
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	8b5b      	ldrh	r3, [r3, #26]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d910      	bls.n	8006d48 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	1ad2      	subs	r2, r2, r3
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	6a1a      	ldr	r2, [r3, #32]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	441a      	add	r2, r3
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2203      	movs	r2, #3
 8006d42:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8006d46:	e006      	b.n	8006d56 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f81d 	bl	8006d90 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2204      	movs	r2, #4
 8006d5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f001 ffe1 	bl	8008d34 <osMessageQueuePut>
      break;
 8006d72:	bf00      	nop
  }
}
 8006d74:	bf00      	nop
 8006d76:	3718      	adds	r7, #24
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006dcc:	2302      	movs	r3, #2
 8006dce:	e044      	b.n	8006e5a <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	79fa      	ldrb	r2, [r7, #7]
 8006dd4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 f841 	bl	8006e70 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2104      	movs	r1, #4
 8006e20:	2010      	movs	r0, #16
 8006e22:	f001 ff01 	bl	8008c28 <osMessageQueueNew>
 8006e26:	4602      	mov	r2, r0
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <USBH_Init+0xac>)
 8006e30:	4a0d      	ldr	r2, [pc, #52]	; (8006e68 <USBH_Init+0xb0>)
 8006e32:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8006e34:	4b0b      	ldr	r3, [pc, #44]	; (8006e64 <USBH_Init+0xac>)
 8006e36:	2280      	movs	r2, #128	; 0x80
 8006e38:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8006e3a:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <USBH_Init+0xac>)
 8006e3c:	2218      	movs	r2, #24
 8006e3e:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8006e40:	4a08      	ldr	r2, [pc, #32]	; (8006e64 <USBH_Init+0xac>)
 8006e42:	68f9      	ldr	r1, [r7, #12]
 8006e44:	4809      	ldr	r0, [pc, #36]	; (8006e6c <USBH_Init+0xb4>)
 8006e46:	f001 fddb 	bl	8008a00 <osThreadNew>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f005 f844 	bl	800bee0 <USBH_LL_Init>

  return USBH_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20004c48 	.word	0x20004c48
 8006e68:	0800c558 	.word	0x0800c558
 8006e6c:	08007ad9 	.word	0x08007ad9

08006e70 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	e009      	b.n	8006e96 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	33e0      	adds	r3, #224	; 0xe0
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3301      	adds	r3, #1
 8006e94:	60fb      	str	r3, [r7, #12]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b0e      	cmp	r3, #14
 8006e9a:	d9f2      	bls.n	8006e82 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	e009      	b.n	8006eb6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006eac:	2200      	movs	r2, #0
 8006eae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	60fb      	str	r3, [r7, #12]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ebc:	d3f1      	bcc.n	8006ea2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2240      	movs	r2, #64	; 0x40
 8006ee2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d016      	beq.n	8006f5a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10e      	bne.n	8006f54 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f3c:	1c59      	adds	r1, r3, #1
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	33de      	adds	r3, #222	; 0xde
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	73fb      	strb	r3, [r7, #15]
 8006f52:	e004      	b.n	8006f5e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006f54:	2302      	movs	r3, #2
 8006f56:	73fb      	strb	r3, [r7, #15]
 8006f58:	e001      	b.n	8006f5e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006f82:	78fa      	ldrb	r2, [r7, #3]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d204      	bcs.n	8006f92 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	78fa      	ldrb	r2, [r7, #3]
 8006f8c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006f90:	e001      	b.n	8006f96 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006f92:	2302      	movs	r3, #2
 8006f94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	4608      	mov	r0, r1
 8006fae:	4611      	mov	r1, r2
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	70fb      	strb	r3, [r7, #3]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	70bb      	strb	r3, [r7, #2]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006fcc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006fce:	e025      	b.n	800701c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006fd0:	7dfb      	ldrb	r3, [r7, #23]
 8006fd2:	221a      	movs	r2, #26
 8006fd4:	fb02 f303 	mul.w	r3, r2, r3
 8006fd8:	3308      	adds	r3, #8
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	4413      	add	r3, r2
 8006fde:	3302      	adds	r3, #2
 8006fe0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	795b      	ldrb	r3, [r3, #5]
 8006fe6:	78fa      	ldrb	r2, [r7, #3]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d002      	beq.n	8006ff2 <USBH_FindInterface+0x4e>
 8006fec:	78fb      	ldrb	r3, [r7, #3]
 8006fee:	2bff      	cmp	r3, #255	; 0xff
 8006ff0:	d111      	bne.n	8007016 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ff6:	78ba      	ldrb	r2, [r7, #2]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d002      	beq.n	8007002 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ffc:	78bb      	ldrb	r3, [r7, #2]
 8006ffe:	2bff      	cmp	r3, #255	; 0xff
 8007000:	d109      	bne.n	8007016 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007006:	787a      	ldrb	r2, [r7, #1]
 8007008:	429a      	cmp	r2, r3
 800700a:	d002      	beq.n	8007012 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800700c:	787b      	ldrb	r3, [r7, #1]
 800700e:	2bff      	cmp	r3, #255	; 0xff
 8007010:	d101      	bne.n	8007016 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007012:	7dfb      	ldrb	r3, [r7, #23]
 8007014:	e006      	b.n	8007024 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007016:	7dfb      	ldrb	r3, [r7, #23]
 8007018:	3301      	adds	r3, #1
 800701a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800701c:	7dfb      	ldrb	r3, [r7, #23]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d9d6      	bls.n	8006fd0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007022:	23ff      	movs	r3, #255	; 0xff
}
 8007024:	4618      	mov	r0, r3
 8007026:	371c      	adds	r7, #28
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f004 ff8d 	bl	800bf58 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800703e:	2101      	movs	r1, #1
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f005 f8a4 	bl	800c18e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b088      	sub	sp, #32
 8007054:	af04      	add	r7, sp, #16
 8007056:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007058:	2302      	movs	r3, #2
 800705a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b01      	cmp	r3, #1
 800706a:	d102      	bne.n	8007072 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2203      	movs	r2, #3
 8007070:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b0b      	cmp	r3, #11
 800707a:	f200 823c 	bhi.w	80074f6 <USBH_Process+0x4a6>
 800707e:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <USBH_Process+0x34>)
 8007080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007084:	080070b5 	.word	0x080070b5
 8007088:	08007103 	.word	0x08007103
 800708c:	08007187 	.word	0x08007187
 8007090:	08007475 	.word	0x08007475
 8007094:	080074f7 	.word	0x080074f7
 8007098:	08007247 	.word	0x08007247
 800709c:	080073ff 	.word	0x080073ff
 80070a0:	08007299 	.word	0x08007299
 80070a4:	080072d5 	.word	0x080072d5
 80070a8:	0800730f 	.word	0x0800730f
 80070ac:	08007357 	.word	0x08007357
 80070b0:	0800745d 	.word	0x0800745d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 821c 	beq.w	80074fa <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80070c8:	20c8      	movs	r0, #200	; 0xc8
 80070ca:	f005 f8aa 	bl	800c222 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f004 ff9d 	bl	800c00e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80070f8:	2300      	movs	r3, #0
 80070fa:	2200      	movs	r2, #0
 80070fc:	f001 fe1a 	bl	8008d34 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007100:	e1fb      	b.n	80074fa <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007108:	2b01      	cmp	r3, #1
 800710a:	d107      	bne.n	800711c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2202      	movs	r2, #2
 8007118:	701a      	strb	r2, [r3, #0]
 800711a:	e025      	b.n	8007168 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007126:	d914      	bls.n	8007152 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800712e:	3301      	adds	r3, #1
 8007130:	b2da      	uxtb	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800713e:	2b03      	cmp	r3, #3
 8007140:	d903      	bls.n	800714a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	220d      	movs	r2, #13
 8007146:	701a      	strb	r2, [r3, #0]
 8007148:	e00e      	b.n	8007168 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	701a      	strb	r2, [r3, #0]
 8007150:	e00a      	b.n	8007168 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007158:	f103 020a 	add.w	r2, r3, #10
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007162:	200a      	movs	r0, #10
 8007164:	f005 f85d 	bl	800c222 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800717c:	2300      	movs	r3, #0
 800717e:	2200      	movs	r2, #0
 8007180:	f001 fdd8 	bl	8008d34 <osMessageQueuePut>
#endif
#endif
      break;
 8007184:	e1c0      	b.n	8007508 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800718c:	2b00      	cmp	r3, #0
 800718e:	d005      	beq.n	800719c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007196:	2104      	movs	r1, #4
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800719c:	2064      	movs	r0, #100	; 0x64
 800719e:	f005 f840 	bl	800c222 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f004 ff0e 	bl	800bfc4 <USBH_LL_GetSpeed>
 80071a8:	4603      	mov	r3, r0
 80071aa:	461a      	mov	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2205      	movs	r2, #5
 80071b6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80071b8:	2100      	movs	r1, #0
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f001 fb23 	bl	8008806 <USBH_AllocPipe>
 80071c0:	4603      	mov	r3, r0
 80071c2:	461a      	mov	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80071c8:	2180      	movs	r1, #128	; 0x80
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f001 fb1b 	bl	8008806 <USBH_AllocPipe>
 80071d0:	4603      	mov	r3, r0
 80071d2:	461a      	mov	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	7919      	ldrb	r1, [r3, #4]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80071ec:	b292      	uxth	r2, r2
 80071ee:	9202      	str	r2, [sp, #8]
 80071f0:	2200      	movs	r2, #0
 80071f2:	9201      	str	r2, [sp, #4]
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	4603      	mov	r3, r0
 80071f8:	2280      	movs	r2, #128	; 0x80
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f001 fad4 	bl	80087a8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	7959      	ldrb	r1, [r3, #5]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007214:	b292      	uxth	r2, r2
 8007216:	9202      	str	r2, [sp, #8]
 8007218:	2200      	movs	r2, #0
 800721a:	9201      	str	r2, [sp, #4]
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	4603      	mov	r3, r0
 8007220:	2200      	movs	r2, #0
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f001 fac0 	bl	80087a8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800723c:	2300      	movs	r3, #0
 800723e:	2200      	movs	r2, #0
 8007240:	f001 fd78 	bl	8008d34 <osMessageQueuePut>
#endif
#endif
      break;
 8007244:	e160      	b.n	8007508 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f964 	bl	8007514 <USBH_HandleEnum>
 800724c:	4603      	mov	r3, r0
 800724e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007250:	7bbb      	ldrb	r3, [r7, #14]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	f040 8152 	bne.w	80074fe <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007268:	2b01      	cmp	r3, #1
 800726a:	d103      	bne.n	8007274 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2208      	movs	r2, #8
 8007270:	701a      	strb	r2, [r3, #0]
 8007272:	e002      	b.n	800727a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2207      	movs	r2, #7
 8007278:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2205      	movs	r2, #5
 800727e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800728e:	2300      	movs	r3, #0
 8007290:	2200      	movs	r2, #0
 8007292:	f001 fd4f 	bl	8008d34 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007296:	e132      	b.n	80074fe <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 812f 	beq.w	8007502 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072aa:	2101      	movs	r1, #1
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2208      	movs	r2, #8
 80072b4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2205      	movs	r2, #5
 80072ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80072ca:	2300      	movs	r3, #0
 80072cc:	2200      	movs	r2, #0
 80072ce:	f001 fd31 	bl	8008d34 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 80072d2:	e116      	b.n	8007502 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80072da:	b29b      	uxth	r3, r3
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fcf8 	bl	8007cd4 <USBH_SetCfg>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d102      	bne.n	80072f0 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2209      	movs	r2, #9
 80072ee:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007304:	2300      	movs	r3, #0
 8007306:	2200      	movs	r2, #0
 8007308:	f001 fd14 	bl	8008d34 <osMessageQueuePut>
#endif
#endif
      break;
 800730c:	e0fc      	b.n	8007508 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007314:	f003 0320 	and.w	r3, r3, #32
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00a      	beq.n	8007332 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800731c:	2101      	movs	r1, #1
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fcfb 	bl	8007d1a <USBH_SetFeature>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d106      	bne.n	8007338 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	220a      	movs	r2, #10
 800732e:	701a      	strb	r2, [r3, #0]
 8007330:	e002      	b.n	8007338 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	220a      	movs	r2, #10
 8007336:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800734c:	2300      	movs	r3, #0
 800734e:	2200      	movs	r2, #0
 8007350:	f001 fcf0 	bl	8008d34 <osMessageQueuePut>
#endif
#endif
      break;
 8007354:	e0d8      	b.n	8007508 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800735c:	2b00      	cmp	r3, #0
 800735e:	d03f      	beq.n	80073e0 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007368:	2300      	movs	r3, #0
 800736a:	73fb      	strb	r3, [r7, #15]
 800736c:	e016      	b.n	800739c <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800736e:	7bfa      	ldrb	r2, [r7, #15]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	32de      	adds	r2, #222	; 0xde
 8007374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007378:	791a      	ldrb	r2, [r3, #4]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007380:	429a      	cmp	r2, r3
 8007382:	d108      	bne.n	8007396 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007384:	7bfa      	ldrb	r2, [r7, #15]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	32de      	adds	r2, #222	; 0xde
 800738a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007394:	e005      	b.n	80073a2 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	3301      	adds	r3, #1
 800739a:	73fb      	strb	r3, [r7, #15]
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d0e5      	beq.n	800736e <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d016      	beq.n	80073da <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	4798      	blx	r3
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d109      	bne.n	80073d2 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2206      	movs	r2, #6
 80073c2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073ca:	2103      	movs	r1, #3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	4798      	blx	r3
 80073d0:	e006      	b.n	80073e0 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	220d      	movs	r2, #13
 80073d6:	701a      	strb	r2, [r3, #0]
 80073d8:	e002      	b.n	80073e0 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	220d      	movs	r2, #13
 80073de:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2205      	movs	r2, #5
 80073e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80073f4:	2300      	movs	r3, #0
 80073f6:	2200      	movs	r2, #0
 80073f8:	f001 fc9c 	bl	8008d34 <osMessageQueuePut>
#endif
#endif
      break;
 80073fc:	e084      	b.n	8007508 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007404:	2b00      	cmp	r3, #0
 8007406:	d017      	beq.n	8007438 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	4798      	blx	r3
 8007414:	4603      	mov	r3, r0
 8007416:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d103      	bne.n	8007428 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	220b      	movs	r2, #11
 8007424:	701a      	strb	r2, [r3, #0]
 8007426:	e00a      	b.n	800743e <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8007428:	7bbb      	ldrb	r3, [r7, #14]
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b02      	cmp	r3, #2
 800742e:	d106      	bne.n	800743e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	220d      	movs	r2, #13
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	e002      	b.n	800743e <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	220d      	movs	r2, #13
 800743c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2205      	movs	r2, #5
 8007442:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007452:	2300      	movs	r3, #0
 8007454:	2200      	movs	r2, #0
 8007456:	f001 fc6d 	bl	8008d34 <osMessageQueuePut>
#endif
#endif
      break;
 800745a:	e055      	b.n	8007508 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007462:	2b00      	cmp	r3, #0
 8007464:	d04f      	beq.n	8007506 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	4798      	blx	r3
      }
      break;
 8007472:	e048      	b.n	8007506 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7ff fcf7 	bl	8006e70 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007488:	2b00      	cmp	r3, #0
 800748a:	d009      	beq.n	80074a0 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d005      	beq.n	80074b6 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074b0:	2105      	movs	r1, #5
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d107      	bne.n	80074d2 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7ff fdb0 	bl	8007030 <USBH_Start>
 80074d0:	e002      	b.n	80074d8 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f004 fd40 	bl	800bf58 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80074ec:	2300      	movs	r3, #0
 80074ee:	2200      	movs	r2, #0
 80074f0:	f001 fc20 	bl	8008d34 <osMessageQueuePut>
#endif
#endif
      break;
 80074f4:	e008      	b.n	8007508 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 80074f6:	bf00      	nop
 80074f8:	e006      	b.n	8007508 <USBH_Process+0x4b8>
      break;
 80074fa:	bf00      	nop
 80074fc:	e004      	b.n	8007508 <USBH_Process+0x4b8>
      break;
 80074fe:	bf00      	nop
 8007500:	e002      	b.n	8007508 <USBH_Process+0x4b8>
    break;
 8007502:	bf00      	nop
 8007504:	e000      	b.n	8007508 <USBH_Process+0x4b8>
      break;
 8007506:	bf00      	nop
  }
  return USBH_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop

08007514 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b088      	sub	sp, #32
 8007518:	af04      	add	r7, sp, #16
 800751a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800751c:	2301      	movs	r3, #1
 800751e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007520:	2301      	movs	r3, #1
 8007522:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	785b      	ldrb	r3, [r3, #1]
 8007528:	2b07      	cmp	r3, #7
 800752a:	f200 8208 	bhi.w	800793e <USBH_HandleEnum+0x42a>
 800752e:	a201      	add	r2, pc, #4	; (adr r2, 8007534 <USBH_HandleEnum+0x20>)
 8007530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007534:	08007555 	.word	0x08007555
 8007538:	08007613 	.word	0x08007613
 800753c:	0800767d 	.word	0x0800767d
 8007540:	0800770b 	.word	0x0800770b
 8007544:	08007775 	.word	0x08007775
 8007548:	080077e5 	.word	0x080077e5
 800754c:	08007881 	.word	0x08007881
 8007550:	080078ff 	.word	0x080078ff
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007554:	2108      	movs	r1, #8
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 faec 	bl	8007b34 <USBH_Get_DevDesc>
 800755c:	4603      	mov	r3, r0
 800755e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d130      	bne.n	80075c8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	7919      	ldrb	r1, [r3, #4]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800758a:	b292      	uxth	r2, r2
 800758c:	9202      	str	r2, [sp, #8]
 800758e:	2200      	movs	r2, #0
 8007590:	9201      	str	r2, [sp, #4]
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	4603      	mov	r3, r0
 8007596:	2280      	movs	r2, #128	; 0x80
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f001 f905 	bl	80087a8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	7959      	ldrb	r1, [r3, #5]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075b2:	b292      	uxth	r2, r2
 80075b4:	9202      	str	r2, [sp, #8]
 80075b6:	2200      	movs	r2, #0
 80075b8:	9201      	str	r2, [sp, #4]
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	4603      	mov	r3, r0
 80075be:	2200      	movs	r2, #0
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f001 f8f1 	bl	80087a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80075c6:	e1bc      	b.n	8007942 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075c8:	7bbb      	ldrb	r3, [r7, #14]
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	f040 81b9 	bne.w	8007942 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075d6:	3301      	adds	r3, #1
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d903      	bls.n	80075f2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	220d      	movs	r2, #13
 80075ee:	701a      	strb	r2, [r3, #0]
      break;
 80075f0:	e1a7      	b.n	8007942 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	795b      	ldrb	r3, [r3, #5]
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f001 f925 	bl	8008848 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	791b      	ldrb	r3, [r3, #4]
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f001 f91f 	bl	8008848 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	701a      	strb	r2, [r3, #0]
      break;
 8007610:	e197      	b.n	8007942 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007612:	2112      	movs	r1, #18
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fa8d 	bl	8007b34 <USBH_Get_DevDesc>
 800761a:	4603      	mov	r3, r0
 800761c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800761e:	7bbb      	ldrb	r3, [r7, #14]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d103      	bne.n	800762c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2202      	movs	r2, #2
 8007628:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800762a:	e18c      	b.n	8007946 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800762c:	7bbb      	ldrb	r3, [r7, #14]
 800762e:	2b03      	cmp	r3, #3
 8007630:	f040 8189 	bne.w	8007946 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800763a:	3301      	adds	r3, #1
 800763c:	b2da      	uxtb	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800764a:	2b03      	cmp	r3, #3
 800764c:	d903      	bls.n	8007656 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	220d      	movs	r2, #13
 8007652:	701a      	strb	r2, [r3, #0]
      break;
 8007654:	e177      	b.n	8007946 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	795b      	ldrb	r3, [r3, #5]
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 f8f3 	bl	8008848 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	791b      	ldrb	r3, [r3, #4]
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f001 f8ed 	bl	8008848 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	701a      	strb	r2, [r3, #0]
      break;
 800767a:	e164      	b.n	8007946 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800767c:	2101      	movs	r1, #1
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fb04 	bl	8007c8c <USBH_SetAddress>
 8007684:	4603      	mov	r3, r0
 8007686:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d132      	bne.n	80076f4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800768e:	2002      	movs	r0, #2
 8007690:	f004 fdc7 	bl	800c222 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2203      	movs	r2, #3
 80076a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	7919      	ldrb	r1, [r3, #4]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80076b6:	b292      	uxth	r2, r2
 80076b8:	9202      	str	r2, [sp, #8]
 80076ba:	2200      	movs	r2, #0
 80076bc:	9201      	str	r2, [sp, #4]
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	4603      	mov	r3, r0
 80076c2:	2280      	movs	r2, #128	; 0x80
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f001 f86f 	bl	80087a8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	7959      	ldrb	r1, [r3, #5]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076de:	b292      	uxth	r2, r2
 80076e0:	9202      	str	r2, [sp, #8]
 80076e2:	2200      	movs	r2, #0
 80076e4:	9201      	str	r2, [sp, #4]
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	4603      	mov	r3, r0
 80076ea:	2200      	movs	r2, #0
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f001 f85b 	bl	80087a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80076f2:	e12a      	b.n	800794a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	f040 8127 	bne.w	800794a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	220d      	movs	r2, #13
 8007700:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	705a      	strb	r2, [r3, #1]
      break;
 8007708:	e11f      	b.n	800794a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800770a:	2109      	movs	r1, #9
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fa39 	bl	8007b84 <USBH_Get_CfgDesc>
 8007712:	4603      	mov	r3, r0
 8007714:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d103      	bne.n	8007724 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2204      	movs	r2, #4
 8007720:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007722:	e114      	b.n	800794e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	2b03      	cmp	r3, #3
 8007728:	f040 8111 	bne.w	800794e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007732:	3301      	adds	r3, #1
 8007734:	b2da      	uxtb	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007742:	2b03      	cmp	r3, #3
 8007744:	d903      	bls.n	800774e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	220d      	movs	r2, #13
 800774a:	701a      	strb	r2, [r3, #0]
      break;
 800774c:	e0ff      	b.n	800794e <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	795b      	ldrb	r3, [r3, #5]
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f001 f877 	bl	8008848 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	791b      	ldrb	r3, [r3, #4]
 800775e:	4619      	mov	r1, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f001 f871 	bl	8008848 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	701a      	strb	r2, [r3, #0]
      break;
 8007772:	e0ec      	b.n	800794e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800777a:	4619      	mov	r1, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fa01 	bl	8007b84 <USBH_Get_CfgDesc>
 8007782:	4603      	mov	r3, r0
 8007784:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d103      	bne.n	8007794 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2205      	movs	r2, #5
 8007790:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007792:	e0de      	b.n	8007952 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007794:	7bbb      	ldrb	r3, [r7, #14]
 8007796:	2b03      	cmp	r3, #3
 8007798:	f040 80db 	bne.w	8007952 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077a2:	3301      	adds	r3, #1
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d903      	bls.n	80077be <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	220d      	movs	r2, #13
 80077ba:	701a      	strb	r2, [r3, #0]
      break;
 80077bc:	e0c9      	b.n	8007952 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	795b      	ldrb	r3, [r3, #5]
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f001 f83f 	bl	8008848 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	791b      	ldrb	r3, [r3, #4]
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f001 f839 	bl	8008848 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	701a      	strb	r2, [r3, #0]
      break;
 80077e2:	e0b6      	b.n	8007952 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d036      	beq.n	800785c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80077fa:	23ff      	movs	r3, #255	; 0xff
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f9e5 	bl	8007bcc <USBH_Get_StringDesc>
 8007802:	4603      	mov	r3, r0
 8007804:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d111      	bne.n	8007830 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2206      	movs	r2, #6
 8007810:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2205      	movs	r2, #5
 8007816:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007826:	2300      	movs	r3, #0
 8007828:	2200      	movs	r2, #0
 800782a:	f001 fa83 	bl	8008d34 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800782e:	e092      	b.n	8007956 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007830:	7bbb      	ldrb	r3, [r7, #14]
 8007832:	2b03      	cmp	r3, #3
 8007834:	f040 808f 	bne.w	8007956 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2206      	movs	r2, #6
 800783c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2205      	movs	r2, #5
 8007842:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007852:	2300      	movs	r3, #0
 8007854:	2200      	movs	r2, #0
 8007856:	f001 fa6d 	bl	8008d34 <osMessageQueuePut>
      break;
 800785a:	e07c      	b.n	8007956 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2206      	movs	r2, #6
 8007860:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2205      	movs	r2, #5
 8007866:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007876:	2300      	movs	r3, #0
 8007878:	2200      	movs	r2, #0
 800787a:	f001 fa5b 	bl	8008d34 <osMessageQueuePut>
      break;
 800787e:	e06a      	b.n	8007956 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007886:	2b00      	cmp	r3, #0
 8007888:	d027      	beq.n	80078da <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007896:	23ff      	movs	r3, #255	; 0xff
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f997 	bl	8007bcc <USBH_Get_StringDesc>
 800789e:	4603      	mov	r3, r0
 80078a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078a2:	7bbb      	ldrb	r3, [r7, #14]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d103      	bne.n	80078b0 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2207      	movs	r2, #7
 80078ac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80078ae:	e054      	b.n	800795a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	2b03      	cmp	r3, #3
 80078b4:	d151      	bne.n	800795a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2207      	movs	r2, #7
 80078ba:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2205      	movs	r2, #5
 80078c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80078d0:	2300      	movs	r3, #0
 80078d2:	2200      	movs	r2, #0
 80078d4:	f001 fa2e 	bl	8008d34 <osMessageQueuePut>
      break;
 80078d8:	e03f      	b.n	800795a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2207      	movs	r2, #7
 80078de:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2205      	movs	r2, #5
 80078e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80078f4:	2300      	movs	r3, #0
 80078f6:	2200      	movs	r2, #0
 80078f8:	f001 fa1c 	bl	8008d34 <osMessageQueuePut>
      break;
 80078fc:	e02d      	b.n	800795a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007904:	2b00      	cmp	r3, #0
 8007906:	d017      	beq.n	8007938 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007914:	23ff      	movs	r3, #255	; 0xff
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f958 	bl	8007bcc <USBH_Get_StringDesc>
 800791c:	4603      	mov	r3, r0
 800791e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007920:	7bbb      	ldrb	r3, [r7, #14]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d102      	bne.n	800792c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800792a:	e018      	b.n	800795e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800792c:	7bbb      	ldrb	r3, [r7, #14]
 800792e:	2b03      	cmp	r3, #3
 8007930:	d115      	bne.n	800795e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	73fb      	strb	r3, [r7, #15]
      break;
 8007936:	e012      	b.n	800795e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	73fb      	strb	r3, [r7, #15]
      break;
 800793c:	e00f      	b.n	800795e <USBH_HandleEnum+0x44a>

    default:
      break;
 800793e:	bf00      	nop
 8007940:	e00e      	b.n	8007960 <USBH_HandleEnum+0x44c>
      break;
 8007942:	bf00      	nop
 8007944:	e00c      	b.n	8007960 <USBH_HandleEnum+0x44c>
      break;
 8007946:	bf00      	nop
 8007948:	e00a      	b.n	8007960 <USBH_HandleEnum+0x44c>
      break;
 800794a:	bf00      	nop
 800794c:	e008      	b.n	8007960 <USBH_HandleEnum+0x44c>
      break;
 800794e:	bf00      	nop
 8007950:	e006      	b.n	8007960 <USBH_HandleEnum+0x44c>
      break;
 8007952:	bf00      	nop
 8007954:	e004      	b.n	8007960 <USBH_HandleEnum+0x44c>
      break;
 8007956:	bf00      	nop
 8007958:	e002      	b.n	8007960 <USBH_HandleEnum+0x44c>
      break;
 800795a:	bf00      	nop
 800795c:	e000      	b.n	8007960 <USBH_HandleEnum+0x44c>
      break;
 800795e:	bf00      	nop
  }
  return Status;
 8007960:	7bfb      	ldrb	r3, [r7, #15]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop

0800796c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	683a      	ldr	r2, [r7, #0]
 800797a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800797e:	bf00      	nop
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b082      	sub	sp, #8
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007998:	1c5a      	adds	r2, r3, #1
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f804 	bl	80079ae <USBH_HandleSof>
}
 80079a6:	bf00      	nop
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b0b      	cmp	r3, #11
 80079be:	d10a      	bne.n	80079d6 <USBH_HandleSof+0x28>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d005      	beq.n	80079d6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	4798      	blx	r3
  }
}
 80079d6:	bf00      	nop
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b082      	sub	sp, #8
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007a02:	2300      	movs	r3, #0
 8007a04:	2200      	movs	r2, #0
 8007a06:	f001 f995 	bl	8008d34 <osMessageQueuePut>
#endif
#endif

  return;
 8007a0a:	bf00      	nop
}
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b083      	sub	sp, #12
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007a22:	bf00      	nop
}
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b082      	sub	sp, #8
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007a62:	2300      	movs	r3, #0
 8007a64:	2200      	movs	r2, #0
 8007a66:	f001 f965 	bl	8008d34 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f004 fa7a 	bl	800bf8e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	791b      	ldrb	r3, [r3, #4]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fed1 	bl	8008848 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	795b      	ldrb	r3, [r3, #5]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fecb 	bl	8008848 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f001 f933 	bl	8008d34 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007aec:	f04f 33ff 	mov.w	r3, #4294967295
 8007af0:	2200      	movs	r2, #0
 8007af2:	f001 f993 	bl	8008e1c <osMessageQueueGet>
 8007af6:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1f0      	bne.n	8007ae0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff faa6 	bl	8007050 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007b04:	e7ec      	b.n	8007ae0 <USBH_Process_OS+0x8>

08007b06 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007b22:	2300      	movs	r3, #0
 8007b24:	2200      	movs	r2, #0
 8007b26:	f001 f905 	bl	8008d34 <osMessageQueuePut>
#endif

  return USBH_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af02      	add	r7, sp, #8
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007b46:	78fb      	ldrb	r3, [r7, #3]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b52:	2100      	movs	r1, #0
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f864 	bl	8007c22 <USBH_GetDescriptor>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	73fb      	strb	r3, [r7, #15]
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10a      	bne.n	8007b7a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b70:	78fa      	ldrb	r2, [r7, #3]
 8007b72:	b292      	uxth	r2, r2
 8007b74:	4619      	mov	r1, r3
 8007b76:	f000 f918 	bl	8007daa <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af02      	add	r7, sp, #8
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	331c      	adds	r3, #28
 8007b94:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007b96:	887b      	ldrh	r3, [r7, #2]
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f83d 	bl	8007c22 <USBH_GetDescriptor>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	72fb      	strb	r3, [r7, #11]
 8007bac:	7afb      	ldrb	r3, [r7, #11]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d107      	bne.n	8007bc2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007bb8:	887a      	ldrh	r2, [r7, #2]
 8007bba:	68f9      	ldr	r1, [r7, #12]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 f964 	bl	8007e8a <USBH_ParseCfgDesc>
  }

  return status;
 8007bc2:	7afb      	ldrb	r3, [r7, #11]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b088      	sub	sp, #32
 8007bd0:	af02      	add	r7, sp, #8
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	607a      	str	r2, [r7, #4]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	460b      	mov	r3, r1
 8007bda:	72fb      	strb	r3, [r7, #11]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007be0:	7afb      	ldrb	r3, [r7, #11]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007be8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007bf0:	893b      	ldrh	r3, [r7, #8]
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 f812 	bl	8007c22 <USBH_GetDescriptor>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	75fb      	strb	r3, [r7, #23]
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d107      	bne.n	8007c18 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c0e:	893a      	ldrh	r2, [r7, #8]
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 fa37 	bl	8008086 <USBH_ParseStringDesc>
  }

  return status;
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	60f8      	str	r0, [r7, #12]
 8007c2a:	607b      	str	r3, [r7, #4]
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	72fb      	strb	r3, [r7, #11]
 8007c30:	4613      	mov	r3, r2
 8007c32:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	789b      	ldrb	r3, [r3, #2]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d11c      	bne.n	8007c76 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007c3c:	7afb      	ldrb	r3, [r7, #11]
 8007c3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2206      	movs	r2, #6
 8007c4c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	893a      	ldrh	r2, [r7, #8]
 8007c52:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007c54:	893b      	ldrh	r3, [r7, #8]
 8007c56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c5e:	d104      	bne.n	8007c6a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f240 4209 	movw	r2, #1033	; 0x409
 8007c66:	829a      	strh	r2, [r3, #20]
 8007c68:	e002      	b.n	8007c70 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	8b3a      	ldrh	r2, [r7, #24]
 8007c74:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007c76:	8b3b      	ldrh	r3, [r7, #24]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 fa50 	bl	8008122 <USBH_CtlReq>
 8007c82:	4603      	mov	r3, r0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	460b      	mov	r3, r1
 8007c96:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	789b      	ldrb	r3, [r3, #2]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d10f      	bne.n	8007cc0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2205      	movs	r2, #5
 8007caa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007cac:	78fb      	ldrb	r3, [r7, #3]
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fa2c 	bl	8008122 <USBH_CtlReq>
 8007cca:	4603      	mov	r3, r0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	789b      	ldrb	r3, [r3, #2]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d10e      	bne.n	8007d06 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2209      	movs	r2, #9
 8007cf2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	887a      	ldrh	r2, [r7, #2]
 8007cf8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007d06:	2200      	movs	r2, #0
 8007d08:	2100      	movs	r1, #0
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fa09 	bl	8008122 <USBH_CtlReq>
 8007d10:	4603      	mov	r3, r0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b082      	sub	sp, #8
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	460b      	mov	r3, r1
 8007d24:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	789b      	ldrb	r3, [r3, #2]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d10f      	bne.n	8007d4e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2203      	movs	r2, #3
 8007d38:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007d3a:	78fb      	ldrb	r3, [r7, #3]
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007d4e:	2200      	movs	r2, #0
 8007d50:	2100      	movs	r1, #0
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f9e5 	bl	8008122 <USBH_CtlReq>
 8007d58:	4603      	mov	r3, r0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b082      	sub	sp, #8
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	789b      	ldrb	r3, [r3, #2]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d10f      	bne.n	8007d96 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2202      	movs	r2, #2
 8007d7a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007d96:	2200      	movs	r2, #0
 8007d98:	2100      	movs	r1, #0
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f9c1 	bl	8008122 <USBH_CtlReq>
 8007da0:	4603      	mov	r3, r0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b085      	sub	sp, #20
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	60f8      	str	r0, [r7, #12]
 8007db2:	60b9      	str	r1, [r7, #8]
 8007db4:	4613      	mov	r3, r2
 8007db6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	781a      	ldrb	r2, [r3, #0]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	785a      	ldrb	r2, [r3, #1]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	3302      	adds	r3, #2
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	3303      	adds	r3, #3
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	021b      	lsls	r3, r3, #8
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	791a      	ldrb	r2, [r3, #4]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	795a      	ldrb	r2, [r3, #5]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	799a      	ldrb	r2, [r3, #6]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	79da      	ldrb	r2, [r3, #7]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007e04:	88fb      	ldrh	r3, [r7, #6]
 8007e06:	2b08      	cmp	r3, #8
 8007e08:	d939      	bls.n	8007e7e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	3308      	adds	r3, #8
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	3309      	adds	r3, #9
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	021b      	lsls	r3, r3, #8
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	330a      	adds	r3, #10
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	330b      	adds	r3, #11
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	021b      	lsls	r3, r3, #8
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	330c      	adds	r3, #12
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	330d      	adds	r3, #13
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	021b      	lsls	r3, r3, #8
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	4313      	orrs	r3, r2
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	7b9a      	ldrb	r2, [r3, #14]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	7bda      	ldrb	r2, [r3, #15]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	7c1a      	ldrb	r2, [r3, #16]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	7c5a      	ldrb	r2, [r3, #17]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	745a      	strb	r2, [r3, #17]
  }
}
 8007e7e:	bf00      	nop
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b08a      	sub	sp, #40	; 0x28
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	60f8      	str	r0, [r7, #12]
 8007e92:	60b9      	str	r1, [r7, #8]
 8007e94:	4613      	mov	r3, r2
 8007e96:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	781a      	ldrb	r2, [r3, #0]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	785a      	ldrb	r2, [r3, #1]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	3302      	adds	r3, #2
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	3303      	adds	r3, #3
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	021b      	lsls	r3, r3, #8
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	791a      	ldrb	r2, [r3, #4]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	795a      	ldrb	r2, [r3, #5]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	799a      	ldrb	r2, [r3, #6]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	79da      	ldrb	r2, [r3, #7]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	7a1a      	ldrb	r2, [r3, #8]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007f00:	88fb      	ldrh	r3, [r7, #6]
 8007f02:	2b09      	cmp	r3, #9
 8007f04:	d95f      	bls.n	8007fc6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007f06:	2309      	movs	r3, #9
 8007f08:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f0e:	e051      	b.n	8007fb4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f10:	f107 0316 	add.w	r3, r7, #22
 8007f14:	4619      	mov	r1, r3
 8007f16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f18:	f000 f8e8 	bl	80080ec <USBH_GetNextDesc>
 8007f1c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	785b      	ldrb	r3, [r3, #1]
 8007f22:	2b04      	cmp	r3, #4
 8007f24:	d146      	bne.n	8007fb4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007f26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f2a:	221a      	movs	r2, #26
 8007f2c:	fb02 f303 	mul.w	r3, r2, r3
 8007f30:	3308      	adds	r3, #8
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	4413      	add	r3, r2
 8007f36:	3302      	adds	r3, #2
 8007f38:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007f3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f3c:	69f8      	ldr	r0, [r7, #28]
 8007f3e:	f000 f846 	bl	8007fce <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f4c:	e022      	b.n	8007f94 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f4e:	f107 0316 	add.w	r3, r7, #22
 8007f52:	4619      	mov	r1, r3
 8007f54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f56:	f000 f8c9 	bl	80080ec <USBH_GetNextDesc>
 8007f5a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5e:	785b      	ldrb	r3, [r3, #1]
 8007f60:	2b05      	cmp	r3, #5
 8007f62:	d117      	bne.n	8007f94 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007f64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f68:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007f6c:	3201      	adds	r2, #1
 8007f6e:	00d2      	lsls	r2, r2, #3
 8007f70:	211a      	movs	r1, #26
 8007f72:	fb01 f303 	mul.w	r3, r1, r3
 8007f76:	4413      	add	r3, r2
 8007f78:	3308      	adds	r3, #8
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	3304      	adds	r3, #4
 8007f80:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007f82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f84:	69b8      	ldr	r0, [r7, #24]
 8007f86:	f000 f851 	bl	800802c <USBH_ParseEPDesc>
            ep_ix++;
 8007f8a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007f8e:	3301      	adds	r3, #1
 8007f90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	791b      	ldrb	r3, [r3, #4]
 8007f98:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d204      	bcs.n	8007faa <USBH_ParseCfgDesc+0x120>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	885a      	ldrh	r2, [r3, #2]
 8007fa4:	8afb      	ldrh	r3, [r7, #22]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d8d1      	bhi.n	8007f4e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007faa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fae:	3301      	adds	r3, #1
 8007fb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d804      	bhi.n	8007fc6 <USBH_ParseCfgDesc+0x13c>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	885a      	ldrh	r2, [r3, #2]
 8007fc0:	8afb      	ldrh	r3, [r7, #22]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d8a4      	bhi.n	8007f10 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007fc6:	bf00      	nop
 8007fc8:	3728      	adds	r7, #40	; 0x28
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b083      	sub	sp, #12
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781a      	ldrb	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	785a      	ldrb	r2, [r3, #1]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	789a      	ldrb	r2, [r3, #2]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	78da      	ldrb	r2, [r3, #3]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	791a      	ldrb	r2, [r3, #4]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	795a      	ldrb	r2, [r3, #5]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	799a      	ldrb	r2, [r3, #6]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	79da      	ldrb	r2, [r3, #7]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	7a1a      	ldrb	r2, [r3, #8]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	721a      	strb	r2, [r3, #8]
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	781a      	ldrb	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	785a      	ldrb	r2, [r3, #1]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	789a      	ldrb	r2, [r3, #2]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	78da      	ldrb	r2, [r3, #3]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	3304      	adds	r3, #4
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	b29a      	uxth	r2, r3
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	3305      	adds	r3, #5
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	b29b      	uxth	r3, r3
 8008066:	021b      	lsls	r3, r3, #8
 8008068:	b29b      	uxth	r3, r3
 800806a:	4313      	orrs	r3, r2
 800806c:	b29a      	uxth	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	799a      	ldrb	r2, [r3, #6]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	719a      	strb	r2, [r3, #6]
}
 800807a:	bf00      	nop
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008086:	b480      	push	{r7}
 8008088:	b087      	sub	sp, #28
 800808a:	af00      	add	r7, sp, #0
 800808c:	60f8      	str	r0, [r7, #12]
 800808e:	60b9      	str	r1, [r7, #8]
 8008090:	4613      	mov	r3, r2
 8008092:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	3301      	adds	r3, #1
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	2b03      	cmp	r3, #3
 800809c:	d120      	bne.n	80080e0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	1e9a      	subs	r2, r3, #2
 80080a4:	88fb      	ldrh	r3, [r7, #6]
 80080a6:	4293      	cmp	r3, r2
 80080a8:	bf28      	it	cs
 80080aa:	4613      	movcs	r3, r2
 80080ac:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	3302      	adds	r3, #2
 80080b2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80080b4:	2300      	movs	r3, #0
 80080b6:	82fb      	strh	r3, [r7, #22]
 80080b8:	e00b      	b.n	80080d2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80080ba:	8afb      	ldrh	r3, [r7, #22]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	4413      	add	r3, r2
 80080c0:	781a      	ldrb	r2, [r3, #0]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	701a      	strb	r2, [r3, #0]
      pdest++;
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	3301      	adds	r3, #1
 80080ca:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80080cc:	8afb      	ldrh	r3, [r7, #22]
 80080ce:	3302      	adds	r3, #2
 80080d0:	82fb      	strh	r3, [r7, #22]
 80080d2:	8afa      	ldrh	r2, [r7, #22]
 80080d4:	8abb      	ldrh	r3, [r7, #20]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d3ef      	bcc.n	80080ba <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2200      	movs	r2, #0
 80080de:	701a      	strb	r2, [r3, #0]
  }
}
 80080e0:	bf00      	nop
 80080e2:	371c      	adds	r7, #28
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	881a      	ldrh	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	b29b      	uxth	r3, r3
 8008100:	4413      	add	r3, r2
 8008102:	b29a      	uxth	r2, r3
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4413      	add	r3, r2
 8008112:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008114:	68fb      	ldr	r3, [r7, #12]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b086      	sub	sp, #24
 8008126:	af00      	add	r7, sp, #0
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	4613      	mov	r3, r2
 800812e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008130:	2301      	movs	r3, #1
 8008132:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	789b      	ldrb	r3, [r3, #2]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d002      	beq.n	8008142 <USBH_CtlReq+0x20>
 800813c:	2b02      	cmp	r3, #2
 800813e:	d01d      	beq.n	800817c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008140:	e043      	b.n	80081ca <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	88fa      	ldrh	r2, [r7, #6]
 800814c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2201      	movs	r2, #1
 8008152:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2202      	movs	r2, #2
 8008158:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800815a:	2301      	movs	r3, #1
 800815c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2203      	movs	r2, #3
 8008162:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008172:	2300      	movs	r3, #0
 8008174:	2200      	movs	r2, #0
 8008176:	f000 fddd 	bl	8008d34 <osMessageQueuePut>
      break;
 800817a:	e026      	b.n	80081ca <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f000 f829 	bl	80081d4 <USBH_HandleControl>
 8008182:	4603      	mov	r3, r0
 8008184:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008186:	7dfb      	ldrb	r3, [r7, #23]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <USBH_CtlReq+0x70>
 800818c:	7dfb      	ldrb	r3, [r7, #23]
 800818e:	2b03      	cmp	r3, #3
 8008190:	d106      	bne.n	80081a0 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2201      	movs	r2, #1
 8008196:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	761a      	strb	r2, [r3, #24]
 800819e:	e005      	b.n	80081ac <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80081a0:	7dfb      	ldrb	r3, [r7, #23]
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d102      	bne.n	80081ac <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2201      	movs	r2, #1
 80081aa:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2203      	movs	r2, #3
 80081b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80081c0:	2300      	movs	r3, #0
 80081c2:	2200      	movs	r2, #0
 80081c4:	f000 fdb6 	bl	8008d34 <osMessageQueuePut>
      break;
 80081c8:	bf00      	nop
  }
  return status;
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3718      	adds	r7, #24
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af02      	add	r7, sp, #8
 80081da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80081dc:	2301      	movs	r3, #1
 80081de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80081e0:	2300      	movs	r3, #0
 80081e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	7e1b      	ldrb	r3, [r3, #24]
 80081e8:	3b01      	subs	r3, #1
 80081ea:	2b0a      	cmp	r3, #10
 80081ec:	f200 822b 	bhi.w	8008646 <USBH_HandleControl+0x472>
 80081f0:	a201      	add	r2, pc, #4	; (adr r2, 80081f8 <USBH_HandleControl+0x24>)
 80081f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f6:	bf00      	nop
 80081f8:	08008225 	.word	0x08008225
 80081fc:	0800823f 	.word	0x0800823f
 8008200:	080082e1 	.word	0x080082e1
 8008204:	08008307 	.word	0x08008307
 8008208:	08008393 	.word	0x08008393
 800820c:	080083bf 	.word	0x080083bf
 8008210:	08008481 	.word	0x08008481
 8008214:	080084a3 	.word	0x080084a3
 8008218:	08008535 	.word	0x08008535
 800821c:	0800855d 	.word	0x0800855d
 8008220:	080085ef 	.word	0x080085ef
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f103 0110 	add.w	r1, r3, #16
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	795b      	ldrb	r3, [r3, #5]
 800822e:	461a      	mov	r2, r3
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fa19 	bl	8008668 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2202      	movs	r2, #2
 800823a:	761a      	strb	r2, [r3, #24]
      break;
 800823c:	e20e      	b.n	800865c <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	795b      	ldrb	r3, [r3, #5]
 8008242:	4619      	mov	r1, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f003 ff8f 	bl	800c168 <USBH_LL_GetURBState>
 800824a:	4603      	mov	r3, r0
 800824c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800824e:	7bbb      	ldrb	r3, [r7, #14]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d12c      	bne.n	80082ae <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	7c1b      	ldrb	r3, [r3, #16]
 8008258:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800825c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	8adb      	ldrh	r3, [r3, #22]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00a      	beq.n	800827c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008266:	7b7b      	ldrb	r3, [r7, #13]
 8008268:	2b80      	cmp	r3, #128	; 0x80
 800826a:	d103      	bne.n	8008274 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2203      	movs	r2, #3
 8008270:	761a      	strb	r2, [r3, #24]
 8008272:	e00d      	b.n	8008290 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2205      	movs	r2, #5
 8008278:	761a      	strb	r2, [r3, #24]
 800827a:	e009      	b.n	8008290 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800827c:	7b7b      	ldrb	r3, [r7, #13]
 800827e:	2b80      	cmp	r3, #128	; 0x80
 8008280:	d103      	bne.n	800828a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2209      	movs	r2, #9
 8008286:	761a      	strb	r2, [r3, #24]
 8008288:	e002      	b.n	8008290 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2207      	movs	r2, #7
 800828e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2203      	movs	r2, #3
 8008294:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80082a4:	2300      	movs	r3, #0
 80082a6:	2200      	movs	r2, #0
 80082a8:	f000 fd44 	bl	8008d34 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80082ac:	e1cd      	b.n	800864a <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80082ae:	7bbb      	ldrb	r3, [r7, #14]
 80082b0:	2b04      	cmp	r3, #4
 80082b2:	d003      	beq.n	80082bc <USBH_HandleControl+0xe8>
 80082b4:	7bbb      	ldrb	r3, [r7, #14]
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	f040 81c7 	bne.w	800864a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	220b      	movs	r2, #11
 80082c0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2203      	movs	r2, #3
 80082c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80082d6:	2300      	movs	r3, #0
 80082d8:	2200      	movs	r2, #0
 80082da:	f000 fd2b 	bl	8008d34 <osMessageQueuePut>
      break;
 80082de:	e1b4      	b.n	800864a <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6899      	ldr	r1, [r3, #8]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	899a      	ldrh	r2, [r3, #12]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	791b      	ldrb	r3, [r3, #4]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f9f4 	bl	80086e6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2204      	movs	r2, #4
 8008302:	761a      	strb	r2, [r3, #24]
      break;
 8008304:	e1aa      	b.n	800865c <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	791b      	ldrb	r3, [r3, #4]
 800830a:	4619      	mov	r1, r3
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f003 ff2b 	bl	800c168 <USBH_LL_GetURBState>
 8008312:	4603      	mov	r3, r0
 8008314:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d110      	bne.n	800833e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2209      	movs	r2, #9
 8008320:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2203      	movs	r2, #3
 8008326:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008336:	2300      	movs	r3, #0
 8008338:	2200      	movs	r2, #0
 800833a:	f000 fcfb 	bl	8008d34 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	2b05      	cmp	r3, #5
 8008342:	d110      	bne.n	8008366 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008344:	2303      	movs	r3, #3
 8008346:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2203      	movs	r2, #3
 800834c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800835c:	2300      	movs	r3, #0
 800835e:	2200      	movs	r2, #0
 8008360:	f000 fce8 	bl	8008d34 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008364:	e173      	b.n	800864e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	2b04      	cmp	r3, #4
 800836a:	f040 8170 	bne.w	800864e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	220b      	movs	r2, #11
 8008372:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2203      	movs	r2, #3
 8008378:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008388:	2300      	movs	r3, #0
 800838a:	2200      	movs	r2, #0
 800838c:	f000 fcd2 	bl	8008d34 <osMessageQueuePut>
      break;
 8008390:	e15d      	b.n	800864e <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6899      	ldr	r1, [r3, #8]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	899a      	ldrh	r2, [r3, #12]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	7958      	ldrb	r0, [r3, #5]
 800839e:	2301      	movs	r3, #1
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	4603      	mov	r3, r0
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f979 	bl	800869c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2206      	movs	r2, #6
 80083ba:	761a      	strb	r2, [r3, #24]
      break;
 80083bc:	e14e      	b.n	800865c <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	795b      	ldrb	r3, [r3, #5]
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f003 fecf 	bl	800c168 <USBH_LL_GetURBState>
 80083ca:	4603      	mov	r3, r0
 80083cc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083ce:	7bbb      	ldrb	r3, [r7, #14]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d111      	bne.n	80083f8 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2207      	movs	r2, #7
 80083d8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2203      	movs	r2, #3
 80083de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80083ee:	2300      	movs	r3, #0
 80083f0:	2200      	movs	r2, #0
 80083f2:	f000 fc9f 	bl	8008d34 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80083f6:	e12c      	b.n	8008652 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	2b05      	cmp	r3, #5
 80083fc:	d113      	bne.n	8008426 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	220c      	movs	r2, #12
 8008402:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008404:	2303      	movs	r3, #3
 8008406:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2203      	movs	r2, #3
 800840c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800841c:	2300      	movs	r3, #0
 800841e:	2200      	movs	r2, #0
 8008420:	f000 fc88 	bl	8008d34 <osMessageQueuePut>
      break;
 8008424:	e115      	b.n	8008652 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008426:	7bbb      	ldrb	r3, [r7, #14]
 8008428:	2b02      	cmp	r3, #2
 800842a:	d111      	bne.n	8008450 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2205      	movs	r2, #5
 8008430:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2203      	movs	r2, #3
 8008436:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008446:	2300      	movs	r3, #0
 8008448:	2200      	movs	r2, #0
 800844a:	f000 fc73 	bl	8008d34 <osMessageQueuePut>
      break;
 800844e:	e100      	b.n	8008652 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	2b04      	cmp	r3, #4
 8008454:	f040 80fd 	bne.w	8008652 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	220b      	movs	r2, #11
 800845c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800845e:	2302      	movs	r3, #2
 8008460:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2203      	movs	r2, #3
 8008466:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008476:	2300      	movs	r3, #0
 8008478:	2200      	movs	r2, #0
 800847a:	f000 fc5b 	bl	8008d34 <osMessageQueuePut>
      break;
 800847e:	e0e8      	b.n	8008652 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	791b      	ldrb	r3, [r3, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	2100      	movs	r1, #0
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f92c 	bl	80086e6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008494:	b29a      	uxth	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2208      	movs	r2, #8
 800849e:	761a      	strb	r2, [r3, #24]

      break;
 80084a0:	e0dc      	b.n	800865c <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	791b      	ldrb	r3, [r3, #4]
 80084a6:	4619      	mov	r1, r3
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f003 fe5d 	bl	800c168 <USBH_LL_GetURBState>
 80084ae:	4603      	mov	r3, r0
 80084b0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d113      	bne.n	80084e0 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	220d      	movs	r2, #13
 80084bc:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2203      	movs	r2, #3
 80084c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80084d6:	2300      	movs	r3, #0
 80084d8:	2200      	movs	r2, #0
 80084da:	f000 fc2b 	bl	8008d34 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80084de:	e0ba      	b.n	8008656 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 80084e0:	7bbb      	ldrb	r3, [r7, #14]
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	d111      	bne.n	800850a <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	220b      	movs	r2, #11
 80084ea:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2203      	movs	r2, #3
 80084f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008500:	2300      	movs	r3, #0
 8008502:	2200      	movs	r2, #0
 8008504:	f000 fc16 	bl	8008d34 <osMessageQueuePut>
      break;
 8008508:	e0a5      	b.n	8008656 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800850a:	7bbb      	ldrb	r3, [r7, #14]
 800850c:	2b05      	cmp	r3, #5
 800850e:	f040 80a2 	bne.w	8008656 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 8008512:	2303      	movs	r3, #3
 8008514:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2203      	movs	r2, #3
 800851a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800852a:	2300      	movs	r3, #0
 800852c:	2200      	movs	r2, #0
 800852e:	f000 fc01 	bl	8008d34 <osMessageQueuePut>
      break;
 8008532:	e090      	b.n	8008656 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	795a      	ldrb	r2, [r3, #5]
 8008538:	2301      	movs	r3, #1
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	4613      	mov	r3, r2
 800853e:	2200      	movs	r2, #0
 8008540:	2100      	movs	r1, #0
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f8aa 	bl	800869c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800854e:	b29a      	uxth	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	220a      	movs	r2, #10
 8008558:	761a      	strb	r2, [r3, #24]
      break;
 800855a:	e07f      	b.n	800865c <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	795b      	ldrb	r3, [r3, #5]
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f003 fe00 	bl	800c168 <USBH_LL_GetURBState>
 8008568:	4603      	mov	r3, r0
 800856a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800856c:	7bbb      	ldrb	r3, [r7, #14]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d113      	bne.n	800859a <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	220d      	movs	r2, #13
 800857a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2203      	movs	r2, #3
 8008580:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008590:	2300      	movs	r3, #0
 8008592:	2200      	movs	r2, #0
 8008594:	f000 fbce 	bl	8008d34 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008598:	e05f      	b.n	800865a <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800859a:	7bbb      	ldrb	r3, [r7, #14]
 800859c:	2b02      	cmp	r3, #2
 800859e:	d111      	bne.n	80085c4 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2209      	movs	r2, #9
 80085a4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2203      	movs	r2, #3
 80085aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80085ba:	2300      	movs	r3, #0
 80085bc:	2200      	movs	r2, #0
 80085be:	f000 fbb9 	bl	8008d34 <osMessageQueuePut>
      break;
 80085c2:	e04a      	b.n	800865a <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 80085c4:	7bbb      	ldrb	r3, [r7, #14]
 80085c6:	2b04      	cmp	r3, #4
 80085c8:	d147      	bne.n	800865a <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	220b      	movs	r2, #11
 80085ce:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2203      	movs	r2, #3
 80085d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80085e4:	2300      	movs	r3, #0
 80085e6:	2200      	movs	r2, #0
 80085e8:	f000 fba4 	bl	8008d34 <osMessageQueuePut>
      break;
 80085ec:	e035      	b.n	800865a <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	7e5b      	ldrb	r3, [r3, #25]
 80085f2:	3301      	adds	r3, #1
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	765a      	strb	r2, [r3, #25]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	7e5b      	ldrb	r3, [r3, #25]
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d806      	bhi.n	8008610 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800860e:	e025      	b.n	800865c <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008616:	2106      	movs	r1, #6
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	795b      	ldrb	r3, [r3, #5]
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f90d 	bl	8008848 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	791b      	ldrb	r3, [r3, #4]
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f907 	bl	8008848 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008640:	2302      	movs	r3, #2
 8008642:	73fb      	strb	r3, [r7, #15]
      break;
 8008644:	e00a      	b.n	800865c <USBH_HandleControl+0x488>

    default:
      break;
 8008646:	bf00      	nop
 8008648:	e008      	b.n	800865c <USBH_HandleControl+0x488>
      break;
 800864a:	bf00      	nop
 800864c:	e006      	b.n	800865c <USBH_HandleControl+0x488>
      break;
 800864e:	bf00      	nop
 8008650:	e004      	b.n	800865c <USBH_HandleControl+0x488>
      break;
 8008652:	bf00      	nop
 8008654:	e002      	b.n	800865c <USBH_HandleControl+0x488>
      break;
 8008656:	bf00      	nop
 8008658:	e000      	b.n	800865c <USBH_HandleControl+0x488>
      break;
 800865a:	bf00      	nop
  }

  return status;
 800865c:	7bfb      	ldrb	r3, [r7, #15]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop

08008668 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b088      	sub	sp, #32
 800866c:	af04      	add	r7, sp, #16
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	4613      	mov	r3, r2
 8008674:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008676:	79f9      	ldrb	r1, [r7, #7]
 8008678:	2300      	movs	r3, #0
 800867a:	9303      	str	r3, [sp, #12]
 800867c:	2308      	movs	r3, #8
 800867e:	9302      	str	r3, [sp, #8]
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	9301      	str	r3, [sp, #4]
 8008684:	2300      	movs	r3, #0
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	2300      	movs	r3, #0
 800868a:	2200      	movs	r2, #0
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f003 fd3a 	bl	800c106 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b088      	sub	sp, #32
 80086a0:	af04      	add	r7, sp, #16
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	4611      	mov	r1, r2
 80086a8:	461a      	mov	r2, r3
 80086aa:	460b      	mov	r3, r1
 80086ac:	80fb      	strh	r3, [r7, #6]
 80086ae:	4613      	mov	r3, r2
 80086b0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80086bc:	2300      	movs	r3, #0
 80086be:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80086c0:	7979      	ldrb	r1, [r7, #5]
 80086c2:	7e3b      	ldrb	r3, [r7, #24]
 80086c4:	9303      	str	r3, [sp, #12]
 80086c6:	88fb      	ldrh	r3, [r7, #6]
 80086c8:	9302      	str	r3, [sp, #8]
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	9301      	str	r3, [sp, #4]
 80086ce:	2301      	movs	r3, #1
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	2300      	movs	r3, #0
 80086d4:	2200      	movs	r2, #0
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f003 fd15 	bl	800c106 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b088      	sub	sp, #32
 80086ea:	af04      	add	r7, sp, #16
 80086ec:	60f8      	str	r0, [r7, #12]
 80086ee:	60b9      	str	r1, [r7, #8]
 80086f0:	4611      	mov	r1, r2
 80086f2:	461a      	mov	r2, r3
 80086f4:	460b      	mov	r3, r1
 80086f6:	80fb      	strh	r3, [r7, #6]
 80086f8:	4613      	mov	r3, r2
 80086fa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80086fc:	7979      	ldrb	r1, [r7, #5]
 80086fe:	2300      	movs	r3, #0
 8008700:	9303      	str	r3, [sp, #12]
 8008702:	88fb      	ldrh	r3, [r7, #6]
 8008704:	9302      	str	r3, [sp, #8]
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	9301      	str	r3, [sp, #4]
 800870a:	2301      	movs	r3, #1
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	2300      	movs	r3, #0
 8008710:	2201      	movs	r2, #1
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f003 fcf7 	bl	800c106 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008718:	2300      	movs	r3, #0

}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b088      	sub	sp, #32
 8008726:	af04      	add	r7, sp, #16
 8008728:	60f8      	str	r0, [r7, #12]
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	4611      	mov	r1, r2
 800872e:	461a      	mov	r2, r3
 8008730:	460b      	mov	r3, r1
 8008732:	80fb      	strh	r3, [r7, #6]
 8008734:	4613      	mov	r3, r2
 8008736:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008746:	7979      	ldrb	r1, [r7, #5]
 8008748:	7e3b      	ldrb	r3, [r7, #24]
 800874a:	9303      	str	r3, [sp, #12]
 800874c:	88fb      	ldrh	r3, [r7, #6]
 800874e:	9302      	str	r3, [sp, #8]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	9301      	str	r3, [sp, #4]
 8008754:	2301      	movs	r3, #1
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	2302      	movs	r3, #2
 800875a:	2200      	movs	r2, #0
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f003 fcd2 	bl	800c106 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b088      	sub	sp, #32
 8008770:	af04      	add	r7, sp, #16
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	4611      	mov	r1, r2
 8008778:	461a      	mov	r2, r3
 800877a:	460b      	mov	r3, r1
 800877c:	80fb      	strh	r3, [r7, #6]
 800877e:	4613      	mov	r3, r2
 8008780:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008782:	7979      	ldrb	r1, [r7, #5]
 8008784:	2300      	movs	r3, #0
 8008786:	9303      	str	r3, [sp, #12]
 8008788:	88fb      	ldrh	r3, [r7, #6]
 800878a:	9302      	str	r3, [sp, #8]
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	9301      	str	r3, [sp, #4]
 8008790:	2301      	movs	r3, #1
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	2302      	movs	r3, #2
 8008796:	2201      	movs	r2, #1
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f003 fcb4 	bl	800c106 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b086      	sub	sp, #24
 80087ac:	af04      	add	r7, sp, #16
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	4608      	mov	r0, r1
 80087b2:	4611      	mov	r1, r2
 80087b4:	461a      	mov	r2, r3
 80087b6:	4603      	mov	r3, r0
 80087b8:	70fb      	strb	r3, [r7, #3]
 80087ba:	460b      	mov	r3, r1
 80087bc:	70bb      	strb	r3, [r7, #2]
 80087be:	4613      	mov	r3, r2
 80087c0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80087c2:	7878      	ldrb	r0, [r7, #1]
 80087c4:	78ba      	ldrb	r2, [r7, #2]
 80087c6:	78f9      	ldrb	r1, [r7, #3]
 80087c8:	8b3b      	ldrh	r3, [r7, #24]
 80087ca:	9302      	str	r3, [sp, #8]
 80087cc:	7d3b      	ldrb	r3, [r7, #20]
 80087ce:	9301      	str	r3, [sp, #4]
 80087d0:	7c3b      	ldrb	r3, [r7, #16]
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	4603      	mov	r3, r0
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f003 fc47 	bl	800c06a <USBH_LL_OpenPipe>

  return USBH_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b082      	sub	sp, #8
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
 80087ee:	460b      	mov	r3, r1
 80087f0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80087f2:	78fb      	ldrb	r3, [r7, #3]
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f003 fc66 	bl	800c0c8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	460b      	mov	r3, r1
 8008810:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f836 	bl	8008884 <USBH_GetFreePipe>
 8008818:	4603      	mov	r3, r0
 800881a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800881c:	89fb      	ldrh	r3, [r7, #14]
 800881e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008822:	4293      	cmp	r3, r2
 8008824:	d00a      	beq.n	800883c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008826:	78fa      	ldrb	r2, [r7, #3]
 8008828:	89fb      	ldrh	r3, [r7, #14]
 800882a:	f003 030f 	and.w	r3, r3, #15
 800882e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	33e0      	adds	r3, #224	; 0xe0
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	440b      	add	r3, r1
 800883a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800883c:	89fb      	ldrh	r3, [r7, #14]
 800883e:	b2db      	uxtb	r3, r3
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	460b      	mov	r3, r1
 8008852:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008854:	78fb      	ldrb	r3, [r7, #3]
 8008856:	2b0a      	cmp	r3, #10
 8008858:	d80d      	bhi.n	8008876 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800885a:	78fb      	ldrb	r3, [r7, #3]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	33e0      	adds	r3, #224	; 0xe0
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	78fb      	ldrb	r3, [r7, #3]
 8008868:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800886c:	6879      	ldr	r1, [r7, #4]
 800886e:	33e0      	adds	r3, #224	; 0xe0
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	440b      	add	r3, r1
 8008874:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800888c:	2300      	movs	r3, #0
 800888e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008890:	2300      	movs	r3, #0
 8008892:	73fb      	strb	r3, [r7, #15]
 8008894:	e00f      	b.n	80088b6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008896:	7bfb      	ldrb	r3, [r7, #15]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	33e0      	adds	r3, #224	; 0xe0
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d102      	bne.n	80088b0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	e007      	b.n	80088c0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
 80088b2:	3301      	adds	r3, #1
 80088b4:	73fb      	strb	r3, [r7, #15]
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
 80088b8:	2b0a      	cmp	r3, #10
 80088ba:	d9ec      	bls.n	8008896 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80088bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80088cc:	b480      	push	{r7}
 80088ce:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80088d0:	bf00      	nop
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
	...

080088dc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088e2:	f3ef 8305 	mrs	r3, IPSR
 80088e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80088e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10f      	bne.n	800890e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ee:	f3ef 8310 	mrs	r3, PRIMASK
 80088f2:	607b      	str	r3, [r7, #4]
  return(result);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d105      	bne.n	8008906 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088fa:	f3ef 8311 	mrs	r3, BASEPRI
 80088fe:	603b      	str	r3, [r7, #0]
  return(result);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d007      	beq.n	8008916 <osKernelInitialize+0x3a>
 8008906:	4b0e      	ldr	r3, [pc, #56]	; (8008940 <osKernelInitialize+0x64>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b02      	cmp	r3, #2
 800890c:	d103      	bne.n	8008916 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800890e:	f06f 0305 	mvn.w	r3, #5
 8008912:	60fb      	str	r3, [r7, #12]
 8008914:	e00c      	b.n	8008930 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008916:	4b0a      	ldr	r3, [pc, #40]	; (8008940 <osKernelInitialize+0x64>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d105      	bne.n	800892a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800891e:	4b08      	ldr	r3, [pc, #32]	; (8008940 <osKernelInitialize+0x64>)
 8008920:	2201      	movs	r2, #1
 8008922:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008924:	2300      	movs	r3, #0
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	e002      	b.n	8008930 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800892a:	f04f 33ff 	mov.w	r3, #4294967295
 800892e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008930:	68fb      	ldr	r3, [r7, #12]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3714      	adds	r7, #20
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	20000158 	.word	0x20000158

08008944 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800894a:	f3ef 8305 	mrs	r3, IPSR
 800894e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008950:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10f      	bne.n	8008976 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008956:	f3ef 8310 	mrs	r3, PRIMASK
 800895a:	607b      	str	r3, [r7, #4]
  return(result);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d105      	bne.n	800896e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008962:	f3ef 8311 	mrs	r3, BASEPRI
 8008966:	603b      	str	r3, [r7, #0]
  return(result);
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d007      	beq.n	800897e <osKernelStart+0x3a>
 800896e:	4b0f      	ldr	r3, [pc, #60]	; (80089ac <osKernelStart+0x68>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b02      	cmp	r3, #2
 8008974:	d103      	bne.n	800897e <osKernelStart+0x3a>
    stat = osErrorISR;
 8008976:	f06f 0305 	mvn.w	r3, #5
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	e010      	b.n	80089a0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800897e:	4b0b      	ldr	r3, [pc, #44]	; (80089ac <osKernelStart+0x68>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d109      	bne.n	800899a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008986:	f7ff ffa1 	bl	80088cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800898a:	4b08      	ldr	r3, [pc, #32]	; (80089ac <osKernelStart+0x68>)
 800898c:	2202      	movs	r2, #2
 800898e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008990:	f001 fb7c 	bl	800a08c <vTaskStartScheduler>
      stat = osOK;
 8008994:	2300      	movs	r3, #0
 8008996:	60fb      	str	r3, [r7, #12]
 8008998:	e002      	b.n	80089a0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800899a:	f04f 33ff 	mov.w	r3, #4294967295
 800899e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80089a0:	68fb      	ldr	r3, [r7, #12]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	20000158 	.word	0x20000158

080089b0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089b6:	f3ef 8305 	mrs	r3, IPSR
 80089ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80089bc:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10f      	bne.n	80089e2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089c2:	f3ef 8310 	mrs	r3, PRIMASK
 80089c6:	607b      	str	r3, [r7, #4]
  return(result);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d105      	bne.n	80089da <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80089ce:	f3ef 8311 	mrs	r3, BASEPRI
 80089d2:	603b      	str	r3, [r7, #0]
  return(result);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d007      	beq.n	80089ea <osKernelGetTickCount+0x3a>
 80089da:	4b08      	ldr	r3, [pc, #32]	; (80089fc <osKernelGetTickCount+0x4c>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d103      	bne.n	80089ea <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80089e2:	f001 fca9 	bl	800a338 <xTaskGetTickCountFromISR>
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	e002      	b.n	80089f0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80089ea:	f001 fc95 	bl	800a318 <xTaskGetTickCount>
 80089ee:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80089f0:	68fb      	ldr	r3, [r7, #12]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	20000158 	.word	0x20000158

08008a00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b090      	sub	sp, #64	; 0x40
 8008a04:	af04      	add	r7, sp, #16
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a10:	f3ef 8305 	mrs	r3, IPSR
 8008a14:	61fb      	str	r3, [r7, #28]
  return(result);
 8008a16:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f040 808f 	bne.w	8008b3c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8008a22:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d105      	bne.n	8008a36 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a2a:	f3ef 8311 	mrs	r3, BASEPRI
 8008a2e:	617b      	str	r3, [r7, #20]
  return(result);
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d003      	beq.n	8008a3e <osThreadNew+0x3e>
 8008a36:	4b44      	ldr	r3, [pc, #272]	; (8008b48 <osThreadNew+0x148>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d07e      	beq.n	8008b3c <osThreadNew+0x13c>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d07b      	beq.n	8008b3c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008a44:	2380      	movs	r3, #128	; 0x80
 8008a46:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008a48:	2318      	movs	r3, #24
 8008a4a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008a50:	f04f 33ff 	mov.w	r3, #4294967295
 8008a54:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d045      	beq.n	8008ae8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d002      	beq.n	8008a6a <osThreadNew+0x6a>
        name = attr->name;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d008      	beq.n	8008a90 <osThreadNew+0x90>
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	2b38      	cmp	r3, #56	; 0x38
 8008a82:	d805      	bhi.n	8008a90 <osThreadNew+0x90>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <osThreadNew+0x94>
        return (NULL);
 8008a90:	2300      	movs	r3, #0
 8008a92:	e054      	b.n	8008b3e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	695b      	ldr	r3, [r3, #20]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d003      	beq.n	8008aa4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	089b      	lsrs	r3, r3, #2
 8008aa2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00e      	beq.n	8008aca <osThreadNew+0xca>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	2b5b      	cmp	r3, #91	; 0x5b
 8008ab2:	d90a      	bls.n	8008aca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d006      	beq.n	8008aca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	695b      	ldr	r3, [r3, #20]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d002      	beq.n	8008aca <osThreadNew+0xca>
        mem = 1;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	623b      	str	r3, [r7, #32]
 8008ac8:	e010      	b.n	8008aec <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10c      	bne.n	8008aec <osThreadNew+0xec>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d108      	bne.n	8008aec <osThreadNew+0xec>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d104      	bne.n	8008aec <osThreadNew+0xec>
          mem = 0;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	623b      	str	r3, [r7, #32]
 8008ae6:	e001      	b.n	8008aec <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d110      	bne.n	8008b14 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008afa:	9202      	str	r2, [sp, #8]
 8008afc:	9301      	str	r3, [sp, #4]
 8008afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f001 f873 	bl	8009bf4 <xTaskCreateStatic>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	613b      	str	r3, [r7, #16]
 8008b12:	e013      	b.n	8008b3c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d110      	bne.n	8008b3c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	f107 0310 	add.w	r3, r7, #16
 8008b22:	9301      	str	r3, [sp, #4]
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f001 f8bb 	bl	8009ca8 <xTaskCreate>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d001      	beq.n	8008b3c <osThreadNew+0x13c>
          hTask = NULL;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b3c:	693b      	ldr	r3, [r7, #16]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3730      	adds	r7, #48	; 0x30
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20000158 	.word	0x20000158

08008b4c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b54:	f3ef 8305 	mrs	r3, IPSR
 8008b58:	613b      	str	r3, [r7, #16]
  return(result);
 8008b5a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10f      	bne.n	8008b80 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b60:	f3ef 8310 	mrs	r3, PRIMASK
 8008b64:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d105      	bne.n	8008b78 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b6c:	f3ef 8311 	mrs	r3, BASEPRI
 8008b70:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d007      	beq.n	8008b88 <osDelay+0x3c>
 8008b78:	4b0a      	ldr	r3, [pc, #40]	; (8008ba4 <osDelay+0x58>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d103      	bne.n	8008b88 <osDelay+0x3c>
    stat = osErrorISR;
 8008b80:	f06f 0305 	mvn.w	r3, #5
 8008b84:	617b      	str	r3, [r7, #20]
 8008b86:	e007      	b.n	8008b98 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d002      	beq.n	8008b98 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f001 fa46 	bl	800a024 <vTaskDelay>
    }
  }

  return (stat);
 8008b98:	697b      	ldr	r3, [r7, #20]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	20000158 	.word	0x20000158

08008ba8 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b088      	sub	sp, #32
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bb0:	f3ef 8305 	mrs	r3, IPSR
 8008bb4:	617b      	str	r3, [r7, #20]
  return(result);
 8008bb6:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10f      	bne.n	8008bdc <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8008bc0:	613b      	str	r3, [r7, #16]
  return(result);
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d105      	bne.n	8008bd4 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008bc8:	f3ef 8311 	mrs	r3, BASEPRI
 8008bcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d007      	beq.n	8008be4 <osDelayUntil+0x3c>
 8008bd4:	4b13      	ldr	r3, [pc, #76]	; (8008c24 <osDelayUntil+0x7c>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d103      	bne.n	8008be4 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8008bdc:	f06f 0305 	mvn.w	r3, #5
 8008be0:	61fb      	str	r3, [r7, #28]
 8008be2:	e019      	b.n	8008c18 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8008be8:	f001 fb96 	bl	800a318 <xTaskGetTickCount>
 8008bec:	4603      	mov	r3, r0
 8008bee:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d009      	beq.n	8008c12 <osDelayUntil+0x6a>
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	db06      	blt.n	8008c12 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8008c04:	f107 0308 	add.w	r3, r7, #8
 8008c08:	69b9      	ldr	r1, [r7, #24]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f001 f990 	bl	8009f30 <vTaskDelayUntil>
 8008c10:	e002      	b.n	8008c18 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8008c12:	f06f 0303 	mvn.w	r3, #3
 8008c16:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8008c18:	69fb      	ldr	r3, [r7, #28]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3720      	adds	r7, #32
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	20000158 	.word	0x20000158

08008c28 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08c      	sub	sp, #48	; 0x30
 8008c2c:	af02      	add	r7, sp, #8
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008c34:	2300      	movs	r3, #0
 8008c36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c38:	f3ef 8305 	mrs	r3, IPSR
 8008c3c:	61bb      	str	r3, [r7, #24]
  return(result);
 8008c3e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d170      	bne.n	8008d26 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c44:	f3ef 8310 	mrs	r3, PRIMASK
 8008c48:	617b      	str	r3, [r7, #20]
  return(result);
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d105      	bne.n	8008c5c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c50:	f3ef 8311 	mrs	r3, BASEPRI
 8008c54:	613b      	str	r3, [r7, #16]
  return(result);
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d003      	beq.n	8008c64 <osMessageQueueNew+0x3c>
 8008c5c:	4b34      	ldr	r3, [pc, #208]	; (8008d30 <osMessageQueueNew+0x108>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d060      	beq.n	8008d26 <osMessageQueueNew+0xfe>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d05d      	beq.n	8008d26 <osMessageQueueNew+0xfe>
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d05a      	beq.n	8008d26 <osMessageQueueNew+0xfe>
    mem = -1;
 8008c70:	f04f 33ff 	mov.w	r3, #4294967295
 8008c74:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d029      	beq.n	8008cd0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d012      	beq.n	8008caa <osMessageQueueNew+0x82>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	2b4f      	cmp	r3, #79	; 0x4f
 8008c8a:	d90e      	bls.n	8008caa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00a      	beq.n	8008caa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	695a      	ldr	r2, [r3, #20]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	68b9      	ldr	r1, [r7, #8]
 8008c9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d302      	bcc.n	8008caa <osMessageQueueNew+0x82>
        mem = 1;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	623b      	str	r3, [r7, #32]
 8008ca8:	e014      	b.n	8008cd4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d110      	bne.n	8008cd4 <osMessageQueueNew+0xac>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10c      	bne.n	8008cd4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d108      	bne.n	8008cd4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	695b      	ldr	r3, [r3, #20]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d104      	bne.n	8008cd4 <osMessageQueueNew+0xac>
          mem = 0;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	623b      	str	r3, [r7, #32]
 8008cce:	e001      	b.n	8008cd4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008cd4:	6a3b      	ldr	r3, [r7, #32]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d10c      	bne.n	8008cf4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	691a      	ldr	r2, [r3, #16]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6899      	ldr	r1, [r3, #8]
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	68b9      	ldr	r1, [r7, #8]
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f000 fa58 	bl	80091a0 <xQueueGenericCreateStatic>
 8008cf0:	6278      	str	r0, [r7, #36]	; 0x24
 8008cf2:	e008      	b.n	8008d06 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8008cf4:	6a3b      	ldr	r3, [r7, #32]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d105      	bne.n	8008d06 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	68b9      	ldr	r1, [r7, #8]
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f000 fac1 	bl	8009286 <xQueueGenericCreate>
 8008d04:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00c      	beq.n	8008d26 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d003      	beq.n	8008d1a <osMessageQueueNew+0xf2>
        name = attr->name;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	61fb      	str	r3, [r7, #28]
 8008d18:	e001      	b.n	8008d1e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008d1e:	69f9      	ldr	r1, [r7, #28]
 8008d20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d22:	f000 ff0b 	bl	8009b3c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3728      	adds	r7, #40	; 0x28
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	20000158 	.word	0x20000158

08008d34 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b08a      	sub	sp, #40	; 0x28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	603b      	str	r3, [r7, #0]
 8008d40:	4613      	mov	r3, r2
 8008d42:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d4c:	f3ef 8305 	mrs	r3, IPSR
 8008d50:	61fb      	str	r3, [r7, #28]
  return(result);
 8008d52:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10f      	bne.n	8008d78 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d58:	f3ef 8310 	mrs	r3, PRIMASK
 8008d5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d105      	bne.n	8008d70 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d64:	f3ef 8311 	mrs	r3, BASEPRI
 8008d68:	617b      	str	r3, [r7, #20]
  return(result);
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d02c      	beq.n	8008dca <osMessageQueuePut+0x96>
 8008d70:	4b28      	ldr	r3, [pc, #160]	; (8008e14 <osMessageQueuePut+0xe0>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d128      	bne.n	8008dca <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d78:	6a3b      	ldr	r3, [r7, #32]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d005      	beq.n	8008d8a <osMessageQueuePut+0x56>
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <osMessageQueuePut+0x56>
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d003      	beq.n	8008d92 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8008d8a:	f06f 0303 	mvn.w	r3, #3
 8008d8e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d90:	e039      	b.n	8008e06 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8008d92:	2300      	movs	r3, #0
 8008d94:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008d96:	f107 0210 	add.w	r2, r7, #16
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	68b9      	ldr	r1, [r7, #8]
 8008d9e:	6a38      	ldr	r0, [r7, #32]
 8008da0:	f000 fbce 	bl	8009540 <xQueueGenericSendFromISR>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d003      	beq.n	8008db2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8008daa:	f06f 0302 	mvn.w	r3, #2
 8008dae:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008db0:	e029      	b.n	8008e06 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d026      	beq.n	8008e06 <osMessageQueuePut+0xd2>
 8008db8:	4b17      	ldr	r3, [pc, #92]	; (8008e18 <osMessageQueuePut+0xe4>)
 8008dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dbe:	601a      	str	r2, [r3, #0]
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008dc8:	e01d      	b.n	8008e06 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <osMessageQueuePut+0xa2>
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d103      	bne.n	8008dde <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8008dd6:	f06f 0303 	mvn.w	r3, #3
 8008dda:	627b      	str	r3, [r7, #36]	; 0x24
 8008ddc:	e014      	b.n	8008e08 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008dde:	2300      	movs	r3, #0
 8008de0:	683a      	ldr	r2, [r7, #0]
 8008de2:	68b9      	ldr	r1, [r7, #8]
 8008de4:	6a38      	ldr	r0, [r7, #32]
 8008de6:	f000 fab1 	bl	800934c <xQueueGenericSend>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d00b      	beq.n	8008e08 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d003      	beq.n	8008dfe <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8008df6:	f06f 0301 	mvn.w	r3, #1
 8008dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8008dfc:	e004      	b.n	8008e08 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8008dfe:	f06f 0302 	mvn.w	r3, #2
 8008e02:	627b      	str	r3, [r7, #36]	; 0x24
 8008e04:	e000      	b.n	8008e08 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e06:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3728      	adds	r7, #40	; 0x28
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	20000158 	.word	0x20000158
 8008e18:	e000ed04 	.word	0xe000ed04

08008e1c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b08a      	sub	sp, #40	; 0x28
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
 8008e28:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e32:	f3ef 8305 	mrs	r3, IPSR
 8008e36:	61fb      	str	r3, [r7, #28]
  return(result);
 8008e38:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10f      	bne.n	8008e5e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e42:	61bb      	str	r3, [r7, #24]
  return(result);
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d105      	bne.n	8008e56 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e4a:	f3ef 8311 	mrs	r3, BASEPRI
 8008e4e:	617b      	str	r3, [r7, #20]
  return(result);
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d02c      	beq.n	8008eb0 <osMessageQueueGet+0x94>
 8008e56:	4b28      	ldr	r3, [pc, #160]	; (8008ef8 <osMessageQueueGet+0xdc>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d128      	bne.n	8008eb0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d005      	beq.n	8008e70 <osMessageQueueGet+0x54>
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d002      	beq.n	8008e70 <osMessageQueueGet+0x54>
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d003      	beq.n	8008e78 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8008e70:	f06f 0303 	mvn.w	r3, #3
 8008e74:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e76:	e038      	b.n	8008eea <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008e7c:	f107 0310 	add.w	r3, r7, #16
 8008e80:	461a      	mov	r2, r3
 8008e82:	68b9      	ldr	r1, [r7, #8]
 8008e84:	6a38      	ldr	r0, [r7, #32]
 8008e86:	f000 fccb 	bl	8009820 <xQueueReceiveFromISR>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d003      	beq.n	8008e98 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8008e90:	f06f 0302 	mvn.w	r3, #2
 8008e94:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e96:	e028      	b.n	8008eea <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d025      	beq.n	8008eea <osMessageQueueGet+0xce>
 8008e9e:	4b17      	ldr	r3, [pc, #92]	; (8008efc <osMessageQueueGet+0xe0>)
 8008ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008eae:	e01c      	b.n	8008eea <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d002      	beq.n	8008ebc <osMessageQueueGet+0xa0>
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d103      	bne.n	8008ec4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8008ebc:	f06f 0303 	mvn.w	r3, #3
 8008ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ec2:	e013      	b.n	8008eec <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	68b9      	ldr	r1, [r7, #8]
 8008ec8:	6a38      	ldr	r0, [r7, #32]
 8008eca:	f000 fbcd 	bl	8009668 <xQueueReceive>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d00b      	beq.n	8008eec <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8008eda:	f06f 0301 	mvn.w	r3, #1
 8008ede:	627b      	str	r3, [r7, #36]	; 0x24
 8008ee0:	e004      	b.n	8008eec <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8008ee2:	f06f 0302 	mvn.w	r3, #2
 8008ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ee8:	e000      	b.n	8008eec <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008eea:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3728      	adds	r7, #40	; 0x28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	20000158 	.word	0x20000158
 8008efc:	e000ed04 	.word	0xe000ed04

08008f00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	4a07      	ldr	r2, [pc, #28]	; (8008f2c <vApplicationGetIdleTaskMemory+0x2c>)
 8008f10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	4a06      	ldr	r2, [pc, #24]	; (8008f30 <vApplicationGetIdleTaskMemory+0x30>)
 8008f16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2280      	movs	r2, #128	; 0x80
 8008f1c:	601a      	str	r2, [r3, #0]
}
 8008f1e:	bf00      	nop
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	2000015c 	.word	0x2000015c
 8008f30:	200001b8 	.word	0x200001b8

08008f34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	4a07      	ldr	r2, [pc, #28]	; (8008f60 <vApplicationGetTimerTaskMemory+0x2c>)
 8008f44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	4a06      	ldr	r2, [pc, #24]	; (8008f64 <vApplicationGetTimerTaskMemory+0x30>)
 8008f4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f52:	601a      	str	r2, [r3, #0]
}
 8008f54:	bf00      	nop
 8008f56:	3714      	adds	r7, #20
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr
 8008f60:	200003b8 	.word	0x200003b8
 8008f64:	20000414 	.word	0x20000414

08008f68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f103 0208 	add.w	r2, r3, #8
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f103 0208 	add.w	r2, r3, #8
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f103 0208 	add.w	r2, r3, #8
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f9c:	bf00      	nop
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008fb6:	bf00      	nop
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fc2:	b480      	push	{r7}
 8008fc4:	b085      	sub	sp, #20
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
 8008fca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	689a      	ldr	r2, [r3, #8]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	1c5a      	adds	r2, r3, #1
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	601a      	str	r2, [r3, #0]
}
 8008ffe:	bf00      	nop
 8009000:	3714      	adds	r7, #20
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr

0800900a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800900a:	b480      	push	{r7}
 800900c:	b085      	sub	sp, #20
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009020:	d103      	bne.n	800902a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	e00c      	b.n	8009044 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	3308      	adds	r3, #8
 800902e:	60fb      	str	r3, [r7, #12]
 8009030:	e002      	b.n	8009038 <vListInsert+0x2e>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	60fb      	str	r3, [r7, #12]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	429a      	cmp	r2, r3
 8009042:	d2f6      	bcs.n	8009032 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	685a      	ldr	r2, [r3, #4]
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	683a      	ldr	r2, [r7, #0]
 800905e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	1c5a      	adds	r2, r3, #1
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	601a      	str	r2, [r3, #0]
}
 8009070:	bf00      	nop
 8009072:	3714      	adds	r7, #20
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	6892      	ldr	r2, [r2, #8]
 8009092:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	6852      	ldr	r2, [r2, #4]
 800909c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d103      	bne.n	80090b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689a      	ldr	r2, [r3, #8]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	1e5a      	subs	r2, r3, #1
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d109      	bne.n	80090f8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80090e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e8:	f383 8811 	msr	BASEPRI, r3
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	60bb      	str	r3, [r7, #8]
 80090f6:	e7fe      	b.n	80090f6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80090f8:	f002 fa10 	bl	800b51c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009104:	68f9      	ldr	r1, [r7, #12]
 8009106:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009108:	fb01 f303 	mul.w	r3, r1, r3
 800910c:	441a      	add	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009128:	3b01      	subs	r3, #1
 800912a:	68f9      	ldr	r1, [r7, #12]
 800912c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800912e:	fb01 f303 	mul.w	r3, r1, r3
 8009132:	441a      	add	r2, r3
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	22ff      	movs	r2, #255	; 0xff
 800913c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	22ff      	movs	r2, #255	; 0xff
 8009144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d114      	bne.n	8009178 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d01a      	beq.n	800918c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	3310      	adds	r3, #16
 800915a:	4618      	mov	r0, r3
 800915c:	f001 fa86 	bl	800a66c <xTaskRemoveFromEventList>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d012      	beq.n	800918c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009166:	4b0d      	ldr	r3, [pc, #52]	; (800919c <xQueueGenericReset+0xcc>)
 8009168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	e009      	b.n	800918c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3310      	adds	r3, #16
 800917c:	4618      	mov	r0, r3
 800917e:	f7ff fef3 	bl	8008f68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	3324      	adds	r3, #36	; 0x24
 8009186:	4618      	mov	r0, r3
 8009188:	f7ff feee 	bl	8008f68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800918c:	f002 f9f4 	bl	800b578 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009190:	2301      	movs	r3, #1
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	e000ed04 	.word	0xe000ed04

080091a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b08e      	sub	sp, #56	; 0x38
 80091a4:	af02      	add	r7, sp, #8
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
 80091ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d109      	bne.n	80091c8 <xQueueGenericCreateStatic+0x28>
 80091b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b8:	f383 8811 	msr	BASEPRI, r3
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80091c6:	e7fe      	b.n	80091c6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d109      	bne.n	80091e2 <xQueueGenericCreateStatic+0x42>
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	627b      	str	r3, [r7, #36]	; 0x24
 80091e0:	e7fe      	b.n	80091e0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d002      	beq.n	80091ee <xQueueGenericCreateStatic+0x4e>
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <xQueueGenericCreateStatic+0x52>
 80091ee:	2301      	movs	r3, #1
 80091f0:	e000      	b.n	80091f4 <xQueueGenericCreateStatic+0x54>
 80091f2:	2300      	movs	r3, #0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d109      	bne.n	800920c <xQueueGenericCreateStatic+0x6c>
 80091f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	623b      	str	r3, [r7, #32]
 800920a:	e7fe      	b.n	800920a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d102      	bne.n	8009218 <xQueueGenericCreateStatic+0x78>
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d101      	bne.n	800921c <xQueueGenericCreateStatic+0x7c>
 8009218:	2301      	movs	r3, #1
 800921a:	e000      	b.n	800921e <xQueueGenericCreateStatic+0x7e>
 800921c:	2300      	movs	r3, #0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d109      	bne.n	8009236 <xQueueGenericCreateStatic+0x96>
 8009222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009226:	f383 8811 	msr	BASEPRI, r3
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	61fb      	str	r3, [r7, #28]
 8009234:	e7fe      	b.n	8009234 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009236:	2350      	movs	r3, #80	; 0x50
 8009238:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	2b50      	cmp	r3, #80	; 0x50
 800923e:	d009      	beq.n	8009254 <xQueueGenericCreateStatic+0xb4>
 8009240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	61bb      	str	r3, [r7, #24]
 8009252:	e7fe      	b.n	8009252 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009254:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800925a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00d      	beq.n	800927c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009268:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800926c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	4613      	mov	r3, r2
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	68b9      	ldr	r1, [r7, #8]
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f000 f844 	bl	8009304 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800927c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800927e:	4618      	mov	r0, r3
 8009280:	3730      	adds	r7, #48	; 0x30
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009286:	b580      	push	{r7, lr}
 8009288:	b08a      	sub	sp, #40	; 0x28
 800928a:	af02      	add	r7, sp, #8
 800928c:	60f8      	str	r0, [r7, #12]
 800928e:	60b9      	str	r1, [r7, #8]
 8009290:	4613      	mov	r3, r2
 8009292:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d109      	bne.n	80092ae <xQueueGenericCreate+0x28>
 800929a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	613b      	str	r3, [r7, #16]
 80092ac:	e7fe      	b.n	80092ac <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d102      	bne.n	80092ba <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80092b4:	2300      	movs	r3, #0
 80092b6:	61fb      	str	r3, [r7, #28]
 80092b8:	e004      	b.n	80092c4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	fb02 f303 	mul.w	r3, r2, r3
 80092c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	3350      	adds	r3, #80	; 0x50
 80092c8:	4618      	mov	r0, r3
 80092ca:	f002 fb25 	bl	800b918 <pvPortMalloc>
 80092ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d011      	beq.n	80092fa <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	3350      	adds	r3, #80	; 0x50
 80092de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092e8:	79fa      	ldrb	r2, [r7, #7]
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	9300      	str	r3, [sp, #0]
 80092ee:	4613      	mov	r3, r2
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	68b9      	ldr	r1, [r7, #8]
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f000 f805 	bl	8009304 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092fa:	69bb      	ldr	r3, [r7, #24]
	}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3720      	adds	r7, #32
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]
 8009310:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d103      	bne.n	8009320 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	69ba      	ldr	r2, [r7, #24]
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	e002      	b.n	8009326 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009332:	2101      	movs	r1, #1
 8009334:	69b8      	ldr	r0, [r7, #24]
 8009336:	f7ff fecb 	bl	80090d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	78fa      	ldrb	r2, [r7, #3]
 800933e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009342:	bf00      	nop
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
	...

0800934c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b08e      	sub	sp, #56	; 0x38
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
 8009358:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800935a:	2300      	movs	r3, #0
 800935c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009364:	2b00      	cmp	r3, #0
 8009366:	d109      	bne.n	800937c <xQueueGenericSend+0x30>
 8009368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936c:	f383 8811 	msr	BASEPRI, r3
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	62bb      	str	r3, [r7, #40]	; 0x28
 800937a:	e7fe      	b.n	800937a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d103      	bne.n	800938a <xQueueGenericSend+0x3e>
 8009382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009386:	2b00      	cmp	r3, #0
 8009388:	d101      	bne.n	800938e <xQueueGenericSend+0x42>
 800938a:	2301      	movs	r3, #1
 800938c:	e000      	b.n	8009390 <xQueueGenericSend+0x44>
 800938e:	2300      	movs	r3, #0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d109      	bne.n	80093a8 <xQueueGenericSend+0x5c>
 8009394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009398:	f383 8811 	msr	BASEPRI, r3
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	627b      	str	r3, [r7, #36]	; 0x24
 80093a6:	e7fe      	b.n	80093a6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d103      	bne.n	80093b6 <xQueueGenericSend+0x6a>
 80093ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d101      	bne.n	80093ba <xQueueGenericSend+0x6e>
 80093b6:	2301      	movs	r3, #1
 80093b8:	e000      	b.n	80093bc <xQueueGenericSend+0x70>
 80093ba:	2300      	movs	r3, #0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d109      	bne.n	80093d4 <xQueueGenericSend+0x88>
 80093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	623b      	str	r3, [r7, #32]
 80093d2:	e7fe      	b.n	80093d2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093d4:	f001 fb56 	bl	800aa84 <xTaskGetSchedulerState>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d102      	bne.n	80093e4 <xQueueGenericSend+0x98>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d101      	bne.n	80093e8 <xQueueGenericSend+0x9c>
 80093e4:	2301      	movs	r3, #1
 80093e6:	e000      	b.n	80093ea <xQueueGenericSend+0x9e>
 80093e8:	2300      	movs	r3, #0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d109      	bne.n	8009402 <xQueueGenericSend+0xb6>
 80093ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f2:	f383 8811 	msr	BASEPRI, r3
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	61fb      	str	r3, [r7, #28]
 8009400:	e7fe      	b.n	8009400 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009402:	f002 f88b 	bl	800b51c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800940a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800940e:	429a      	cmp	r2, r3
 8009410:	d302      	bcc.n	8009418 <xQueueGenericSend+0xcc>
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	2b02      	cmp	r3, #2
 8009416:	d129      	bne.n	800946c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	68b9      	ldr	r1, [r7, #8]
 800941c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800941e:	f000 fa7c 	bl	800991a <prvCopyDataToQueue>
 8009422:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009428:	2b00      	cmp	r3, #0
 800942a:	d010      	beq.n	800944e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800942c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942e:	3324      	adds	r3, #36	; 0x24
 8009430:	4618      	mov	r0, r3
 8009432:	f001 f91b 	bl	800a66c <xTaskRemoveFromEventList>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d013      	beq.n	8009464 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800943c:	4b3f      	ldr	r3, [pc, #252]	; (800953c <xQueueGenericSend+0x1f0>)
 800943e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	e00a      	b.n	8009464 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800944e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009450:	2b00      	cmp	r3, #0
 8009452:	d007      	beq.n	8009464 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009454:	4b39      	ldr	r3, [pc, #228]	; (800953c <xQueueGenericSend+0x1f0>)
 8009456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009464:	f002 f888 	bl	800b578 <vPortExitCritical>
				return pdPASS;
 8009468:	2301      	movs	r3, #1
 800946a:	e063      	b.n	8009534 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d103      	bne.n	800947a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009472:	f002 f881 	bl	800b578 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009476:	2300      	movs	r3, #0
 8009478:	e05c      	b.n	8009534 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800947a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800947c:	2b00      	cmp	r3, #0
 800947e:	d106      	bne.n	800948e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009480:	f107 0314 	add.w	r3, r7, #20
 8009484:	4618      	mov	r0, r3
 8009486:	f001 f955 	bl	800a734 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800948a:	2301      	movs	r3, #1
 800948c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800948e:	f002 f873 	bl	800b578 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009492:	f000 fe5f 	bl	800a154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009496:	f002 f841 	bl	800b51c <vPortEnterCritical>
 800949a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094a0:	b25b      	sxtb	r3, r3
 80094a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a6:	d103      	bne.n	80094b0 <xQueueGenericSend+0x164>
 80094a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094aa:	2200      	movs	r2, #0
 80094ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094b6:	b25b      	sxtb	r3, r3
 80094b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094bc:	d103      	bne.n	80094c6 <xQueueGenericSend+0x17a>
 80094be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094c6:	f002 f857 	bl	800b578 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094ca:	1d3a      	adds	r2, r7, #4
 80094cc:	f107 0314 	add.w	r3, r7, #20
 80094d0:	4611      	mov	r1, r2
 80094d2:	4618      	mov	r0, r3
 80094d4:	f001 f944 	bl	800a760 <xTaskCheckForTimeOut>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d124      	bne.n	8009528 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80094de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094e0:	f000 fb13 	bl	8009b0a <prvIsQueueFull>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d018      	beq.n	800951c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80094ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ec:	3310      	adds	r3, #16
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	4611      	mov	r1, r2
 80094f2:	4618      	mov	r0, r3
 80094f4:	f001 f86c 	bl	800a5d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80094f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094fa:	f000 fa9e 	bl	8009a3a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80094fe:	f000 fe6f 	bl	800a1e0 <xTaskResumeAll>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	f47f af7c 	bne.w	8009402 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800950a:	4b0c      	ldr	r3, [pc, #48]	; (800953c <xQueueGenericSend+0x1f0>)
 800950c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009510:	601a      	str	r2, [r3, #0]
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	e772      	b.n	8009402 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800951c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800951e:	f000 fa8c 	bl	8009a3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009522:	f000 fe5d 	bl	800a1e0 <xTaskResumeAll>
 8009526:	e76c      	b.n	8009402 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800952a:	f000 fa86 	bl	8009a3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800952e:	f000 fe57 	bl	800a1e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009532:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009534:	4618      	mov	r0, r3
 8009536:	3738      	adds	r7, #56	; 0x38
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	e000ed04 	.word	0xe000ed04

08009540 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b08e      	sub	sp, #56	; 0x38
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009554:	2b00      	cmp	r3, #0
 8009556:	d109      	bne.n	800956c <xQueueGenericSendFromISR+0x2c>
 8009558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955c:	f383 8811 	msr	BASEPRI, r3
 8009560:	f3bf 8f6f 	isb	sy
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	627b      	str	r3, [r7, #36]	; 0x24
 800956a:	e7fe      	b.n	800956a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d103      	bne.n	800957a <xQueueGenericSendFromISR+0x3a>
 8009572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009576:	2b00      	cmp	r3, #0
 8009578:	d101      	bne.n	800957e <xQueueGenericSendFromISR+0x3e>
 800957a:	2301      	movs	r3, #1
 800957c:	e000      	b.n	8009580 <xQueueGenericSendFromISR+0x40>
 800957e:	2300      	movs	r3, #0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d109      	bne.n	8009598 <xQueueGenericSendFromISR+0x58>
 8009584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009588:	f383 8811 	msr	BASEPRI, r3
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	f3bf 8f4f 	dsb	sy
 8009594:	623b      	str	r3, [r7, #32]
 8009596:	e7fe      	b.n	8009596 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	2b02      	cmp	r3, #2
 800959c:	d103      	bne.n	80095a6 <xQueueGenericSendFromISR+0x66>
 800959e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d101      	bne.n	80095aa <xQueueGenericSendFromISR+0x6a>
 80095a6:	2301      	movs	r3, #1
 80095a8:	e000      	b.n	80095ac <xQueueGenericSendFromISR+0x6c>
 80095aa:	2300      	movs	r3, #0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d109      	bne.n	80095c4 <xQueueGenericSendFromISR+0x84>
 80095b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	61fb      	str	r3, [r7, #28]
 80095c2:	e7fe      	b.n	80095c2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095c4:	f002 f96a 	bl	800b89c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80095c8:	f3ef 8211 	mrs	r2, BASEPRI
 80095cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d0:	f383 8811 	msr	BASEPRI, r3
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	61ba      	str	r2, [r7, #24]
 80095de:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80095e0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d302      	bcc.n	80095f6 <xQueueGenericSendFromISR+0xb6>
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	d12c      	bne.n	8009650 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80095f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	68b9      	ldr	r1, [r7, #8]
 8009604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009606:	f000 f988 	bl	800991a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800960a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800960e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009612:	d112      	bne.n	800963a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	2b00      	cmp	r3, #0
 800961a:	d016      	beq.n	800964a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800961c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961e:	3324      	adds	r3, #36	; 0x24
 8009620:	4618      	mov	r0, r3
 8009622:	f001 f823 	bl	800a66c <xTaskRemoveFromEventList>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00e      	beq.n	800964a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00b      	beq.n	800964a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	601a      	str	r2, [r3, #0]
 8009638:	e007      	b.n	800964a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800963a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800963e:	3301      	adds	r3, #1
 8009640:	b2db      	uxtb	r3, r3
 8009642:	b25a      	sxtb	r2, r3
 8009644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800964a:	2301      	movs	r3, #1
 800964c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800964e:	e001      	b.n	8009654 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009650:	2300      	movs	r3, #0
 8009652:	637b      	str	r3, [r7, #52]	; 0x34
 8009654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009656:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800965e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009660:	4618      	mov	r0, r3
 8009662:	3738      	adds	r7, #56	; 0x38
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b08c      	sub	sp, #48	; 0x30
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009674:	2300      	movs	r3, #0
 8009676:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967e:	2b00      	cmp	r3, #0
 8009680:	d109      	bne.n	8009696 <xQueueReceive+0x2e>
	__asm volatile
 8009682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009686:	f383 8811 	msr	BASEPRI, r3
 800968a:	f3bf 8f6f 	isb	sy
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	623b      	str	r3, [r7, #32]
 8009694:	e7fe      	b.n	8009694 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d103      	bne.n	80096a4 <xQueueReceive+0x3c>
 800969c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d101      	bne.n	80096a8 <xQueueReceive+0x40>
 80096a4:	2301      	movs	r3, #1
 80096a6:	e000      	b.n	80096aa <xQueueReceive+0x42>
 80096a8:	2300      	movs	r3, #0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d109      	bne.n	80096c2 <xQueueReceive+0x5a>
 80096ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	61fb      	str	r3, [r7, #28]
 80096c0:	e7fe      	b.n	80096c0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80096c2:	f001 f9df 	bl	800aa84 <xTaskGetSchedulerState>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d102      	bne.n	80096d2 <xQueueReceive+0x6a>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d101      	bne.n	80096d6 <xQueueReceive+0x6e>
 80096d2:	2301      	movs	r3, #1
 80096d4:	e000      	b.n	80096d8 <xQueueReceive+0x70>
 80096d6:	2300      	movs	r3, #0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d109      	bne.n	80096f0 <xQueueReceive+0x88>
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	61bb      	str	r3, [r7, #24]
 80096ee:	e7fe      	b.n	80096ee <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80096f0:	f001 ff14 	bl	800b51c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d01f      	beq.n	8009740 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009700:	68b9      	ldr	r1, [r7, #8]
 8009702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009704:	f000 f973 	bl	80099ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	1e5a      	subs	r2, r3, #1
 800970c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00f      	beq.n	8009738 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971a:	3310      	adds	r3, #16
 800971c:	4618      	mov	r0, r3
 800971e:	f000 ffa5 	bl	800a66c <xTaskRemoveFromEventList>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d007      	beq.n	8009738 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009728:	4b3c      	ldr	r3, [pc, #240]	; (800981c <xQueueReceive+0x1b4>)
 800972a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800972e:	601a      	str	r2, [r3, #0]
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009738:	f001 ff1e 	bl	800b578 <vPortExitCritical>
				return pdPASS;
 800973c:	2301      	movs	r3, #1
 800973e:	e069      	b.n	8009814 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d103      	bne.n	800974e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009746:	f001 ff17 	bl	800b578 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800974a:	2300      	movs	r3, #0
 800974c:	e062      	b.n	8009814 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800974e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009750:	2b00      	cmp	r3, #0
 8009752:	d106      	bne.n	8009762 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009754:	f107 0310 	add.w	r3, r7, #16
 8009758:	4618      	mov	r0, r3
 800975a:	f000 ffeb 	bl	800a734 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800975e:	2301      	movs	r3, #1
 8009760:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009762:	f001 ff09 	bl	800b578 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009766:	f000 fcf5 	bl	800a154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800976a:	f001 fed7 	bl	800b51c <vPortEnterCritical>
 800976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009770:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009774:	b25b      	sxtb	r3, r3
 8009776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977a:	d103      	bne.n	8009784 <xQueueReceive+0x11c>
 800977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009786:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800978a:	b25b      	sxtb	r3, r3
 800978c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009790:	d103      	bne.n	800979a <xQueueReceive+0x132>
 8009792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009794:	2200      	movs	r2, #0
 8009796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800979a:	f001 feed 	bl	800b578 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800979e:	1d3a      	adds	r2, r7, #4
 80097a0:	f107 0310 	add.w	r3, r7, #16
 80097a4:	4611      	mov	r1, r2
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 ffda 	bl	800a760 <xTaskCheckForTimeOut>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d123      	bne.n	80097fa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097b4:	f000 f993 	bl	8009ade <prvIsQueueEmpty>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d017      	beq.n	80097ee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80097be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c0:	3324      	adds	r3, #36	; 0x24
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	4611      	mov	r1, r2
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 ff02 	bl	800a5d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097ce:	f000 f934 	bl	8009a3a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80097d2:	f000 fd05 	bl	800a1e0 <xTaskResumeAll>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d189      	bne.n	80096f0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80097dc:	4b0f      	ldr	r3, [pc, #60]	; (800981c <xQueueReceive+0x1b4>)
 80097de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097e2:	601a      	str	r2, [r3, #0]
 80097e4:	f3bf 8f4f 	dsb	sy
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	e780      	b.n	80096f0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80097ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097f0:	f000 f923 	bl	8009a3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097f4:	f000 fcf4 	bl	800a1e0 <xTaskResumeAll>
 80097f8:	e77a      	b.n	80096f0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80097fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097fc:	f000 f91d 	bl	8009a3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009800:	f000 fcee 	bl	800a1e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009806:	f000 f96a 	bl	8009ade <prvIsQueueEmpty>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	f43f af6f 	beq.w	80096f0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009812:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009814:	4618      	mov	r0, r3
 8009816:	3730      	adds	r7, #48	; 0x30
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	e000ed04 	.word	0xe000ed04

08009820 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b08e      	sub	sp, #56	; 0x38
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009832:	2b00      	cmp	r3, #0
 8009834:	d109      	bne.n	800984a <xQueueReceiveFromISR+0x2a>
 8009836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	623b      	str	r3, [r7, #32]
 8009848:	e7fe      	b.n	8009848 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d103      	bne.n	8009858 <xQueueReceiveFromISR+0x38>
 8009850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009854:	2b00      	cmp	r3, #0
 8009856:	d101      	bne.n	800985c <xQueueReceiveFromISR+0x3c>
 8009858:	2301      	movs	r3, #1
 800985a:	e000      	b.n	800985e <xQueueReceiveFromISR+0x3e>
 800985c:	2300      	movs	r3, #0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d109      	bne.n	8009876 <xQueueReceiveFromISR+0x56>
 8009862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	61fb      	str	r3, [r7, #28]
 8009874:	e7fe      	b.n	8009874 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009876:	f002 f811 	bl	800b89c <vPortValidateInterruptPriority>
	__asm volatile
 800987a:	f3ef 8211 	mrs	r2, BASEPRI
 800987e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	61ba      	str	r2, [r7, #24]
 8009890:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009892:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009894:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d02f      	beq.n	8009902 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80098a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098ac:	68b9      	ldr	r1, [r7, #8]
 80098ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098b0:	f000 f89d 	bl	80099ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b6:	1e5a      	subs	r2, r3, #1
 80098b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80098bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c4:	d112      	bne.n	80098ec <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d016      	beq.n	80098fc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d0:	3310      	adds	r3, #16
 80098d2:	4618      	mov	r0, r3
 80098d4:	f000 feca 	bl	800a66c <xTaskRemoveFromEventList>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00e      	beq.n	80098fc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00b      	beq.n	80098fc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	601a      	str	r2, [r3, #0]
 80098ea:	e007      	b.n	80098fc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80098ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098f0:	3301      	adds	r3, #1
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	b25a      	sxtb	r2, r3
 80098f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80098fc:	2301      	movs	r3, #1
 80098fe:	637b      	str	r3, [r7, #52]	; 0x34
 8009900:	e001      	b.n	8009906 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8009902:	2300      	movs	r3, #0
 8009904:	637b      	str	r3, [r7, #52]	; 0x34
 8009906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009908:	613b      	str	r3, [r7, #16]
	__asm volatile
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009912:	4618      	mov	r0, r3
 8009914:	3738      	adds	r7, #56	; 0x38
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b086      	sub	sp, #24
 800991e:	af00      	add	r7, sp, #0
 8009920:	60f8      	str	r0, [r7, #12]
 8009922:	60b9      	str	r1, [r7, #8]
 8009924:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009926:	2300      	movs	r3, #0
 8009928:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10d      	bne.n	8009954 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d14d      	bne.n	80099dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	4618      	mov	r0, r3
 8009946:	f001 f8bb 	bl	800aac0 <xTaskPriorityDisinherit>
 800994a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2200      	movs	r2, #0
 8009950:	609a      	str	r2, [r3, #8]
 8009952:	e043      	b.n	80099dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d119      	bne.n	800998e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6858      	ldr	r0, [r3, #4]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009962:	461a      	mov	r2, r3
 8009964:	68b9      	ldr	r1, [r7, #8]
 8009966:	f002 fce9 	bl	800c33c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009972:	441a      	add	r2, r3
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	685a      	ldr	r2, [r3, #4]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	429a      	cmp	r2, r3
 8009982:	d32b      	bcc.n	80099dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	605a      	str	r2, [r3, #4]
 800998c:	e026      	b.n	80099dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	68d8      	ldr	r0, [r3, #12]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009996:	461a      	mov	r2, r3
 8009998:	68b9      	ldr	r1, [r7, #8]
 800999a:	f002 fccf 	bl	800c33c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	68da      	ldr	r2, [r3, #12]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a6:	425b      	negs	r3, r3
 80099a8:	441a      	add	r2, r3
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	68da      	ldr	r2, [r3, #12]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d207      	bcs.n	80099ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	689a      	ldr	r2, [r3, #8]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c2:	425b      	negs	r3, r3
 80099c4:	441a      	add	r2, r3
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d105      	bne.n	80099dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d002      	beq.n	80099dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	3b01      	subs	r3, #1
 80099da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80099e4:	697b      	ldr	r3, [r7, #20]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b082      	sub	sp, #8
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d018      	beq.n	8009a32 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	68da      	ldr	r2, [r3, #12]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a08:	441a      	add	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	68da      	ldr	r2, [r3, #12]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d303      	bcc.n	8009a22 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	68d9      	ldr	r1, [r3, #12]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	6838      	ldr	r0, [r7, #0]
 8009a2e:	f002 fc85 	bl	800c33c <memcpy>
	}
}
 8009a32:	bf00      	nop
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b084      	sub	sp, #16
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a42:	f001 fd6b 	bl	800b51c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a4c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a4e:	e011      	b.n	8009a74 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d012      	beq.n	8009a7e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	3324      	adds	r3, #36	; 0x24
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f000 fe05 	bl	800a66c <xTaskRemoveFromEventList>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a68:	f000 feda 	bl	800a820 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	dce9      	bgt.n	8009a50 <prvUnlockQueue+0x16>
 8009a7c:	e000      	b.n	8009a80 <prvUnlockQueue+0x46>
					break;
 8009a7e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	22ff      	movs	r2, #255	; 0xff
 8009a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009a88:	f001 fd76 	bl	800b578 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009a8c:	f001 fd46 	bl	800b51c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a96:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a98:	e011      	b.n	8009abe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d012      	beq.n	8009ac8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	3310      	adds	r3, #16
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f000 fde0 	bl	800a66c <xTaskRemoveFromEventList>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d001      	beq.n	8009ab6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009ab2:	f000 feb5 	bl	800a820 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009ab6:	7bbb      	ldrb	r3, [r7, #14]
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009abe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	dce9      	bgt.n	8009a9a <prvUnlockQueue+0x60>
 8009ac6:	e000      	b.n	8009aca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009ac8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	22ff      	movs	r2, #255	; 0xff
 8009ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009ad2:	f001 fd51 	bl	800b578 <vPortExitCritical>
}
 8009ad6:	bf00      	nop
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b084      	sub	sp, #16
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ae6:	f001 fd19 	bl	800b51c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d102      	bne.n	8009af8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009af2:	2301      	movs	r3, #1
 8009af4:	60fb      	str	r3, [r7, #12]
 8009af6:	e001      	b.n	8009afc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009af8:	2300      	movs	r3, #0
 8009afa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009afc:	f001 fd3c 	bl	800b578 <vPortExitCritical>

	return xReturn;
 8009b00:	68fb      	ldr	r3, [r7, #12]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b084      	sub	sp, #16
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b12:	f001 fd03 	bl	800b51c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d102      	bne.n	8009b28 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009b22:	2301      	movs	r3, #1
 8009b24:	60fb      	str	r3, [r7, #12]
 8009b26:	e001      	b.n	8009b2c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b2c:	f001 fd24 	bl	800b578 <vPortExitCritical>

	return xReturn;
 8009b30:	68fb      	ldr	r3, [r7, #12]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
	...

08009b3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b46:	2300      	movs	r3, #0
 8009b48:	60fb      	str	r3, [r7, #12]
 8009b4a:	e014      	b.n	8009b76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009b4c:	4a0e      	ldr	r2, [pc, #56]	; (8009b88 <vQueueAddToRegistry+0x4c>)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10b      	bne.n	8009b70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009b58:	490b      	ldr	r1, [pc, #44]	; (8009b88 <vQueueAddToRegistry+0x4c>)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	683a      	ldr	r2, [r7, #0]
 8009b5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009b62:	4a09      	ldr	r2, [pc, #36]	; (8009b88 <vQueueAddToRegistry+0x4c>)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	00db      	lsls	r3, r3, #3
 8009b68:	4413      	add	r3, r2
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009b6e:	e005      	b.n	8009b7c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	3301      	adds	r3, #1
 8009b74:	60fb      	str	r3, [r7, #12]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2b07      	cmp	r3, #7
 8009b7a:	d9e7      	bls.n	8009b4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009b7c:	bf00      	nop
 8009b7e:	3714      	adds	r7, #20
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr
 8009b88:	20004c6c 	.word	0x20004c6c

08009b8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009b9c:	f001 fcbe 	bl	800b51c <vPortEnterCritical>
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ba6:	b25b      	sxtb	r3, r3
 8009ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bac:	d103      	bne.n	8009bb6 <vQueueWaitForMessageRestricted+0x2a>
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bbc:	b25b      	sxtb	r3, r3
 8009bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc2:	d103      	bne.n	8009bcc <vQueueWaitForMessageRestricted+0x40>
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bcc:	f001 fcd4 	bl	800b578 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d106      	bne.n	8009be6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	3324      	adds	r3, #36	; 0x24
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	68b9      	ldr	r1, [r7, #8]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f000 fd19 	bl	800a618 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009be6:	6978      	ldr	r0, [r7, #20]
 8009be8:	f7ff ff27 	bl	8009a3a <prvUnlockQueue>
	}
 8009bec:	bf00      	nop
 8009bee:	3718      	adds	r7, #24
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b08e      	sub	sp, #56	; 0x38
 8009bf8:	af04      	add	r7, sp, #16
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
 8009c00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d109      	bne.n	8009c1c <xTaskCreateStatic+0x28>
	__asm volatile
 8009c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0c:	f383 8811 	msr	BASEPRI, r3
 8009c10:	f3bf 8f6f 	isb	sy
 8009c14:	f3bf 8f4f 	dsb	sy
 8009c18:	623b      	str	r3, [r7, #32]
 8009c1a:	e7fe      	b.n	8009c1a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d109      	bne.n	8009c36 <xTaskCreateStatic+0x42>
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	61fb      	str	r3, [r7, #28]
 8009c34:	e7fe      	b.n	8009c34 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009c36:	235c      	movs	r3, #92	; 0x5c
 8009c38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	2b5c      	cmp	r3, #92	; 0x5c
 8009c3e:	d009      	beq.n	8009c54 <xTaskCreateStatic+0x60>
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	61bb      	str	r3, [r7, #24]
 8009c52:	e7fe      	b.n	8009c52 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009c54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d01e      	beq.n	8009c9a <xTaskCreateStatic+0xa6>
 8009c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d01b      	beq.n	8009c9a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c64:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c6a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6e:	2202      	movs	r2, #2
 8009c70:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009c74:	2300      	movs	r3, #0
 8009c76:	9303      	str	r3, [sp, #12]
 8009c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7a:	9302      	str	r3, [sp, #8]
 8009c7c:	f107 0314 	add.w	r3, r7, #20
 8009c80:	9301      	str	r3, [sp, #4]
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	68b9      	ldr	r1, [r7, #8]
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f000 f850 	bl	8009d32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c94:	f000 f8dc 	bl	8009e50 <prvAddNewTaskToReadyList>
 8009c98:	e001      	b.n	8009c9e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009c9e:	697b      	ldr	r3, [r7, #20]
	}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3728      	adds	r7, #40	; 0x28
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b08c      	sub	sp, #48	; 0x30
 8009cac:	af04      	add	r7, sp, #16
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	603b      	str	r3, [r7, #0]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009cb8:	88fb      	ldrh	r3, [r7, #6]
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f001 fe2b 	bl	800b918 <pvPortMalloc>
 8009cc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00e      	beq.n	8009ce8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009cca:	205c      	movs	r0, #92	; 0x5c
 8009ccc:	f001 fe24 	bl	800b918 <pvPortMalloc>
 8009cd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d003      	beq.n	8009ce0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	697a      	ldr	r2, [r7, #20]
 8009cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8009cde:	e005      	b.n	8009cec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ce0:	6978      	ldr	r0, [r7, #20]
 8009ce2:	f001 fedb 	bl	800ba9c <vPortFree>
 8009ce6:	e001      	b.n	8009cec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d017      	beq.n	8009d22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009cfa:	88fa      	ldrh	r2, [r7, #6]
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	9303      	str	r3, [sp, #12]
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	9302      	str	r3, [sp, #8]
 8009d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d06:	9301      	str	r3, [sp, #4]
 8009d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	68b9      	ldr	r1, [r7, #8]
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 f80e 	bl	8009d32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d16:	69f8      	ldr	r0, [r7, #28]
 8009d18:	f000 f89a 	bl	8009e50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	61bb      	str	r3, [r7, #24]
 8009d20:	e002      	b.n	8009d28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d22:	f04f 33ff 	mov.w	r3, #4294967295
 8009d26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009d28:	69bb      	ldr	r3, [r7, #24]
	}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3720      	adds	r7, #32
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b088      	sub	sp, #32
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	60f8      	str	r0, [r7, #12]
 8009d3a:	60b9      	str	r1, [r7, #8]
 8009d3c:	607a      	str	r2, [r7, #4]
 8009d3e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d42:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	461a      	mov	r2, r3
 8009d4a:	21a5      	movs	r1, #165	; 0xa5
 8009d4c:	f002 fb01 	bl	800c352 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4413      	add	r3, r2
 8009d60:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	f023 0307 	bic.w	r3, r3, #7
 8009d68:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	f003 0307 	and.w	r3, r3, #7
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d009      	beq.n	8009d88 <prvInitialiseNewTask+0x56>
 8009d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d78:	f383 8811 	msr	BASEPRI, r3
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	617b      	str	r3, [r7, #20]
 8009d86:	e7fe      	b.n	8009d86 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d01f      	beq.n	8009dce <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d8e:	2300      	movs	r3, #0
 8009d90:	61fb      	str	r3, [r7, #28]
 8009d92:	e012      	b.n	8009dba <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	4413      	add	r3, r2
 8009d9a:	7819      	ldrb	r1, [r3, #0]
 8009d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d9e:	69fb      	ldr	r3, [r7, #28]
 8009da0:	4413      	add	r3, r2
 8009da2:	3334      	adds	r3, #52	; 0x34
 8009da4:	460a      	mov	r2, r1
 8009da6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	4413      	add	r3, r2
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d006      	beq.n	8009dc2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	3301      	adds	r3, #1
 8009db8:	61fb      	str	r3, [r7, #28]
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	2b0f      	cmp	r3, #15
 8009dbe:	d9e9      	bls.n	8009d94 <prvInitialiseNewTask+0x62>
 8009dc0:	e000      	b.n	8009dc4 <prvInitialiseNewTask+0x92>
			{
				break;
 8009dc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009dcc:	e003      	b.n	8009dd6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd8:	2b37      	cmp	r3, #55	; 0x37
 8009dda:	d901      	bls.n	8009de0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ddc:	2337      	movs	r3, #55	; 0x37
 8009dde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009de4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dee:	2200      	movs	r2, #0
 8009df0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df4:	3304      	adds	r3, #4
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7ff f8d6 	bl	8008fa8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfe:	3318      	adds	r3, #24
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7ff f8d1 	bl	8008fa8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1e:	2200      	movs	r2, #0
 8009e20:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e2a:	683a      	ldr	r2, [r7, #0]
 8009e2c:	68f9      	ldr	r1, [r7, #12]
 8009e2e:	69b8      	ldr	r0, [r7, #24]
 8009e30:	f001 fa4c 	bl	800b2cc <pxPortInitialiseStack>
 8009e34:	4602      	mov	r2, r0
 8009e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d002      	beq.n	8009e46 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e46:	bf00      	nop
 8009e48:	3720      	adds	r7, #32
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
	...

08009e50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e58:	f001 fb60 	bl	800b51c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e5c:	4b2d      	ldr	r3, [pc, #180]	; (8009f14 <prvAddNewTaskToReadyList+0xc4>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	3301      	adds	r3, #1
 8009e62:	4a2c      	ldr	r2, [pc, #176]	; (8009f14 <prvAddNewTaskToReadyList+0xc4>)
 8009e64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e66:	4b2c      	ldr	r3, [pc, #176]	; (8009f18 <prvAddNewTaskToReadyList+0xc8>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d109      	bne.n	8009e82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009e6e:	4a2a      	ldr	r2, [pc, #168]	; (8009f18 <prvAddNewTaskToReadyList+0xc8>)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e74:	4b27      	ldr	r3, [pc, #156]	; (8009f14 <prvAddNewTaskToReadyList+0xc4>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d110      	bne.n	8009e9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009e7c:	f000 fd48 	bl	800a910 <prvInitialiseTaskLists>
 8009e80:	e00d      	b.n	8009e9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e82:	4b26      	ldr	r3, [pc, #152]	; (8009f1c <prvAddNewTaskToReadyList+0xcc>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d109      	bne.n	8009e9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e8a:	4b23      	ldr	r3, [pc, #140]	; (8009f18 <prvAddNewTaskToReadyList+0xc8>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d802      	bhi.n	8009e9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009e98:	4a1f      	ldr	r2, [pc, #124]	; (8009f18 <prvAddNewTaskToReadyList+0xc8>)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009e9e:	4b20      	ldr	r3, [pc, #128]	; (8009f20 <prvAddNewTaskToReadyList+0xd0>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	4a1e      	ldr	r2, [pc, #120]	; (8009f20 <prvAddNewTaskToReadyList+0xd0>)
 8009ea6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ea8:	4b1d      	ldr	r3, [pc, #116]	; (8009f20 <prvAddNewTaskToReadyList+0xd0>)
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb4:	4b1b      	ldr	r3, [pc, #108]	; (8009f24 <prvAddNewTaskToReadyList+0xd4>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d903      	bls.n	8009ec4 <prvAddNewTaskToReadyList+0x74>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec0:	4a18      	ldr	r2, [pc, #96]	; (8009f24 <prvAddNewTaskToReadyList+0xd4>)
 8009ec2:	6013      	str	r3, [r2, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec8:	4613      	mov	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	4413      	add	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4a15      	ldr	r2, [pc, #84]	; (8009f28 <prvAddNewTaskToReadyList+0xd8>)
 8009ed2:	441a      	add	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	3304      	adds	r3, #4
 8009ed8:	4619      	mov	r1, r3
 8009eda:	4610      	mov	r0, r2
 8009edc:	f7ff f871 	bl	8008fc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ee0:	f001 fb4a 	bl	800b578 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ee4:	4b0d      	ldr	r3, [pc, #52]	; (8009f1c <prvAddNewTaskToReadyList+0xcc>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00e      	beq.n	8009f0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009eec:	4b0a      	ldr	r3, [pc, #40]	; (8009f18 <prvAddNewTaskToReadyList+0xc8>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d207      	bcs.n	8009f0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009efa:	4b0c      	ldr	r3, [pc, #48]	; (8009f2c <prvAddNewTaskToReadyList+0xdc>)
 8009efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f00:	601a      	str	r2, [r3, #0]
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f0a:	bf00      	nop
 8009f0c:	3708      	adds	r7, #8
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	20000ce8 	.word	0x20000ce8
 8009f18:	20000814 	.word	0x20000814
 8009f1c:	20000cf4 	.word	0x20000cf4
 8009f20:	20000d04 	.word	0x20000d04
 8009f24:	20000cf0 	.word	0x20000cf0
 8009f28:	20000818 	.word	0x20000818
 8009f2c:	e000ed04 	.word	0xe000ed04

08009f30 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b08a      	sub	sp, #40	; 0x28
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d109      	bne.n	8009f58 <vTaskDelayUntil+0x28>
 8009f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	617b      	str	r3, [r7, #20]
 8009f56:	e7fe      	b.n	8009f56 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d109      	bne.n	8009f72 <vTaskDelayUntil+0x42>
 8009f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	613b      	str	r3, [r7, #16]
 8009f70:	e7fe      	b.n	8009f70 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8009f72:	4b29      	ldr	r3, [pc, #164]	; (800a018 <vTaskDelayUntil+0xe8>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d009      	beq.n	8009f8e <vTaskDelayUntil+0x5e>
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	60fb      	str	r3, [r7, #12]
 8009f8c:	e7fe      	b.n	8009f8c <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8009f8e:	f000 f8e1 	bl	800a154 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009f92:	4b22      	ldr	r3, [pc, #136]	; (800a01c <vTaskDelayUntil+0xec>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	6a3a      	ldr	r2, [r7, #32]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d20b      	bcs.n	8009fc4 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	69fa      	ldr	r2, [r7, #28]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d211      	bcs.n	8009fda <vTaskDelayUntil+0xaa>
 8009fb6:	69fa      	ldr	r2, [r7, #28]
 8009fb8:	6a3b      	ldr	r3, [r7, #32]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d90d      	bls.n	8009fda <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8009fc2:	e00a      	b.n	8009fda <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	69fa      	ldr	r2, [r7, #28]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d303      	bcc.n	8009fd6 <vTaskDelayUntil+0xa6>
 8009fce:	69fa      	ldr	r2, [r7, #28]
 8009fd0:	6a3b      	ldr	r3, [r7, #32]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d901      	bls.n	8009fda <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	69fa      	ldr	r2, [r7, #28]
 8009fde:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d006      	beq.n	8009ff4 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009fe6:	69fa      	ldr	r2, [r7, #28]
 8009fe8:	6a3b      	ldr	r3, [r7, #32]
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	2100      	movs	r1, #0
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 fdd2 	bl	800ab98 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009ff4:	f000 f8f4 	bl	800a1e0 <xTaskResumeAll>
 8009ff8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d107      	bne.n	800a010 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800a000:	4b07      	ldr	r3, [pc, #28]	; (800a020 <vTaskDelayUntil+0xf0>)
 800a002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a006:	601a      	str	r2, [r3, #0]
 800a008:	f3bf 8f4f 	dsb	sy
 800a00c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a010:	bf00      	nop
 800a012:	3728      	adds	r7, #40	; 0x28
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	20000d10 	.word	0x20000d10
 800a01c:	20000cec 	.word	0x20000cec
 800a020:	e000ed04 	.word	0xe000ed04

0800a024 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a02c:	2300      	movs	r3, #0
 800a02e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d016      	beq.n	800a064 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a036:	4b13      	ldr	r3, [pc, #76]	; (800a084 <vTaskDelay+0x60>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d009      	beq.n	800a052 <vTaskDelay+0x2e>
 800a03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	60bb      	str	r3, [r7, #8]
 800a050:	e7fe      	b.n	800a050 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a052:	f000 f87f 	bl	800a154 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a056:	2100      	movs	r1, #0
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 fd9d 	bl	800ab98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a05e:	f000 f8bf 	bl	800a1e0 <xTaskResumeAll>
 800a062:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d107      	bne.n	800a07a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a06a:	4b07      	ldr	r3, [pc, #28]	; (800a088 <vTaskDelay+0x64>)
 800a06c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a070:	601a      	str	r2, [r3, #0]
 800a072:	f3bf 8f4f 	dsb	sy
 800a076:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a07a:	bf00      	nop
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	20000d10 	.word	0x20000d10
 800a088:	e000ed04 	.word	0xe000ed04

0800a08c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b08a      	sub	sp, #40	; 0x28
 800a090:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a092:	2300      	movs	r3, #0
 800a094:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a096:	2300      	movs	r3, #0
 800a098:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a09a:	463a      	mov	r2, r7
 800a09c:	1d39      	adds	r1, r7, #4
 800a09e:	f107 0308 	add.w	r3, r7, #8
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fe ff2c 	bl	8008f00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a0a8:	6839      	ldr	r1, [r7, #0]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	9202      	str	r2, [sp, #8]
 800a0b0:	9301      	str	r3, [sp, #4]
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	460a      	mov	r2, r1
 800a0ba:	4920      	ldr	r1, [pc, #128]	; (800a13c <vTaskStartScheduler+0xb0>)
 800a0bc:	4820      	ldr	r0, [pc, #128]	; (800a140 <vTaskStartScheduler+0xb4>)
 800a0be:	f7ff fd99 	bl	8009bf4 <xTaskCreateStatic>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	4b1f      	ldr	r3, [pc, #124]	; (800a144 <vTaskStartScheduler+0xb8>)
 800a0c6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a0c8:	4b1e      	ldr	r3, [pc, #120]	; (800a144 <vTaskStartScheduler+0xb8>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d002      	beq.n	800a0d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	617b      	str	r3, [r7, #20]
 800a0d4:	e001      	b.n	800a0da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d102      	bne.n	800a0e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a0e0:	f000 fdae 	bl	800ac40 <xTimerCreateTimerTask>
 800a0e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d115      	bne.n	800a118 <vTaskStartScheduler+0x8c>
 800a0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a0fe:	4b12      	ldr	r3, [pc, #72]	; (800a148 <vTaskStartScheduler+0xbc>)
 800a100:	f04f 32ff 	mov.w	r2, #4294967295
 800a104:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a106:	4b11      	ldr	r3, [pc, #68]	; (800a14c <vTaskStartScheduler+0xc0>)
 800a108:	2201      	movs	r2, #1
 800a10a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a10c:	4b10      	ldr	r3, [pc, #64]	; (800a150 <vTaskStartScheduler+0xc4>)
 800a10e:	2200      	movs	r2, #0
 800a110:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a112:	f001 f965 	bl	800b3e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a116:	e00d      	b.n	800a134 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a11e:	d109      	bne.n	800a134 <vTaskStartScheduler+0xa8>
 800a120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	60fb      	str	r3, [r7, #12]
 800a132:	e7fe      	b.n	800a132 <vTaskStartScheduler+0xa6>
}
 800a134:	bf00      	nop
 800a136:	3718      	adds	r7, #24
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	0800c564 	.word	0x0800c564
 800a140:	0800a839 	.word	0x0800a839
 800a144:	20000d0c 	.word	0x20000d0c
 800a148:	20000d08 	.word	0x20000d08
 800a14c:	20000cf4 	.word	0x20000cf4
 800a150:	20000cec 	.word	0x20000cec

0800a154 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a154:	b480      	push	{r7}
 800a156:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a158:	4b04      	ldr	r3, [pc, #16]	; (800a16c <vTaskSuspendAll+0x18>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	3301      	adds	r3, #1
 800a15e:	4a03      	ldr	r2, [pc, #12]	; (800a16c <vTaskSuspendAll+0x18>)
 800a160:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a162:	bf00      	nop
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	20000d10 	.word	0x20000d10

0800a170 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800a176:	2300      	movs	r3, #0
 800a178:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800a17a:	4b14      	ldr	r3, [pc, #80]	; (800a1cc <prvGetExpectedIdleTime+0x5c>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800a182:	2301      	movs	r3, #1
 800a184:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800a186:	4b12      	ldr	r3, [pc, #72]	; (800a1d0 <prvGetExpectedIdleTime+0x60>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d002      	beq.n	800a196 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800a190:	2300      	movs	r3, #0
 800a192:	607b      	str	r3, [r7, #4]
 800a194:	e012      	b.n	800a1bc <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800a196:	4b0f      	ldr	r3, [pc, #60]	; (800a1d4 <prvGetExpectedIdleTime+0x64>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d902      	bls.n	800a1a4 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	607b      	str	r3, [r7, #4]
 800a1a2:	e00b      	b.n	800a1bc <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d002      	beq.n	800a1b0 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	607b      	str	r3, [r7, #4]
 800a1ae:	e005      	b.n	800a1bc <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800a1b0:	4b09      	ldr	r3, [pc, #36]	; (800a1d8 <prvGetExpectedIdleTime+0x68>)
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	4b09      	ldr	r3, [pc, #36]	; (800a1dc <prvGetExpectedIdleTime+0x6c>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800a1bc:	687b      	ldr	r3, [r7, #4]
	}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	370c      	adds	r7, #12
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	20000cf0 	.word	0x20000cf0
 800a1d0:	20000814 	.word	0x20000814
 800a1d4:	20000818 	.word	0x20000818
 800a1d8:	20000d08 	.word	0x20000d08
 800a1dc:	20000cec 	.word	0x20000cec

0800a1e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a1ee:	4b41      	ldr	r3, [pc, #260]	; (800a2f4 <xTaskResumeAll+0x114>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d109      	bne.n	800a20a <xTaskResumeAll+0x2a>
 800a1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	603b      	str	r3, [r7, #0]
 800a208:	e7fe      	b.n	800a208 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a20a:	f001 f987 	bl	800b51c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a20e:	4b39      	ldr	r3, [pc, #228]	; (800a2f4 <xTaskResumeAll+0x114>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	3b01      	subs	r3, #1
 800a214:	4a37      	ldr	r2, [pc, #220]	; (800a2f4 <xTaskResumeAll+0x114>)
 800a216:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a218:	4b36      	ldr	r3, [pc, #216]	; (800a2f4 <xTaskResumeAll+0x114>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d162      	bne.n	800a2e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a220:	4b35      	ldr	r3, [pc, #212]	; (800a2f8 <xTaskResumeAll+0x118>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d05e      	beq.n	800a2e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a228:	e02f      	b.n	800a28a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a22a:	4b34      	ldr	r3, [pc, #208]	; (800a2fc <xTaskResumeAll+0x11c>)
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	3318      	adds	r3, #24
 800a236:	4618      	mov	r0, r3
 800a238:	f7fe ff20 	bl	800907c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	3304      	adds	r3, #4
 800a240:	4618      	mov	r0, r3
 800a242:	f7fe ff1b 	bl	800907c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a24a:	4b2d      	ldr	r3, [pc, #180]	; (800a300 <xTaskResumeAll+0x120>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d903      	bls.n	800a25a <xTaskResumeAll+0x7a>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a256:	4a2a      	ldr	r2, [pc, #168]	; (800a300 <xTaskResumeAll+0x120>)
 800a258:	6013      	str	r3, [r2, #0]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a25e:	4613      	mov	r3, r2
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4413      	add	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4a27      	ldr	r2, [pc, #156]	; (800a304 <xTaskResumeAll+0x124>)
 800a268:	441a      	add	r2, r3
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3304      	adds	r3, #4
 800a26e:	4619      	mov	r1, r3
 800a270:	4610      	mov	r0, r2
 800a272:	f7fe fea6 	bl	8008fc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a27a:	4b23      	ldr	r3, [pc, #140]	; (800a308 <xTaskResumeAll+0x128>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a280:	429a      	cmp	r2, r3
 800a282:	d302      	bcc.n	800a28a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a284:	4b21      	ldr	r3, [pc, #132]	; (800a30c <xTaskResumeAll+0x12c>)
 800a286:	2201      	movs	r2, #1
 800a288:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a28a:	4b1c      	ldr	r3, [pc, #112]	; (800a2fc <xTaskResumeAll+0x11c>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1cb      	bne.n	800a22a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d001      	beq.n	800a29c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a298:	f000 fbd4 	bl	800aa44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a29c:	4b1c      	ldr	r3, [pc, #112]	; (800a310 <xTaskResumeAll+0x130>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d010      	beq.n	800a2ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a2a8:	f000 f87e 	bl	800a3a8 <xTaskIncrementTick>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d002      	beq.n	800a2b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a2b2:	4b16      	ldr	r3, [pc, #88]	; (800a30c <xTaskResumeAll+0x12c>)
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1f1      	bne.n	800a2a8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a2c4:	4b12      	ldr	r3, [pc, #72]	; (800a310 <xTaskResumeAll+0x130>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a2ca:	4b10      	ldr	r3, [pc, #64]	; (800a30c <xTaskResumeAll+0x12c>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d009      	beq.n	800a2e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a2d6:	4b0f      	ldr	r3, [pc, #60]	; (800a314 <xTaskResumeAll+0x134>)
 800a2d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2e6:	f001 f947 	bl	800b578 <vPortExitCritical>

	return xAlreadyYielded;
 800a2ea:	68bb      	ldr	r3, [r7, #8]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	20000d10 	.word	0x20000d10
 800a2f8:	20000ce8 	.word	0x20000ce8
 800a2fc:	20000ca8 	.word	0x20000ca8
 800a300:	20000cf0 	.word	0x20000cf0
 800a304:	20000818 	.word	0x20000818
 800a308:	20000814 	.word	0x20000814
 800a30c:	20000cfc 	.word	0x20000cfc
 800a310:	20000cf8 	.word	0x20000cf8
 800a314:	e000ed04 	.word	0xe000ed04

0800a318 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a31e:	4b05      	ldr	r3, [pc, #20]	; (800a334 <xTaskGetTickCount+0x1c>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a324:	687b      	ldr	r3, [r7, #4]
}
 800a326:	4618      	mov	r0, r3
 800a328:	370c      	adds	r7, #12
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop
 800a334:	20000cec 	.word	0x20000cec

0800a338 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a33e:	f001 faad 	bl	800b89c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a342:	2300      	movs	r3, #0
 800a344:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a346:	4b04      	ldr	r3, [pc, #16]	; (800a358 <xTaskGetTickCountFromISR+0x20>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a34c:	683b      	ldr	r3, [r7, #0]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	20000cec 	.word	0x20000cec

0800a35c <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800a364:	4b0e      	ldr	r3, [pc, #56]	; (800a3a0 <vTaskStepTick+0x44>)
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	441a      	add	r2, r3
 800a36c:	4b0d      	ldr	r3, [pc, #52]	; (800a3a4 <vTaskStepTick+0x48>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	429a      	cmp	r2, r3
 800a372:	d909      	bls.n	800a388 <vTaskStepTick+0x2c>
 800a374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	60fb      	str	r3, [r7, #12]
 800a386:	e7fe      	b.n	800a386 <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 800a388:	4b05      	ldr	r3, [pc, #20]	; (800a3a0 <vTaskStepTick+0x44>)
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4413      	add	r3, r2
 800a390:	4a03      	ldr	r2, [pc, #12]	; (800a3a0 <vTaskStepTick+0x44>)
 800a392:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800a394:	bf00      	nop
 800a396:	3714      	adds	r7, #20
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	20000cec 	.word	0x20000cec
 800a3a4:	20000d08 	.word	0x20000d08

0800a3a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b086      	sub	sp, #24
 800a3ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3b2:	4b4e      	ldr	r3, [pc, #312]	; (800a4ec <xTaskIncrementTick+0x144>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f040 8088 	bne.w	800a4cc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a3bc:	4b4c      	ldr	r3, [pc, #304]	; (800a4f0 <xTaskIncrementTick+0x148>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a3c4:	4a4a      	ldr	r2, [pc, #296]	; (800a4f0 <xTaskIncrementTick+0x148>)
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d11f      	bne.n	800a410 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a3d0:	4b48      	ldr	r3, [pc, #288]	; (800a4f4 <xTaskIncrementTick+0x14c>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d009      	beq.n	800a3ee <xTaskIncrementTick+0x46>
 800a3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3de:	f383 8811 	msr	BASEPRI, r3
 800a3e2:	f3bf 8f6f 	isb	sy
 800a3e6:	f3bf 8f4f 	dsb	sy
 800a3ea:	603b      	str	r3, [r7, #0]
 800a3ec:	e7fe      	b.n	800a3ec <xTaskIncrementTick+0x44>
 800a3ee:	4b41      	ldr	r3, [pc, #260]	; (800a4f4 <xTaskIncrementTick+0x14c>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	60fb      	str	r3, [r7, #12]
 800a3f4:	4b40      	ldr	r3, [pc, #256]	; (800a4f8 <xTaskIncrementTick+0x150>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a3e      	ldr	r2, [pc, #248]	; (800a4f4 <xTaskIncrementTick+0x14c>)
 800a3fa:	6013      	str	r3, [r2, #0]
 800a3fc:	4a3e      	ldr	r2, [pc, #248]	; (800a4f8 <xTaskIncrementTick+0x150>)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6013      	str	r3, [r2, #0]
 800a402:	4b3e      	ldr	r3, [pc, #248]	; (800a4fc <xTaskIncrementTick+0x154>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	3301      	adds	r3, #1
 800a408:	4a3c      	ldr	r2, [pc, #240]	; (800a4fc <xTaskIncrementTick+0x154>)
 800a40a:	6013      	str	r3, [r2, #0]
 800a40c:	f000 fb1a 	bl	800aa44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a410:	4b3b      	ldr	r3, [pc, #236]	; (800a500 <xTaskIncrementTick+0x158>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	429a      	cmp	r2, r3
 800a418:	d349      	bcc.n	800a4ae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a41a:	4b36      	ldr	r3, [pc, #216]	; (800a4f4 <xTaskIncrementTick+0x14c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d104      	bne.n	800a42e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a424:	4b36      	ldr	r3, [pc, #216]	; (800a500 <xTaskIncrementTick+0x158>)
 800a426:	f04f 32ff 	mov.w	r2, #4294967295
 800a42a:	601a      	str	r2, [r3, #0]
					break;
 800a42c:	e03f      	b.n	800a4ae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a42e:	4b31      	ldr	r3, [pc, #196]	; (800a4f4 <xTaskIncrementTick+0x14c>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a43e:	693a      	ldr	r2, [r7, #16]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	429a      	cmp	r2, r3
 800a444:	d203      	bcs.n	800a44e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a446:	4a2e      	ldr	r2, [pc, #184]	; (800a500 <xTaskIncrementTick+0x158>)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a44c:	e02f      	b.n	800a4ae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	3304      	adds	r3, #4
 800a452:	4618      	mov	r0, r3
 800a454:	f7fe fe12 	bl	800907c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d004      	beq.n	800a46a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	3318      	adds	r3, #24
 800a464:	4618      	mov	r0, r3
 800a466:	f7fe fe09 	bl	800907c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a46e:	4b25      	ldr	r3, [pc, #148]	; (800a504 <xTaskIncrementTick+0x15c>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	429a      	cmp	r2, r3
 800a474:	d903      	bls.n	800a47e <xTaskIncrementTick+0xd6>
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47a:	4a22      	ldr	r2, [pc, #136]	; (800a504 <xTaskIncrementTick+0x15c>)
 800a47c:	6013      	str	r3, [r2, #0]
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a482:	4613      	mov	r3, r2
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	4413      	add	r3, r2
 800a488:	009b      	lsls	r3, r3, #2
 800a48a:	4a1f      	ldr	r2, [pc, #124]	; (800a508 <xTaskIncrementTick+0x160>)
 800a48c:	441a      	add	r2, r3
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	3304      	adds	r3, #4
 800a492:	4619      	mov	r1, r3
 800a494:	4610      	mov	r0, r2
 800a496:	f7fe fd94 	bl	8008fc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a49e:	4b1b      	ldr	r3, [pc, #108]	; (800a50c <xTaskIncrementTick+0x164>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d3b8      	bcc.n	800a41a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4ac:	e7b5      	b.n	800a41a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a4ae:	4b17      	ldr	r3, [pc, #92]	; (800a50c <xTaskIncrementTick+0x164>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b4:	4914      	ldr	r1, [pc, #80]	; (800a508 <xTaskIncrementTick+0x160>)
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	4413      	add	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	440b      	add	r3, r1
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d907      	bls.n	800a4d6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	617b      	str	r3, [r7, #20]
 800a4ca:	e004      	b.n	800a4d6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a4cc:	4b10      	ldr	r3, [pc, #64]	; (800a510 <xTaskIncrementTick+0x168>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	4a0f      	ldr	r2, [pc, #60]	; (800a510 <xTaskIncrementTick+0x168>)
 800a4d4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a4d6:	4b0f      	ldr	r3, [pc, #60]	; (800a514 <xTaskIncrementTick+0x16c>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a4e2:	697b      	ldr	r3, [r7, #20]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3718      	adds	r7, #24
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	20000d10 	.word	0x20000d10
 800a4f0:	20000cec 	.word	0x20000cec
 800a4f4:	20000ca0 	.word	0x20000ca0
 800a4f8:	20000ca4 	.word	0x20000ca4
 800a4fc:	20000d00 	.word	0x20000d00
 800a500:	20000d08 	.word	0x20000d08
 800a504:	20000cf0 	.word	0x20000cf0
 800a508:	20000818 	.word	0x20000818
 800a50c:	20000814 	.word	0x20000814
 800a510:	20000cf8 	.word	0x20000cf8
 800a514:	20000cfc 	.word	0x20000cfc

0800a518 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a51e:	4b27      	ldr	r3, [pc, #156]	; (800a5bc <vTaskSwitchContext+0xa4>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d003      	beq.n	800a52e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a526:	4b26      	ldr	r3, [pc, #152]	; (800a5c0 <vTaskSwitchContext+0xa8>)
 800a528:	2201      	movs	r2, #1
 800a52a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a52c:	e040      	b.n	800a5b0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a52e:	4b24      	ldr	r3, [pc, #144]	; (800a5c0 <vTaskSwitchContext+0xa8>)
 800a530:	2200      	movs	r2, #0
 800a532:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a534:	4b23      	ldr	r3, [pc, #140]	; (800a5c4 <vTaskSwitchContext+0xac>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	60fb      	str	r3, [r7, #12]
 800a53a:	e00f      	b.n	800a55c <vTaskSwitchContext+0x44>
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d109      	bne.n	800a556 <vTaskSwitchContext+0x3e>
 800a542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a546:	f383 8811 	msr	BASEPRI, r3
 800a54a:	f3bf 8f6f 	isb	sy
 800a54e:	f3bf 8f4f 	dsb	sy
 800a552:	607b      	str	r3, [r7, #4]
 800a554:	e7fe      	b.n	800a554 <vTaskSwitchContext+0x3c>
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	3b01      	subs	r3, #1
 800a55a:	60fb      	str	r3, [r7, #12]
 800a55c:	491a      	ldr	r1, [pc, #104]	; (800a5c8 <vTaskSwitchContext+0xb0>)
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	4613      	mov	r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4413      	add	r3, r2
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	440b      	add	r3, r1
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d0e5      	beq.n	800a53c <vTaskSwitchContext+0x24>
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	4613      	mov	r3, r2
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	4413      	add	r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4a13      	ldr	r2, [pc, #76]	; (800a5c8 <vTaskSwitchContext+0xb0>)
 800a57c:	4413      	add	r3, r2
 800a57e:	60bb      	str	r3, [r7, #8]
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	685a      	ldr	r2, [r3, #4]
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	605a      	str	r2, [r3, #4]
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	3308      	adds	r3, #8
 800a592:	429a      	cmp	r2, r3
 800a594:	d104      	bne.n	800a5a0 <vTaskSwitchContext+0x88>
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	685a      	ldr	r2, [r3, #4]
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	605a      	str	r2, [r3, #4]
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	4a09      	ldr	r2, [pc, #36]	; (800a5cc <vTaskSwitchContext+0xb4>)
 800a5a8:	6013      	str	r3, [r2, #0]
 800a5aa:	4a06      	ldr	r2, [pc, #24]	; (800a5c4 <vTaskSwitchContext+0xac>)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6013      	str	r3, [r2, #0]
}
 800a5b0:	bf00      	nop
 800a5b2:	3714      	adds	r7, #20
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr
 800a5bc:	20000d10 	.word	0x20000d10
 800a5c0:	20000cfc 	.word	0x20000cfc
 800a5c4:	20000cf0 	.word	0x20000cf0
 800a5c8:	20000818 	.word	0x20000818
 800a5cc:	20000814 	.word	0x20000814

0800a5d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d109      	bne.n	800a5f4 <vTaskPlaceOnEventList+0x24>
 800a5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	60fb      	str	r3, [r7, #12]
 800a5f2:	e7fe      	b.n	800a5f2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5f4:	4b07      	ldr	r3, [pc, #28]	; (800a614 <vTaskPlaceOnEventList+0x44>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	3318      	adds	r3, #24
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f7fe fd04 	bl	800900a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a602:	2101      	movs	r1, #1
 800a604:	6838      	ldr	r0, [r7, #0]
 800a606:	f000 fac7 	bl	800ab98 <prvAddCurrentTaskToDelayedList>
}
 800a60a:	bf00      	nop
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	20000814 	.word	0x20000814

0800a618 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d109      	bne.n	800a63e <vTaskPlaceOnEventListRestricted+0x26>
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	617b      	str	r3, [r7, #20]
 800a63c:	e7fe      	b.n	800a63c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a63e:	4b0a      	ldr	r3, [pc, #40]	; (800a668 <vTaskPlaceOnEventListRestricted+0x50>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	3318      	adds	r3, #24
 800a644:	4619      	mov	r1, r3
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f7fe fcbb 	bl	8008fc2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d002      	beq.n	800a658 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a652:	f04f 33ff 	mov.w	r3, #4294967295
 800a656:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a658:	6879      	ldr	r1, [r7, #4]
 800a65a:	68b8      	ldr	r0, [r7, #8]
 800a65c:	f000 fa9c 	bl	800ab98 <prvAddCurrentTaskToDelayedList>
	}
 800a660:	bf00      	nop
 800a662:	3718      	adds	r7, #24
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	20000814 	.word	0x20000814

0800a66c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d109      	bne.n	800a696 <xTaskRemoveFromEventList+0x2a>
 800a682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a686:	f383 8811 	msr	BASEPRI, r3
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	60fb      	str	r3, [r7, #12]
 800a694:	e7fe      	b.n	800a694 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	3318      	adds	r3, #24
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fe fcee 	bl	800907c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6a0:	4b1e      	ldr	r3, [pc, #120]	; (800a71c <xTaskRemoveFromEventList+0xb0>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d11f      	bne.n	800a6e8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	3304      	adds	r3, #4
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7fe fce5 	bl	800907c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6b6:	4b1a      	ldr	r3, [pc, #104]	; (800a720 <xTaskRemoveFromEventList+0xb4>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d903      	bls.n	800a6c6 <xTaskRemoveFromEventList+0x5a>
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c2:	4a17      	ldr	r2, [pc, #92]	; (800a720 <xTaskRemoveFromEventList+0xb4>)
 800a6c4:	6013      	str	r3, [r2, #0]
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	4413      	add	r3, r2
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	4a14      	ldr	r2, [pc, #80]	; (800a724 <xTaskRemoveFromEventList+0xb8>)
 800a6d4:	441a      	add	r2, r3
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	3304      	adds	r3, #4
 800a6da:	4619      	mov	r1, r3
 800a6dc:	4610      	mov	r0, r2
 800a6de:	f7fe fc70 	bl	8008fc2 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800a6e2:	f000 f9af 	bl	800aa44 <prvResetNextTaskUnblockTime>
 800a6e6:	e005      	b.n	800a6f4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	3318      	adds	r3, #24
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	480e      	ldr	r0, [pc, #56]	; (800a728 <xTaskRemoveFromEventList+0xbc>)
 800a6f0:	f7fe fc67 	bl	8008fc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6f8:	4b0c      	ldr	r3, [pc, #48]	; (800a72c <xTaskRemoveFromEventList+0xc0>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d905      	bls.n	800a70e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a702:	2301      	movs	r3, #1
 800a704:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a706:	4b0a      	ldr	r3, [pc, #40]	; (800a730 <xTaskRemoveFromEventList+0xc4>)
 800a708:	2201      	movs	r2, #1
 800a70a:	601a      	str	r2, [r3, #0]
 800a70c:	e001      	b.n	800a712 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a70e:	2300      	movs	r3, #0
 800a710:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a712:	697b      	ldr	r3, [r7, #20]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3718      	adds	r7, #24
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	20000d10 	.word	0x20000d10
 800a720:	20000cf0 	.word	0x20000cf0
 800a724:	20000818 	.word	0x20000818
 800a728:	20000ca8 	.word	0x20000ca8
 800a72c:	20000814 	.word	0x20000814
 800a730:	20000cfc 	.word	0x20000cfc

0800a734 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a73c:	4b06      	ldr	r3, [pc, #24]	; (800a758 <vTaskInternalSetTimeOutState+0x24>)
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a744:	4b05      	ldr	r3, [pc, #20]	; (800a75c <vTaskInternalSetTimeOutState+0x28>)
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	605a      	str	r2, [r3, #4]
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr
 800a758:	20000d00 	.word	0x20000d00
 800a75c:	20000cec 	.word	0x20000cec

0800a760 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b088      	sub	sp, #32
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d109      	bne.n	800a784 <xTaskCheckForTimeOut+0x24>
 800a770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	613b      	str	r3, [r7, #16]
 800a782:	e7fe      	b.n	800a782 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d109      	bne.n	800a79e <xTaskCheckForTimeOut+0x3e>
 800a78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78e:	f383 8811 	msr	BASEPRI, r3
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	60fb      	str	r3, [r7, #12]
 800a79c:	e7fe      	b.n	800a79c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a79e:	f000 febd 	bl	800b51c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a7a2:	4b1d      	ldr	r3, [pc, #116]	; (800a818 <xTaskCheckForTimeOut+0xb8>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	69ba      	ldr	r2, [r7, #24]
 800a7ae:	1ad3      	subs	r3, r2, r3
 800a7b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ba:	d102      	bne.n	800a7c2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	61fb      	str	r3, [r7, #28]
 800a7c0:	e023      	b.n	800a80a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	4b15      	ldr	r3, [pc, #84]	; (800a81c <xTaskCheckForTimeOut+0xbc>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d007      	beq.n	800a7de <xTaskCheckForTimeOut+0x7e>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	69ba      	ldr	r2, [r7, #24]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d302      	bcc.n	800a7de <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	61fb      	str	r3, [r7, #28]
 800a7dc:	e015      	b.n	800a80a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	697a      	ldr	r2, [r7, #20]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d20b      	bcs.n	800a800 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	1ad2      	subs	r2, r2, r3
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f7ff ff9d 	bl	800a734 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	61fb      	str	r3, [r7, #28]
 800a7fe:	e004      	b.n	800a80a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	2200      	movs	r2, #0
 800a804:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a806:	2301      	movs	r3, #1
 800a808:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a80a:	f000 feb5 	bl	800b578 <vPortExitCritical>

	return xReturn;
 800a80e:	69fb      	ldr	r3, [r7, #28]
}
 800a810:	4618      	mov	r0, r3
 800a812:	3720      	adds	r7, #32
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	20000cec 	.word	0x20000cec
 800a81c:	20000d00 	.word	0x20000d00

0800a820 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a820:	b480      	push	{r7}
 800a822:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a824:	4b03      	ldr	r3, [pc, #12]	; (800a834 <vTaskMissedYield+0x14>)
 800a826:	2201      	movs	r2, #1
 800a828:	601a      	str	r2, [r3, #0]
}
 800a82a:	bf00      	nop
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr
 800a834:	20000cfc 	.word	0x20000cfc

0800a838 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a840:	f000 f8a6 	bl	800a990 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a844:	4b17      	ldr	r3, [pc, #92]	; (800a8a4 <prvIdleTask+0x6c>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d907      	bls.n	800a85c <prvIdleTask+0x24>
			{
				taskYIELD();
 800a84c:	4b16      	ldr	r3, [pc, #88]	; (800a8a8 <prvIdleTask+0x70>)
 800a84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a852:	601a      	str	r2, [r3, #0]
 800a854:	f3bf 8f4f 	dsb	sy
 800a858:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800a85c:	f7ff fc88 	bl	800a170 <prvGetExpectedIdleTime>
 800a860:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2b01      	cmp	r3, #1
 800a866:	d9eb      	bls.n	800a840 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800a868:	f7ff fc74 	bl	800a154 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800a86c:	4b0f      	ldr	r3, [pc, #60]	; (800a8ac <prvIdleTask+0x74>)
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	4b0f      	ldr	r3, [pc, #60]	; (800a8b0 <prvIdleTask+0x78>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	429a      	cmp	r2, r3
 800a876:	d209      	bcs.n	800a88c <prvIdleTask+0x54>
 800a878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87c:	f383 8811 	msr	BASEPRI, r3
 800a880:	f3bf 8f6f 	isb	sy
 800a884:	f3bf 8f4f 	dsb	sy
 800a888:	60bb      	str	r3, [r7, #8]
 800a88a:	e7fe      	b.n	800a88a <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800a88c:	f7ff fc70 	bl	800a170 <prvGetExpectedIdleTime>
 800a890:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2b01      	cmp	r3, #1
 800a896:	d902      	bls.n	800a89e <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f000 feed 	bl	800b678 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800a89e:	f7ff fc9f 	bl	800a1e0 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800a8a2:	e7cd      	b.n	800a840 <prvIdleTask+0x8>
 800a8a4:	20000818 	.word	0x20000818
 800a8a8:	e000ed04 	.word	0xe000ed04
 800a8ac:	20000d08 	.word	0x20000d08
 800a8b0:	20000cec 	.word	0x20000cec

0800a8b4 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800a8c2:	4b0f      	ldr	r3, [pc, #60]	; (800a900 <eTaskConfirmSleepModeStatus+0x4c>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d002      	beq.n	800a8d0 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	71fb      	strb	r3, [r7, #7]
 800a8ce:	e010      	b.n	800a8f2 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800a8d0:	4b0c      	ldr	r3, [pc, #48]	; (800a904 <eTaskConfirmSleepModeStatus+0x50>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d002      	beq.n	800a8de <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	71fb      	strb	r3, [r7, #7]
 800a8dc:	e009      	b.n	800a8f2 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800a8de:	4b0a      	ldr	r3, [pc, #40]	; (800a908 <eTaskConfirmSleepModeStatus+0x54>)
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	4b0a      	ldr	r3, [pc, #40]	; (800a90c <eTaskConfirmSleepModeStatus+0x58>)
 800a8e4:	6819      	ldr	r1, [r3, #0]
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	1acb      	subs	r3, r1, r3
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d101      	bne.n	800a8f2 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800a8ee:	2302      	movs	r3, #2
 800a8f0:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800a8f2:	79fb      	ldrb	r3, [r7, #7]
	}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	20000ca8 	.word	0x20000ca8
 800a904:	20000cfc 	.word	0x20000cfc
 800a908:	20000cd4 	.word	0x20000cd4
 800a90c:	20000ce8 	.word	0x20000ce8

0800a910 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a916:	2300      	movs	r3, #0
 800a918:	607b      	str	r3, [r7, #4]
 800a91a:	e00c      	b.n	800a936 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	4613      	mov	r3, r2
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	4413      	add	r3, r2
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	4a12      	ldr	r2, [pc, #72]	; (800a970 <prvInitialiseTaskLists+0x60>)
 800a928:	4413      	add	r3, r2
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7fe fb1c 	bl	8008f68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	3301      	adds	r3, #1
 800a934:	607b      	str	r3, [r7, #4]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2b37      	cmp	r3, #55	; 0x37
 800a93a:	d9ef      	bls.n	800a91c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a93c:	480d      	ldr	r0, [pc, #52]	; (800a974 <prvInitialiseTaskLists+0x64>)
 800a93e:	f7fe fb13 	bl	8008f68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a942:	480d      	ldr	r0, [pc, #52]	; (800a978 <prvInitialiseTaskLists+0x68>)
 800a944:	f7fe fb10 	bl	8008f68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a948:	480c      	ldr	r0, [pc, #48]	; (800a97c <prvInitialiseTaskLists+0x6c>)
 800a94a:	f7fe fb0d 	bl	8008f68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a94e:	480c      	ldr	r0, [pc, #48]	; (800a980 <prvInitialiseTaskLists+0x70>)
 800a950:	f7fe fb0a 	bl	8008f68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a954:	480b      	ldr	r0, [pc, #44]	; (800a984 <prvInitialiseTaskLists+0x74>)
 800a956:	f7fe fb07 	bl	8008f68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a95a:	4b0b      	ldr	r3, [pc, #44]	; (800a988 <prvInitialiseTaskLists+0x78>)
 800a95c:	4a05      	ldr	r2, [pc, #20]	; (800a974 <prvInitialiseTaskLists+0x64>)
 800a95e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a960:	4b0a      	ldr	r3, [pc, #40]	; (800a98c <prvInitialiseTaskLists+0x7c>)
 800a962:	4a05      	ldr	r2, [pc, #20]	; (800a978 <prvInitialiseTaskLists+0x68>)
 800a964:	601a      	str	r2, [r3, #0]
}
 800a966:	bf00      	nop
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	20000818 	.word	0x20000818
 800a974:	20000c78 	.word	0x20000c78
 800a978:	20000c8c 	.word	0x20000c8c
 800a97c:	20000ca8 	.word	0x20000ca8
 800a980:	20000cbc 	.word	0x20000cbc
 800a984:	20000cd4 	.word	0x20000cd4
 800a988:	20000ca0 	.word	0x20000ca0
 800a98c:	20000ca4 	.word	0x20000ca4

0800a990 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a996:	e019      	b.n	800a9cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a998:	f000 fdc0 	bl	800b51c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a99c:	4b0f      	ldr	r3, [pc, #60]	; (800a9dc <prvCheckTasksWaitingTermination+0x4c>)
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	3304      	adds	r3, #4
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7fe fb67 	bl	800907c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a9ae:	4b0c      	ldr	r3, [pc, #48]	; (800a9e0 <prvCheckTasksWaitingTermination+0x50>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	4a0a      	ldr	r2, [pc, #40]	; (800a9e0 <prvCheckTasksWaitingTermination+0x50>)
 800a9b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a9b8:	4b0a      	ldr	r3, [pc, #40]	; (800a9e4 <prvCheckTasksWaitingTermination+0x54>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	4a09      	ldr	r2, [pc, #36]	; (800a9e4 <prvCheckTasksWaitingTermination+0x54>)
 800a9c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a9c2:	f000 fdd9 	bl	800b578 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 f80e 	bl	800a9e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9cc:	4b05      	ldr	r3, [pc, #20]	; (800a9e4 <prvCheckTasksWaitingTermination+0x54>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1e1      	bne.n	800a998 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a9d4:	bf00      	nop
 800a9d6:	3708      	adds	r7, #8
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	20000cbc 	.word	0x20000cbc
 800a9e0:	20000ce8 	.word	0x20000ce8
 800a9e4:	20000cd0 	.word	0x20000cd0

0800a9e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d108      	bne.n	800aa0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f001 f84c 	bl	800ba9c <vPortFree>
				vPortFree( pxTCB );
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f001 f849 	bl	800ba9c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa0a:	e017      	b.n	800aa3c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d103      	bne.n	800aa1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f001 f840 	bl	800ba9c <vPortFree>
	}
 800aa1c:	e00e      	b.n	800aa3c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d009      	beq.n	800aa3c <prvDeleteTCB+0x54>
 800aa28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2c:	f383 8811 	msr	BASEPRI, r3
 800aa30:	f3bf 8f6f 	isb	sy
 800aa34:	f3bf 8f4f 	dsb	sy
 800aa38:	60fb      	str	r3, [r7, #12]
 800aa3a:	e7fe      	b.n	800aa3a <prvDeleteTCB+0x52>
	}
 800aa3c:	bf00      	nop
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa4a:	4b0c      	ldr	r3, [pc, #48]	; (800aa7c <prvResetNextTaskUnblockTime+0x38>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d104      	bne.n	800aa5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa54:	4b0a      	ldr	r3, [pc, #40]	; (800aa80 <prvResetNextTaskUnblockTime+0x3c>)
 800aa56:	f04f 32ff 	mov.w	r2, #4294967295
 800aa5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa5c:	e008      	b.n	800aa70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa5e:	4b07      	ldr	r3, [pc, #28]	; (800aa7c <prvResetNextTaskUnblockTime+0x38>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	68db      	ldr	r3, [r3, #12]
 800aa66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	4a04      	ldr	r2, [pc, #16]	; (800aa80 <prvResetNextTaskUnblockTime+0x3c>)
 800aa6e:	6013      	str	r3, [r2, #0]
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr
 800aa7c:	20000ca0 	.word	0x20000ca0
 800aa80:	20000d08 	.word	0x20000d08

0800aa84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa8a:	4b0b      	ldr	r3, [pc, #44]	; (800aab8 <xTaskGetSchedulerState+0x34>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d102      	bne.n	800aa98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa92:	2301      	movs	r3, #1
 800aa94:	607b      	str	r3, [r7, #4]
 800aa96:	e008      	b.n	800aaaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa98:	4b08      	ldr	r3, [pc, #32]	; (800aabc <xTaskGetSchedulerState+0x38>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d102      	bne.n	800aaa6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aaa0:	2302      	movs	r3, #2
 800aaa2:	607b      	str	r3, [r7, #4]
 800aaa4:	e001      	b.n	800aaaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aaaa:	687b      	ldr	r3, [r7, #4]
	}
 800aaac:	4618      	mov	r0, r3
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	20000cf4 	.word	0x20000cf4
 800aabc:	20000d10 	.word	0x20000d10

0800aac0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aacc:	2300      	movs	r3, #0
 800aace:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d054      	beq.n	800ab80 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aad6:	4b2d      	ldr	r3, [pc, #180]	; (800ab8c <xTaskPriorityDisinherit+0xcc>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	693a      	ldr	r2, [r7, #16]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d009      	beq.n	800aaf4 <xTaskPriorityDisinherit+0x34>
 800aae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae4:	f383 8811 	msr	BASEPRI, r3
 800aae8:	f3bf 8f6f 	isb	sy
 800aaec:	f3bf 8f4f 	dsb	sy
 800aaf0:	60fb      	str	r3, [r7, #12]
 800aaf2:	e7fe      	b.n	800aaf2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d109      	bne.n	800ab10 <xTaskPriorityDisinherit+0x50>
 800aafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab00:	f383 8811 	msr	BASEPRI, r3
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	60bb      	str	r3, [r7, #8]
 800ab0e:	e7fe      	b.n	800ab0e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab14:	1e5a      	subs	r2, r3, #1
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d02c      	beq.n	800ab80 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d128      	bne.n	800ab80 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	3304      	adds	r3, #4
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7fe faa2 	bl	800907c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab50:	4b0f      	ldr	r3, [pc, #60]	; (800ab90 <xTaskPriorityDisinherit+0xd0>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d903      	bls.n	800ab60 <xTaskPriorityDisinherit+0xa0>
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5c:	4a0c      	ldr	r2, [pc, #48]	; (800ab90 <xTaskPriorityDisinherit+0xd0>)
 800ab5e:	6013      	str	r3, [r2, #0]
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab64:	4613      	mov	r3, r2
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	4413      	add	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4a09      	ldr	r2, [pc, #36]	; (800ab94 <xTaskPriorityDisinherit+0xd4>)
 800ab6e:	441a      	add	r2, r3
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	3304      	adds	r3, #4
 800ab74:	4619      	mov	r1, r3
 800ab76:	4610      	mov	r0, r2
 800ab78:	f7fe fa23 	bl	8008fc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab80:	697b      	ldr	r3, [r7, #20]
	}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3718      	adds	r7, #24
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	20000814 	.word	0x20000814
 800ab90:	20000cf0 	.word	0x20000cf0
 800ab94:	20000818 	.word	0x20000818

0800ab98 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aba2:	4b21      	ldr	r3, [pc, #132]	; (800ac28 <prvAddCurrentTaskToDelayedList+0x90>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aba8:	4b20      	ldr	r3, [pc, #128]	; (800ac2c <prvAddCurrentTaskToDelayedList+0x94>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	3304      	adds	r3, #4
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fe fa64 	bl	800907c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abba:	d10a      	bne.n	800abd2 <prvAddCurrentTaskToDelayedList+0x3a>
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d007      	beq.n	800abd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abc2:	4b1a      	ldr	r3, [pc, #104]	; (800ac2c <prvAddCurrentTaskToDelayedList+0x94>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	3304      	adds	r3, #4
 800abc8:	4619      	mov	r1, r3
 800abca:	4819      	ldr	r0, [pc, #100]	; (800ac30 <prvAddCurrentTaskToDelayedList+0x98>)
 800abcc:	f7fe f9f9 	bl	8008fc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800abd0:	e026      	b.n	800ac20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800abd2:	68fa      	ldr	r2, [r7, #12]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4413      	add	r3, r2
 800abd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800abda:	4b14      	ldr	r3, [pc, #80]	; (800ac2c <prvAddCurrentTaskToDelayedList+0x94>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	68ba      	ldr	r2, [r7, #8]
 800abe0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d209      	bcs.n	800abfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abea:	4b12      	ldr	r3, [pc, #72]	; (800ac34 <prvAddCurrentTaskToDelayedList+0x9c>)
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	4b0f      	ldr	r3, [pc, #60]	; (800ac2c <prvAddCurrentTaskToDelayedList+0x94>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	3304      	adds	r3, #4
 800abf4:	4619      	mov	r1, r3
 800abf6:	4610      	mov	r0, r2
 800abf8:	f7fe fa07 	bl	800900a <vListInsert>
}
 800abfc:	e010      	b.n	800ac20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abfe:	4b0e      	ldr	r3, [pc, #56]	; (800ac38 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	4b0a      	ldr	r3, [pc, #40]	; (800ac2c <prvAddCurrentTaskToDelayedList+0x94>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	3304      	adds	r3, #4
 800ac08:	4619      	mov	r1, r3
 800ac0a:	4610      	mov	r0, r2
 800ac0c:	f7fe f9fd 	bl	800900a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac10:	4b0a      	ldr	r3, [pc, #40]	; (800ac3c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68ba      	ldr	r2, [r7, #8]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d202      	bcs.n	800ac20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ac1a:	4a08      	ldr	r2, [pc, #32]	; (800ac3c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	6013      	str	r3, [r2, #0]
}
 800ac20:	bf00      	nop
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	20000cec 	.word	0x20000cec
 800ac2c:	20000814 	.word	0x20000814
 800ac30:	20000cd4 	.word	0x20000cd4
 800ac34:	20000ca4 	.word	0x20000ca4
 800ac38:	20000ca0 	.word	0x20000ca0
 800ac3c:	20000d08 	.word	0x20000d08

0800ac40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b08a      	sub	sp, #40	; 0x28
 800ac44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ac46:	2300      	movs	r3, #0
 800ac48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac4a:	f000 faff 	bl	800b24c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac4e:	4b1c      	ldr	r3, [pc, #112]	; (800acc0 <xTimerCreateTimerTask+0x80>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d021      	beq.n	800ac9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac56:	2300      	movs	r3, #0
 800ac58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac5e:	1d3a      	adds	r2, r7, #4
 800ac60:	f107 0108 	add.w	r1, r7, #8
 800ac64:	f107 030c 	add.w	r3, r7, #12
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7fe f963 	bl	8008f34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ac6e:	6879      	ldr	r1, [r7, #4]
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	9202      	str	r2, [sp, #8]
 800ac76:	9301      	str	r3, [sp, #4]
 800ac78:	2302      	movs	r3, #2
 800ac7a:	9300      	str	r3, [sp, #0]
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	460a      	mov	r2, r1
 800ac80:	4910      	ldr	r1, [pc, #64]	; (800acc4 <xTimerCreateTimerTask+0x84>)
 800ac82:	4811      	ldr	r0, [pc, #68]	; (800acc8 <xTimerCreateTimerTask+0x88>)
 800ac84:	f7fe ffb6 	bl	8009bf4 <xTaskCreateStatic>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	4b10      	ldr	r3, [pc, #64]	; (800accc <xTimerCreateTimerTask+0x8c>)
 800ac8c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ac8e:	4b0f      	ldr	r3, [pc, #60]	; (800accc <xTimerCreateTimerTask+0x8c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d001      	beq.n	800ac9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ac96:	2301      	movs	r3, #1
 800ac98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d109      	bne.n	800acb4 <xTimerCreateTimerTask+0x74>
 800aca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca4:	f383 8811 	msr	BASEPRI, r3
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	613b      	str	r3, [r7, #16]
 800acb2:	e7fe      	b.n	800acb2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800acb4:	697b      	ldr	r3, [r7, #20]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3718      	adds	r7, #24
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	20000d44 	.word	0x20000d44
 800acc4:	0800c56c 	.word	0x0800c56c
 800acc8:	0800ae01 	.word	0x0800ae01
 800accc:	20000d48 	.word	0x20000d48

0800acd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b08a      	sub	sp, #40	; 0x28
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
 800acdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800acde:	2300      	movs	r3, #0
 800ace0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d109      	bne.n	800acfc <xTimerGenericCommand+0x2c>
 800ace8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acec:	f383 8811 	msr	BASEPRI, r3
 800acf0:	f3bf 8f6f 	isb	sy
 800acf4:	f3bf 8f4f 	dsb	sy
 800acf8:	623b      	str	r3, [r7, #32]
 800acfa:	e7fe      	b.n	800acfa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800acfc:	4b19      	ldr	r3, [pc, #100]	; (800ad64 <xTimerGenericCommand+0x94>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d02a      	beq.n	800ad5a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	2b05      	cmp	r3, #5
 800ad14:	dc18      	bgt.n	800ad48 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad16:	f7ff feb5 	bl	800aa84 <xTaskGetSchedulerState>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	d109      	bne.n	800ad34 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad20:	4b10      	ldr	r3, [pc, #64]	; (800ad64 <xTimerGenericCommand+0x94>)
 800ad22:	6818      	ldr	r0, [r3, #0]
 800ad24:	f107 0110 	add.w	r1, r7, #16
 800ad28:	2300      	movs	r3, #0
 800ad2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad2c:	f7fe fb0e 	bl	800934c <xQueueGenericSend>
 800ad30:	6278      	str	r0, [r7, #36]	; 0x24
 800ad32:	e012      	b.n	800ad5a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad34:	4b0b      	ldr	r3, [pc, #44]	; (800ad64 <xTimerGenericCommand+0x94>)
 800ad36:	6818      	ldr	r0, [r3, #0]
 800ad38:	f107 0110 	add.w	r1, r7, #16
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f7fe fb04 	bl	800934c <xQueueGenericSend>
 800ad44:	6278      	str	r0, [r7, #36]	; 0x24
 800ad46:	e008      	b.n	800ad5a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad48:	4b06      	ldr	r3, [pc, #24]	; (800ad64 <xTimerGenericCommand+0x94>)
 800ad4a:	6818      	ldr	r0, [r3, #0]
 800ad4c:	f107 0110 	add.w	r1, r7, #16
 800ad50:	2300      	movs	r3, #0
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	f7fe fbf4 	bl	8009540 <xQueueGenericSendFromISR>
 800ad58:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3728      	adds	r7, #40	; 0x28
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	20000d44 	.word	0x20000d44

0800ad68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b088      	sub	sp, #32
 800ad6c:	af02      	add	r7, sp, #8
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad72:	4b22      	ldr	r3, [pc, #136]	; (800adfc <prvProcessExpiredTimer+0x94>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68db      	ldr	r3, [r3, #12]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	3304      	adds	r3, #4
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7fe f97b 	bl	800907c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad8c:	f003 0304 	and.w	r3, r3, #4
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d021      	beq.n	800add8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	699a      	ldr	r2, [r3, #24]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	18d1      	adds	r1, r2, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	6978      	ldr	r0, [r7, #20]
 800ada2:	f000 f8d1 	bl	800af48 <prvInsertTimerInActiveList>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d01e      	beq.n	800adea <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800adac:	2300      	movs	r3, #0
 800adae:	9300      	str	r3, [sp, #0]
 800adb0:	2300      	movs	r3, #0
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	2100      	movs	r1, #0
 800adb6:	6978      	ldr	r0, [r7, #20]
 800adb8:	f7ff ff8a 	bl	800acd0 <xTimerGenericCommand>
 800adbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d112      	bne.n	800adea <prvProcessExpiredTimer+0x82>
 800adc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	60fb      	str	r3, [r7, #12]
 800add6:	e7fe      	b.n	800add6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adde:	f023 0301 	bic.w	r3, r3, #1
 800ade2:	b2da      	uxtb	r2, r3
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	6a1b      	ldr	r3, [r3, #32]
 800adee:	6978      	ldr	r0, [r7, #20]
 800adf0:	4798      	blx	r3
}
 800adf2:	bf00      	nop
 800adf4:	3718      	adds	r7, #24
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	20000d3c 	.word	0x20000d3c

0800ae00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae08:	f107 0308 	add.w	r3, r7, #8
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f000 f857 	bl	800aec0 <prvGetNextExpireTime>
 800ae12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	4619      	mov	r1, r3
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f000 f803 	bl	800ae24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ae1e:	f000 f8d5 	bl	800afcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae22:	e7f1      	b.n	800ae08 <prvTimerTask+0x8>

0800ae24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ae2e:	f7ff f991 	bl	800a154 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae32:	f107 0308 	add.w	r3, r7, #8
 800ae36:	4618      	mov	r0, r3
 800ae38:	f000 f866 	bl	800af08 <prvSampleTimeNow>
 800ae3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d130      	bne.n	800aea6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10a      	bne.n	800ae60 <prvProcessTimerOrBlockTask+0x3c>
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d806      	bhi.n	800ae60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ae52:	f7ff f9c5 	bl	800a1e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae56:	68f9      	ldr	r1, [r7, #12]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f7ff ff85 	bl	800ad68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ae5e:	e024      	b.n	800aeaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d008      	beq.n	800ae78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae66:	4b13      	ldr	r3, [pc, #76]	; (800aeb4 <prvProcessTimerOrBlockTask+0x90>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d101      	bne.n	800ae74 <prvProcessTimerOrBlockTask+0x50>
 800ae70:	2301      	movs	r3, #1
 800ae72:	e000      	b.n	800ae76 <prvProcessTimerOrBlockTask+0x52>
 800ae74:	2300      	movs	r3, #0
 800ae76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ae78:	4b0f      	ldr	r3, [pc, #60]	; (800aeb8 <prvProcessTimerOrBlockTask+0x94>)
 800ae7a:	6818      	ldr	r0, [r3, #0]
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	683a      	ldr	r2, [r7, #0]
 800ae84:	4619      	mov	r1, r3
 800ae86:	f7fe fe81 	bl	8009b8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ae8a:	f7ff f9a9 	bl	800a1e0 <xTaskResumeAll>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10a      	bne.n	800aeaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ae94:	4b09      	ldr	r3, [pc, #36]	; (800aebc <prvProcessTimerOrBlockTask+0x98>)
 800ae96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae9a:	601a      	str	r2, [r3, #0]
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	f3bf 8f6f 	isb	sy
}
 800aea4:	e001      	b.n	800aeaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aea6:	f7ff f99b 	bl	800a1e0 <xTaskResumeAll>
}
 800aeaa:	bf00      	nop
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	20000d40 	.word	0x20000d40
 800aeb8:	20000d44 	.word	0x20000d44
 800aebc:	e000ed04 	.word	0xe000ed04

0800aec0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aec0:	b480      	push	{r7}
 800aec2:	b085      	sub	sp, #20
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aec8:	4b0e      	ldr	r3, [pc, #56]	; (800af04 <prvGetNextExpireTime+0x44>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d101      	bne.n	800aed6 <prvGetNextExpireTime+0x16>
 800aed2:	2201      	movs	r2, #1
 800aed4:	e000      	b.n	800aed8 <prvGetNextExpireTime+0x18>
 800aed6:	2200      	movs	r2, #0
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d105      	bne.n	800aef0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aee4:	4b07      	ldr	r3, [pc, #28]	; (800af04 <prvGetNextExpireTime+0x44>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	60fb      	str	r3, [r7, #12]
 800aeee:	e001      	b.n	800aef4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aef0:	2300      	movs	r3, #0
 800aef2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aef4:	68fb      	ldr	r3, [r7, #12]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3714      	adds	r7, #20
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	20000d3c 	.word	0x20000d3c

0800af08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800af10:	f7ff fa02 	bl	800a318 <xTaskGetTickCount>
 800af14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800af16:	4b0b      	ldr	r3, [pc, #44]	; (800af44 <prvSampleTimeNow+0x3c>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d205      	bcs.n	800af2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800af20:	f000 f930 	bl	800b184 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2201      	movs	r2, #1
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	e002      	b.n	800af32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800af32:	4a04      	ldr	r2, [pc, #16]	; (800af44 <prvSampleTimeNow+0x3c>)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800af38:	68fb      	ldr	r3, [r7, #12]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	20000d4c 	.word	0x20000d4c

0800af48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b086      	sub	sp, #24
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
 800af54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800af56:	2300      	movs	r3, #0
 800af58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d812      	bhi.n	800af94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	1ad2      	subs	r2, r2, r3
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	699b      	ldr	r3, [r3, #24]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d302      	bcc.n	800af82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800af7c:	2301      	movs	r3, #1
 800af7e:	617b      	str	r3, [r7, #20]
 800af80:	e01b      	b.n	800afba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800af82:	4b10      	ldr	r3, [pc, #64]	; (800afc4 <prvInsertTimerInActiveList+0x7c>)
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	3304      	adds	r3, #4
 800af8a:	4619      	mov	r1, r3
 800af8c:	4610      	mov	r0, r2
 800af8e:	f7fe f83c 	bl	800900a <vListInsert>
 800af92:	e012      	b.n	800afba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d206      	bcs.n	800afaa <prvInsertTimerInActiveList+0x62>
 800af9c:	68ba      	ldr	r2, [r7, #8]
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d302      	bcc.n	800afaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800afa4:	2301      	movs	r3, #1
 800afa6:	617b      	str	r3, [r7, #20]
 800afa8:	e007      	b.n	800afba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afaa:	4b07      	ldr	r3, [pc, #28]	; (800afc8 <prvInsertTimerInActiveList+0x80>)
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	3304      	adds	r3, #4
 800afb2:	4619      	mov	r1, r3
 800afb4:	4610      	mov	r0, r2
 800afb6:	f7fe f828 	bl	800900a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800afba:	697b      	ldr	r3, [r7, #20]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3718      	adds	r7, #24
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	20000d40 	.word	0x20000d40
 800afc8:	20000d3c 	.word	0x20000d3c

0800afcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b08e      	sub	sp, #56	; 0x38
 800afd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afd2:	e0c6      	b.n	800b162 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	da17      	bge.n	800b00a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800afda:	1d3b      	adds	r3, r7, #4
 800afdc:	3304      	adds	r3, #4
 800afde:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800afe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d109      	bne.n	800affa <prvProcessReceivedCommands+0x2e>
 800afe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afea:	f383 8811 	msr	BASEPRI, r3
 800afee:	f3bf 8f6f 	isb	sy
 800aff2:	f3bf 8f4f 	dsb	sy
 800aff6:	61fb      	str	r3, [r7, #28]
 800aff8:	e7fe      	b.n	800aff8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800affa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b000:	6850      	ldr	r0, [r2, #4]
 800b002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b004:	6892      	ldr	r2, [r2, #8]
 800b006:	4611      	mov	r1, r2
 800b008:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f2c0 80a7 	blt.w	800b160 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b018:	695b      	ldr	r3, [r3, #20]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d004      	beq.n	800b028 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b020:	3304      	adds	r3, #4
 800b022:	4618      	mov	r0, r3
 800b024:	f7fe f82a 	bl	800907c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b028:	463b      	mov	r3, r7
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7ff ff6c 	bl	800af08 <prvSampleTimeNow>
 800b030:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b09      	cmp	r3, #9
 800b036:	f200 8094 	bhi.w	800b162 <prvProcessReceivedCommands+0x196>
 800b03a:	a201      	add	r2, pc, #4	; (adr r2, 800b040 <prvProcessReceivedCommands+0x74>)
 800b03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b040:	0800b069 	.word	0x0800b069
 800b044:	0800b069 	.word	0x0800b069
 800b048:	0800b069 	.word	0x0800b069
 800b04c:	0800b0db 	.word	0x0800b0db
 800b050:	0800b0ef 	.word	0x0800b0ef
 800b054:	0800b137 	.word	0x0800b137
 800b058:	0800b069 	.word	0x0800b069
 800b05c:	0800b069 	.word	0x0800b069
 800b060:	0800b0db 	.word	0x0800b0db
 800b064:	0800b0ef 	.word	0x0800b0ef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b06e:	f043 0301 	orr.w	r3, r3, #1
 800b072:	b2da      	uxtb	r2, r3
 800b074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b076:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07e:	699b      	ldr	r3, [r3, #24]
 800b080:	18d1      	adds	r1, r2, r3
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b088:	f7ff ff5e 	bl	800af48 <prvInsertTimerInActiveList>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d067      	beq.n	800b162 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b094:	6a1b      	ldr	r3, [r3, #32]
 800b096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b098:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0a0:	f003 0304 	and.w	r3, r3, #4
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d05c      	beq.n	800b162 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b0a8:	68ba      	ldr	r2, [r7, #8]
 800b0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ac:	699b      	ldr	r3, [r3, #24]
 800b0ae:	441a      	add	r2, r3
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0ba:	f7ff fe09 	bl	800acd0 <xTimerGenericCommand>
 800b0be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b0c0:	6a3b      	ldr	r3, [r7, #32]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d14d      	bne.n	800b162 <prvProcessReceivedCommands+0x196>
 800b0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ca:	f383 8811 	msr	BASEPRI, r3
 800b0ce:	f3bf 8f6f 	isb	sy
 800b0d2:	f3bf 8f4f 	dsb	sy
 800b0d6:	61bb      	str	r3, [r7, #24]
 800b0d8:	e7fe      	b.n	800b0d8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0e0:	f023 0301 	bic.w	r3, r3, #1
 800b0e4:	b2da      	uxtb	r2, r3
 800b0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b0ec:	e039      	b.n	800b162 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0f4:	f043 0301 	orr.w	r3, r3, #1
 800b0f8:	b2da      	uxtb	r2, r3
 800b0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b100:	68ba      	ldr	r2, [r7, #8]
 800b102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b104:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d109      	bne.n	800b122 <prvProcessReceivedCommands+0x156>
 800b10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	617b      	str	r3, [r7, #20]
 800b120:	e7fe      	b.n	800b120 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b124:	699a      	ldr	r2, [r3, #24]
 800b126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b128:	18d1      	adds	r1, r2, r3
 800b12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b12e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b130:	f7ff ff0a 	bl	800af48 <prvInsertTimerInActiveList>
					break;
 800b134:	e015      	b.n	800b162 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b138:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b13c:	f003 0302 	and.w	r3, r3, #2
 800b140:	2b00      	cmp	r3, #0
 800b142:	d103      	bne.n	800b14c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800b144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b146:	f000 fca9 	bl	800ba9c <vPortFree>
 800b14a:	e00a      	b.n	800b162 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b152:	f023 0301 	bic.w	r3, r3, #1
 800b156:	b2da      	uxtb	r2, r3
 800b158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b15e:	e000      	b.n	800b162 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b160:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b162:	4b07      	ldr	r3, [pc, #28]	; (800b180 <prvProcessReceivedCommands+0x1b4>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	1d39      	adds	r1, r7, #4
 800b168:	2200      	movs	r2, #0
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7fe fa7c 	bl	8009668 <xQueueReceive>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	f47f af2e 	bne.w	800afd4 <prvProcessReceivedCommands+0x8>
	}
}
 800b178:	bf00      	nop
 800b17a:	3730      	adds	r7, #48	; 0x30
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	20000d44 	.word	0x20000d44

0800b184 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b088      	sub	sp, #32
 800b188:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b18a:	e047      	b.n	800b21c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b18c:	4b2d      	ldr	r3, [pc, #180]	; (800b244 <prvSwitchTimerLists+0xc0>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b196:	4b2b      	ldr	r3, [pc, #172]	; (800b244 <prvSwitchTimerLists+0xc0>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	3304      	adds	r3, #4
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7fd ff69 	bl	800907c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6a1b      	ldr	r3, [r3, #32]
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1b8:	f003 0304 	and.w	r3, r3, #4
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d02d      	beq.n	800b21c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	693a      	ldr	r2, [r7, #16]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b1ca:	68ba      	ldr	r2, [r7, #8]
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d90e      	bls.n	800b1f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1de:	4b19      	ldr	r3, [pc, #100]	; (800b244 <prvSwitchTimerLists+0xc0>)
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	3304      	adds	r3, #4
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	f7fd ff0e 	bl	800900a <vListInsert>
 800b1ee:	e015      	b.n	800b21c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	693a      	ldr	r2, [r7, #16]
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f7ff fd68 	bl	800acd0 <xTimerGenericCommand>
 800b200:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d109      	bne.n	800b21c <prvSwitchTimerLists+0x98>
 800b208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20c:	f383 8811 	msr	BASEPRI, r3
 800b210:	f3bf 8f6f 	isb	sy
 800b214:	f3bf 8f4f 	dsb	sy
 800b218:	603b      	str	r3, [r7, #0]
 800b21a:	e7fe      	b.n	800b21a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b21c:	4b09      	ldr	r3, [pc, #36]	; (800b244 <prvSwitchTimerLists+0xc0>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d1b2      	bne.n	800b18c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b226:	4b07      	ldr	r3, [pc, #28]	; (800b244 <prvSwitchTimerLists+0xc0>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b22c:	4b06      	ldr	r3, [pc, #24]	; (800b248 <prvSwitchTimerLists+0xc4>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a04      	ldr	r2, [pc, #16]	; (800b244 <prvSwitchTimerLists+0xc0>)
 800b232:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b234:	4a04      	ldr	r2, [pc, #16]	; (800b248 <prvSwitchTimerLists+0xc4>)
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	6013      	str	r3, [r2, #0]
}
 800b23a:	bf00      	nop
 800b23c:	3718      	adds	r7, #24
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	20000d3c 	.word	0x20000d3c
 800b248:	20000d40 	.word	0x20000d40

0800b24c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b252:	f000 f963 	bl	800b51c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b256:	4b15      	ldr	r3, [pc, #84]	; (800b2ac <prvCheckForValidListAndQueue+0x60>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d120      	bne.n	800b2a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b25e:	4814      	ldr	r0, [pc, #80]	; (800b2b0 <prvCheckForValidListAndQueue+0x64>)
 800b260:	f7fd fe82 	bl	8008f68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b264:	4813      	ldr	r0, [pc, #76]	; (800b2b4 <prvCheckForValidListAndQueue+0x68>)
 800b266:	f7fd fe7f 	bl	8008f68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b26a:	4b13      	ldr	r3, [pc, #76]	; (800b2b8 <prvCheckForValidListAndQueue+0x6c>)
 800b26c:	4a10      	ldr	r2, [pc, #64]	; (800b2b0 <prvCheckForValidListAndQueue+0x64>)
 800b26e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b270:	4b12      	ldr	r3, [pc, #72]	; (800b2bc <prvCheckForValidListAndQueue+0x70>)
 800b272:	4a10      	ldr	r2, [pc, #64]	; (800b2b4 <prvCheckForValidListAndQueue+0x68>)
 800b274:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b276:	2300      	movs	r3, #0
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	4b11      	ldr	r3, [pc, #68]	; (800b2c0 <prvCheckForValidListAndQueue+0x74>)
 800b27c:	4a11      	ldr	r2, [pc, #68]	; (800b2c4 <prvCheckForValidListAndQueue+0x78>)
 800b27e:	2110      	movs	r1, #16
 800b280:	200a      	movs	r0, #10
 800b282:	f7fd ff8d 	bl	80091a0 <xQueueGenericCreateStatic>
 800b286:	4602      	mov	r2, r0
 800b288:	4b08      	ldr	r3, [pc, #32]	; (800b2ac <prvCheckForValidListAndQueue+0x60>)
 800b28a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b28c:	4b07      	ldr	r3, [pc, #28]	; (800b2ac <prvCheckForValidListAndQueue+0x60>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d005      	beq.n	800b2a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b294:	4b05      	ldr	r3, [pc, #20]	; (800b2ac <prvCheckForValidListAndQueue+0x60>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	490b      	ldr	r1, [pc, #44]	; (800b2c8 <prvCheckForValidListAndQueue+0x7c>)
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fe fc4e 	bl	8009b3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2a0:	f000 f96a 	bl	800b578 <vPortExitCritical>
}
 800b2a4:	bf00      	nop
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	20000d44 	.word	0x20000d44
 800b2b0:	20000d14 	.word	0x20000d14
 800b2b4:	20000d28 	.word	0x20000d28
 800b2b8:	20000d3c 	.word	0x20000d3c
 800b2bc:	20000d40 	.word	0x20000d40
 800b2c0:	20000df0 	.word	0x20000df0
 800b2c4:	20000d50 	.word	0x20000d50
 800b2c8:	0800c574 	.word	0x0800c574

0800b2cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b085      	sub	sp, #20
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	3b04      	subs	r3, #4
 800b2dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b2e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	3b04      	subs	r3, #4
 800b2ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	f023 0201 	bic.w	r2, r3, #1
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	3b04      	subs	r3, #4
 800b2fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b2fc:	4a0c      	ldr	r2, [pc, #48]	; (800b330 <pxPortInitialiseStack+0x64>)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	3b14      	subs	r3, #20
 800b306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3b04      	subs	r3, #4
 800b312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f06f 0202 	mvn.w	r2, #2
 800b31a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	3b20      	subs	r3, #32
 800b320:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b322:	68fb      	ldr	r3, [r7, #12]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr
 800b330:	0800b335 	.word	0x0800b335

0800b334 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b33a:	2300      	movs	r3, #0
 800b33c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b33e:	4b11      	ldr	r3, [pc, #68]	; (800b384 <prvTaskExitError+0x50>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b346:	d009      	beq.n	800b35c <prvTaskExitError+0x28>
 800b348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34c:	f383 8811 	msr	BASEPRI, r3
 800b350:	f3bf 8f6f 	isb	sy
 800b354:	f3bf 8f4f 	dsb	sy
 800b358:	60fb      	str	r3, [r7, #12]
 800b35a:	e7fe      	b.n	800b35a <prvTaskExitError+0x26>
 800b35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b360:	f383 8811 	msr	BASEPRI, r3
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b36e:	bf00      	nop
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d0fc      	beq.n	800b370 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b376:	bf00      	nop
 800b378:	3714      	adds	r7, #20
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	200000cc 	.word	0x200000cc
	...

0800b390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b390:	4b07      	ldr	r3, [pc, #28]	; (800b3b0 <pxCurrentTCBConst2>)
 800b392:	6819      	ldr	r1, [r3, #0]
 800b394:	6808      	ldr	r0, [r1, #0]
 800b396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39a:	f380 8809 	msr	PSP, r0
 800b39e:	f3bf 8f6f 	isb	sy
 800b3a2:	f04f 0000 	mov.w	r0, #0
 800b3a6:	f380 8811 	msr	BASEPRI, r0
 800b3aa:	4770      	bx	lr
 800b3ac:	f3af 8000 	nop.w

0800b3b0 <pxCurrentTCBConst2>:
 800b3b0:	20000814 	.word	0x20000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b3b4:	bf00      	nop
 800b3b6:	bf00      	nop

0800b3b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b3b8:	4808      	ldr	r0, [pc, #32]	; (800b3dc <prvPortStartFirstTask+0x24>)
 800b3ba:	6800      	ldr	r0, [r0, #0]
 800b3bc:	6800      	ldr	r0, [r0, #0]
 800b3be:	f380 8808 	msr	MSP, r0
 800b3c2:	f04f 0000 	mov.w	r0, #0
 800b3c6:	f380 8814 	msr	CONTROL, r0
 800b3ca:	b662      	cpsie	i
 800b3cc:	b661      	cpsie	f
 800b3ce:	f3bf 8f4f 	dsb	sy
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	df00      	svc	0
 800b3d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b3da:	bf00      	nop
 800b3dc:	e000ed08 	.word	0xe000ed08

0800b3e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b086      	sub	sp, #24
 800b3e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b3e6:	4b44      	ldr	r3, [pc, #272]	; (800b4f8 <xPortStartScheduler+0x118>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a44      	ldr	r2, [pc, #272]	; (800b4fc <xPortStartScheduler+0x11c>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d109      	bne.n	800b404 <xPortStartScheduler+0x24>
 800b3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f4:	f383 8811 	msr	BASEPRI, r3
 800b3f8:	f3bf 8f6f 	isb	sy
 800b3fc:	f3bf 8f4f 	dsb	sy
 800b400:	613b      	str	r3, [r7, #16]
 800b402:	e7fe      	b.n	800b402 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b404:	4b3c      	ldr	r3, [pc, #240]	; (800b4f8 <xPortStartScheduler+0x118>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a3d      	ldr	r2, [pc, #244]	; (800b500 <xPortStartScheduler+0x120>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d109      	bne.n	800b422 <xPortStartScheduler+0x42>
 800b40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b412:	f383 8811 	msr	BASEPRI, r3
 800b416:	f3bf 8f6f 	isb	sy
 800b41a:	f3bf 8f4f 	dsb	sy
 800b41e:	60fb      	str	r3, [r7, #12]
 800b420:	e7fe      	b.n	800b420 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b422:	4b38      	ldr	r3, [pc, #224]	; (800b504 <xPortStartScheduler+0x124>)
 800b424:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	22ff      	movs	r2, #255	; 0xff
 800b432:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b43c:	78fb      	ldrb	r3, [r7, #3]
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b444:	b2da      	uxtb	r2, r3
 800b446:	4b30      	ldr	r3, [pc, #192]	; (800b508 <xPortStartScheduler+0x128>)
 800b448:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b44a:	4b30      	ldr	r3, [pc, #192]	; (800b50c <xPortStartScheduler+0x12c>)
 800b44c:	2207      	movs	r2, #7
 800b44e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b450:	e009      	b.n	800b466 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b452:	4b2e      	ldr	r3, [pc, #184]	; (800b50c <xPortStartScheduler+0x12c>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	3b01      	subs	r3, #1
 800b458:	4a2c      	ldr	r2, [pc, #176]	; (800b50c <xPortStartScheduler+0x12c>)
 800b45a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b45c:	78fb      	ldrb	r3, [r7, #3]
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	005b      	lsls	r3, r3, #1
 800b462:	b2db      	uxtb	r3, r3
 800b464:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b466:	78fb      	ldrb	r3, [r7, #3]
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b46e:	2b80      	cmp	r3, #128	; 0x80
 800b470:	d0ef      	beq.n	800b452 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b472:	4b26      	ldr	r3, [pc, #152]	; (800b50c <xPortStartScheduler+0x12c>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f1c3 0307 	rsb	r3, r3, #7
 800b47a:	2b04      	cmp	r3, #4
 800b47c:	d009      	beq.n	800b492 <xPortStartScheduler+0xb2>
 800b47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b482:	f383 8811 	msr	BASEPRI, r3
 800b486:	f3bf 8f6f 	isb	sy
 800b48a:	f3bf 8f4f 	dsb	sy
 800b48e:	60bb      	str	r3, [r7, #8]
 800b490:	e7fe      	b.n	800b490 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b492:	4b1e      	ldr	r3, [pc, #120]	; (800b50c <xPortStartScheduler+0x12c>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	021b      	lsls	r3, r3, #8
 800b498:	4a1c      	ldr	r2, [pc, #112]	; (800b50c <xPortStartScheduler+0x12c>)
 800b49a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b49c:	4b1b      	ldr	r3, [pc, #108]	; (800b50c <xPortStartScheduler+0x12c>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b4a4:	4a19      	ldr	r2, [pc, #100]	; (800b50c <xPortStartScheduler+0x12c>)
 800b4a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	b2da      	uxtb	r2, r3
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b4b0:	4b17      	ldr	r3, [pc, #92]	; (800b510 <xPortStartScheduler+0x130>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a16      	ldr	r2, [pc, #88]	; (800b510 <xPortStartScheduler+0x130>)
 800b4b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b4ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b4bc:	4b14      	ldr	r3, [pc, #80]	; (800b510 <xPortStartScheduler+0x130>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a13      	ldr	r2, [pc, #76]	; (800b510 <xPortStartScheduler+0x130>)
 800b4c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b4c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b4c8:	f000 f9a2 	bl	800b810 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b4cc:	4b11      	ldr	r3, [pc, #68]	; (800b514 <xPortStartScheduler+0x134>)
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b4d2:	f000 f9d9 	bl	800b888 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b4d6:	4b10      	ldr	r3, [pc, #64]	; (800b518 <xPortStartScheduler+0x138>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a0f      	ldr	r2, [pc, #60]	; (800b518 <xPortStartScheduler+0x138>)
 800b4dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b4e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b4e2:	f7ff ff69 	bl	800b3b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b4e6:	f7ff f817 	bl	800a518 <vTaskSwitchContext>
	prvTaskExitError();
 800b4ea:	f7ff ff23 	bl	800b334 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3718      	adds	r7, #24
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	e000ed00 	.word	0xe000ed00
 800b4fc:	410fc271 	.word	0x410fc271
 800b500:	410fc270 	.word	0x410fc270
 800b504:	e000e400 	.word	0xe000e400
 800b508:	20000e4c 	.word	0x20000e4c
 800b50c:	20000e50 	.word	0x20000e50
 800b510:	e000ed20 	.word	0xe000ed20
 800b514:	200000cc 	.word	0x200000cc
 800b518:	e000ef34 	.word	0xe000ef34

0800b51c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b526:	f383 8811 	msr	BASEPRI, r3
 800b52a:	f3bf 8f6f 	isb	sy
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b534:	4b0e      	ldr	r3, [pc, #56]	; (800b570 <vPortEnterCritical+0x54>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	3301      	adds	r3, #1
 800b53a:	4a0d      	ldr	r2, [pc, #52]	; (800b570 <vPortEnterCritical+0x54>)
 800b53c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b53e:	4b0c      	ldr	r3, [pc, #48]	; (800b570 <vPortEnterCritical+0x54>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2b01      	cmp	r3, #1
 800b544:	d10e      	bne.n	800b564 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b546:	4b0b      	ldr	r3, [pc, #44]	; (800b574 <vPortEnterCritical+0x58>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d009      	beq.n	800b564 <vPortEnterCritical+0x48>
 800b550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b554:	f383 8811 	msr	BASEPRI, r3
 800b558:	f3bf 8f6f 	isb	sy
 800b55c:	f3bf 8f4f 	dsb	sy
 800b560:	603b      	str	r3, [r7, #0]
 800b562:	e7fe      	b.n	800b562 <vPortEnterCritical+0x46>
	}
}
 800b564:	bf00      	nop
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr
 800b570:	200000cc 	.word	0x200000cc
 800b574:	e000ed04 	.word	0xe000ed04

0800b578 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b57e:	4b11      	ldr	r3, [pc, #68]	; (800b5c4 <vPortExitCritical+0x4c>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d109      	bne.n	800b59a <vPortExitCritical+0x22>
 800b586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b58a:	f383 8811 	msr	BASEPRI, r3
 800b58e:	f3bf 8f6f 	isb	sy
 800b592:	f3bf 8f4f 	dsb	sy
 800b596:	607b      	str	r3, [r7, #4]
 800b598:	e7fe      	b.n	800b598 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b59a:	4b0a      	ldr	r3, [pc, #40]	; (800b5c4 <vPortExitCritical+0x4c>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	3b01      	subs	r3, #1
 800b5a0:	4a08      	ldr	r2, [pc, #32]	; (800b5c4 <vPortExitCritical+0x4c>)
 800b5a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b5a4:	4b07      	ldr	r3, [pc, #28]	; (800b5c4 <vPortExitCritical+0x4c>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d104      	bne.n	800b5b6 <vPortExitCritical+0x3e>
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b5b6:	bf00      	nop
 800b5b8:	370c      	adds	r7, #12
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr
 800b5c2:	bf00      	nop
 800b5c4:	200000cc 	.word	0x200000cc
	...

0800b5d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b5d0:	f3ef 8009 	mrs	r0, PSP
 800b5d4:	f3bf 8f6f 	isb	sy
 800b5d8:	4b15      	ldr	r3, [pc, #84]	; (800b630 <pxCurrentTCBConst>)
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	f01e 0f10 	tst.w	lr, #16
 800b5e0:	bf08      	it	eq
 800b5e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b5e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ea:	6010      	str	r0, [r2, #0]
 800b5ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b5f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b5f4:	f380 8811 	msr	BASEPRI, r0
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	f3bf 8f6f 	isb	sy
 800b600:	f7fe ff8a 	bl	800a518 <vTaskSwitchContext>
 800b604:	f04f 0000 	mov.w	r0, #0
 800b608:	f380 8811 	msr	BASEPRI, r0
 800b60c:	bc09      	pop	{r0, r3}
 800b60e:	6819      	ldr	r1, [r3, #0]
 800b610:	6808      	ldr	r0, [r1, #0]
 800b612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b616:	f01e 0f10 	tst.w	lr, #16
 800b61a:	bf08      	it	eq
 800b61c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b620:	f380 8809 	msr	PSP, r0
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	f3af 8000 	nop.w

0800b630 <pxCurrentTCBConst>:
 800b630:	20000814 	.word	0x20000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b634:	bf00      	nop
 800b636:	bf00      	nop

0800b638 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
	__asm volatile
 800b63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b642:	f383 8811 	msr	BASEPRI, r3
 800b646:	f3bf 8f6f 	isb	sy
 800b64a:	f3bf 8f4f 	dsb	sy
 800b64e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b650:	f7fe feaa 	bl	800a3a8 <xTaskIncrementTick>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d003      	beq.n	800b662 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b65a:	4b06      	ldr	r3, [pc, #24]	; (800b674 <xPortSysTickHandler+0x3c>)
 800b65c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b660:	601a      	str	r2, [r3, #0]
 800b662:	2300      	movs	r3, #0
 800b664:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b66c:	bf00      	nop
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	e000ed04 	.word	0xe000ed04

0800b678 <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b088      	sub	sp, #32
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	4b5d      	ldr	r3, [pc, #372]	; (800b7f8 <vPortSuppressTicksAndSleep+0x180>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	429a      	cmp	r2, r3
 800b688:	d902      	bls.n	800b690 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800b68a:	4b5b      	ldr	r3, [pc, #364]	; (800b7f8 <vPortSuppressTicksAndSleep+0x180>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800b690:	4b5a      	ldr	r3, [pc, #360]	; (800b7fc <vPortSuppressTicksAndSleep+0x184>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a59      	ldr	r2, [pc, #356]	; (800b7fc <vPortSuppressTicksAndSleep+0x184>)
 800b696:	f023 0301 	bic.w	r3, r3, #1
 800b69a:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800b69c:	4b58      	ldr	r3, [pc, #352]	; (800b800 <vPortSuppressTicksAndSleep+0x188>)
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	3b01      	subs	r3, #1
 800b6a4:	4957      	ldr	r1, [pc, #348]	; (800b804 <vPortSuppressTicksAndSleep+0x18c>)
 800b6a6:	6809      	ldr	r1, [r1, #0]
 800b6a8:	fb01 f303 	mul.w	r3, r1, r3
 800b6ac:	4413      	add	r3, r2
 800b6ae:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800b6b0:	4b55      	ldr	r3, [pc, #340]	; (800b808 <vPortSuppressTicksAndSleep+0x190>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	69fa      	ldr	r2, [r7, #28]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d904      	bls.n	800b6c4 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800b6ba:	4b53      	ldr	r3, [pc, #332]	; (800b808 <vPortSuppressTicksAndSleep+0x190>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	69fa      	ldr	r2, [r7, #28]
 800b6c0:	1ad3      	subs	r3, r2, r3
 800b6c2:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800b6c4:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800b6c6:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800b6ca:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800b6ce:	f7ff f8f1 	bl	800a8b4 <eTaskConfirmSleepModeStatus>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d110      	bne.n	800b6fa <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800b6d8:	4b49      	ldr	r3, [pc, #292]	; (800b800 <vPortSuppressTicksAndSleep+0x188>)
 800b6da:	4a4c      	ldr	r2, [pc, #304]	; (800b80c <vPortSuppressTicksAndSleep+0x194>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b6e0:	4b46      	ldr	r3, [pc, #280]	; (800b7fc <vPortSuppressTicksAndSleep+0x184>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a45      	ldr	r2, [pc, #276]	; (800b7fc <vPortSuppressTicksAndSleep+0x184>)
 800b6e6:	f043 0301 	orr.w	r3, r3, #1
 800b6ea:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800b6ec:	4b45      	ldr	r3, [pc, #276]	; (800b804 <vPortSuppressTicksAndSleep+0x18c>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a46      	ldr	r2, [pc, #280]	; (800b80c <vPortSuppressTicksAndSleep+0x194>)
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800b6f6:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800b6f8:	e07a      	b.n	800b7f0 <vPortSuppressTicksAndSleep+0x178>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800b6fa:	4a44      	ldr	r2, [pc, #272]	; (800b80c <vPortSuppressTicksAndSleep+0x194>)
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b700:	4b3f      	ldr	r3, [pc, #252]	; (800b800 <vPortSuppressTicksAndSleep+0x188>)
 800b702:	2200      	movs	r2, #0
 800b704:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b706:	4b3d      	ldr	r3, [pc, #244]	; (800b7fc <vPortSuppressTicksAndSleep+0x184>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a3c      	ldr	r2, [pc, #240]	; (800b7fc <vPortSuppressTicksAndSleep+0x184>)
 800b70c:	f043 0301 	orr.w	r3, r3, #1
 800b710:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	60fb      	str	r3, [r7, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 800b716:	f107 030c 	add.w	r3, r7, #12
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7f4 ff0e 	bl	800053c <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d004      	beq.n	800b730 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800b726:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800b72a:	bf30      	wfi
				__asm volatile( "isb" );
 800b72c:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 800b730:	1d3b      	adds	r3, r7, #4
 800b732:	4618      	mov	r0, r3
 800b734:	f7f4 ff0c 	bl	8000550 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800b738:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800b73a:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800b73e:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800b742:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800b744:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800b748:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800b74c:	4b2b      	ldr	r3, [pc, #172]	; (800b7fc <vPortSuppressTicksAndSleep+0x184>)
 800b74e:	2206      	movs	r2, #6
 800b750:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800b752:	4b2a      	ldr	r3, [pc, #168]	; (800b7fc <vPortSuppressTicksAndSleep+0x184>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d01d      	beq.n	800b79a <vPortSuppressTicksAndSleep+0x122>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800b75e:	4b29      	ldr	r3, [pc, #164]	; (800b804 <vPortSuppressTicksAndSleep+0x18c>)
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	4b27      	ldr	r3, [pc, #156]	; (800b800 <vPortSuppressTicksAndSleep+0x188>)
 800b764:	6819      	ldr	r1, [r3, #0]
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	1acb      	subs	r3, r1, r3
 800b76a:	4413      	add	r3, r2
 800b76c:	3b01      	subs	r3, #1
 800b76e:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800b770:	4b25      	ldr	r3, [pc, #148]	; (800b808 <vPortSuppressTicksAndSleep+0x190>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	697a      	ldr	r2, [r7, #20]
 800b776:	429a      	cmp	r2, r3
 800b778:	d304      	bcc.n	800b784 <vPortSuppressTicksAndSleep+0x10c>
 800b77a:	4b22      	ldr	r3, [pc, #136]	; (800b804 <vPortSuppressTicksAndSleep+0x18c>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	697a      	ldr	r2, [r7, #20]
 800b780:	429a      	cmp	r2, r3
 800b782:	d903      	bls.n	800b78c <vPortSuppressTicksAndSleep+0x114>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800b784:	4b1f      	ldr	r3, [pc, #124]	; (800b804 <vPortSuppressTicksAndSleep+0x18c>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3b01      	subs	r3, #1
 800b78a:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800b78c:	4a1f      	ldr	r2, [pc, #124]	; (800b80c <vPortSuppressTicksAndSleep+0x194>)
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	3b01      	subs	r3, #1
 800b796:	61bb      	str	r3, [r7, #24]
 800b798:	e018      	b.n	800b7cc <vPortSuppressTicksAndSleep+0x154>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4a19      	ldr	r2, [pc, #100]	; (800b804 <vPortSuppressTicksAndSleep+0x18c>)
 800b79e:	6812      	ldr	r2, [r2, #0]
 800b7a0:	fb02 f203 	mul.w	r2, r2, r3
 800b7a4:	4b16      	ldr	r3, [pc, #88]	; (800b800 <vPortSuppressTicksAndSleep+0x188>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	613b      	str	r3, [r7, #16]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800b7ac:	4b15      	ldr	r3, [pc, #84]	; (800b804 <vPortSuppressTicksAndSleep+0x18c>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	693a      	ldr	r2, [r7, #16]
 800b7b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7b6:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	4a11      	ldr	r2, [pc, #68]	; (800b804 <vPortSuppressTicksAndSleep+0x18c>)
 800b7be:	6812      	ldr	r2, [r2, #0]
 800b7c0:	fb02 f203 	mul.w	r2, r2, r3
 800b7c4:	4911      	ldr	r1, [pc, #68]	; (800b80c <vPortSuppressTicksAndSleep+0x194>)
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	1ad3      	subs	r3, r2, r3
 800b7ca:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b7cc:	4b0c      	ldr	r3, [pc, #48]	; (800b800 <vPortSuppressTicksAndSleep+0x188>)
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b7d2:	4b0a      	ldr	r3, [pc, #40]	; (800b7fc <vPortSuppressTicksAndSleep+0x184>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a09      	ldr	r2, [pc, #36]	; (800b7fc <vPortSuppressTicksAndSleep+0x184>)
 800b7d8:	f043 0301 	orr.w	r3, r3, #1
 800b7dc:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800b7de:	69b8      	ldr	r0, [r7, #24]
 800b7e0:	f7fe fdbc 	bl	800a35c <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800b7e4:	4b07      	ldr	r3, [pc, #28]	; (800b804 <vPortSuppressTicksAndSleep+0x18c>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a08      	ldr	r2, [pc, #32]	; (800b80c <vPortSuppressTicksAndSleep+0x194>)
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800b7ee:	b662      	cpsie	i
	}
 800b7f0:	bf00      	nop
 800b7f2:	3720      	adds	r7, #32
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	20000e44 	.word	0x20000e44
 800b7fc:	e000e010 	.word	0xe000e010
 800b800:	e000e018 	.word	0xe000e018
 800b804:	20000e40 	.word	0x20000e40
 800b808:	20000e48 	.word	0x20000e48
 800b80c:	e000e014 	.word	0xe000e014

0800b810 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b810:	b480      	push	{r7}
 800b812:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800b814:	4b14      	ldr	r3, [pc, #80]	; (800b868 <vPortSetupTimerInterrupt+0x58>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a14      	ldr	r2, [pc, #80]	; (800b86c <vPortSetupTimerInterrupt+0x5c>)
 800b81a:	fba2 2303 	umull	r2, r3, r2, r3
 800b81e:	099b      	lsrs	r3, r3, #6
 800b820:	4a13      	ldr	r2, [pc, #76]	; (800b870 <vPortSetupTimerInterrupt+0x60>)
 800b822:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800b824:	4b12      	ldr	r3, [pc, #72]	; (800b870 <vPortSetupTimerInterrupt+0x60>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800b82c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b830:	4a10      	ldr	r2, [pc, #64]	; (800b874 <vPortSetupTimerInterrupt+0x64>)
 800b832:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800b834:	4b10      	ldr	r3, [pc, #64]	; (800b878 <vPortSetupTimerInterrupt+0x68>)
 800b836:	222d      	movs	r2, #45	; 0x2d
 800b838:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b83a:	4b10      	ldr	r3, [pc, #64]	; (800b87c <vPortSetupTimerInterrupt+0x6c>)
 800b83c:	2200      	movs	r2, #0
 800b83e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b840:	4b0f      	ldr	r3, [pc, #60]	; (800b880 <vPortSetupTimerInterrupt+0x70>)
 800b842:	2200      	movs	r2, #0
 800b844:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b846:	4b08      	ldr	r3, [pc, #32]	; (800b868 <vPortSetupTimerInterrupt+0x58>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a08      	ldr	r2, [pc, #32]	; (800b86c <vPortSetupTimerInterrupt+0x5c>)
 800b84c:	fba2 2303 	umull	r2, r3, r2, r3
 800b850:	099b      	lsrs	r3, r3, #6
 800b852:	4a0c      	ldr	r2, [pc, #48]	; (800b884 <vPortSetupTimerInterrupt+0x74>)
 800b854:	3b01      	subs	r3, #1
 800b856:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b858:	4b08      	ldr	r3, [pc, #32]	; (800b87c <vPortSetupTimerInterrupt+0x6c>)
 800b85a:	2207      	movs	r2, #7
 800b85c:	601a      	str	r2, [r3, #0]
}
 800b85e:	bf00      	nop
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr
 800b868:	200000a0 	.word	0x200000a0
 800b86c:	10624dd3 	.word	0x10624dd3
 800b870:	20000e40 	.word	0x20000e40
 800b874:	20000e44 	.word	0x20000e44
 800b878:	20000e48 	.word	0x20000e48
 800b87c:	e000e010 	.word	0xe000e010
 800b880:	e000e018 	.word	0xe000e018
 800b884:	e000e014 	.word	0xe000e014

0800b888 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b888:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b898 <vPortEnableVFP+0x10>
 800b88c:	6801      	ldr	r1, [r0, #0]
 800b88e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b892:	6001      	str	r1, [r0, #0]
 800b894:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b896:	bf00      	nop
 800b898:	e000ed88 	.word	0xe000ed88

0800b89c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b89c:	b480      	push	{r7}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b8a2:	f3ef 8305 	mrs	r3, IPSR
 800b8a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2b0f      	cmp	r3, #15
 800b8ac:	d913      	bls.n	800b8d6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b8ae:	4a16      	ldr	r2, [pc, #88]	; (800b908 <vPortValidateInterruptPriority+0x6c>)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b8b8:	4b14      	ldr	r3, [pc, #80]	; (800b90c <vPortValidateInterruptPriority+0x70>)
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	7afa      	ldrb	r2, [r7, #11]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d209      	bcs.n	800b8d6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c6:	f383 8811 	msr	BASEPRI, r3
 800b8ca:	f3bf 8f6f 	isb	sy
 800b8ce:	f3bf 8f4f 	dsb	sy
 800b8d2:	607b      	str	r3, [r7, #4]
 800b8d4:	e7fe      	b.n	800b8d4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8d6:	4b0e      	ldr	r3, [pc, #56]	; (800b910 <vPortValidateInterruptPriority+0x74>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b8de:	4b0d      	ldr	r3, [pc, #52]	; (800b914 <vPortValidateInterruptPriority+0x78>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d909      	bls.n	800b8fa <vPortValidateInterruptPriority+0x5e>
 800b8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ea:	f383 8811 	msr	BASEPRI, r3
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	f3bf 8f4f 	dsb	sy
 800b8f6:	603b      	str	r3, [r7, #0]
 800b8f8:	e7fe      	b.n	800b8f8 <vPortValidateInterruptPriority+0x5c>
	}
 800b8fa:	bf00      	nop
 800b8fc:	3714      	adds	r7, #20
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop
 800b908:	e000e3f0 	.word	0xe000e3f0
 800b90c:	20000e4c 	.word	0x20000e4c
 800b910:	e000ed0c 	.word	0xe000ed0c
 800b914:	20000e50 	.word	0x20000e50

0800b918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b08a      	sub	sp, #40	; 0x28
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b920:	2300      	movs	r3, #0
 800b922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b924:	f7fe fc16 	bl	800a154 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b928:	4b57      	ldr	r3, [pc, #348]	; (800ba88 <pvPortMalloc+0x170>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d101      	bne.n	800b934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b930:	f000 f90c 	bl	800bb4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b934:	4b55      	ldr	r3, [pc, #340]	; (800ba8c <pvPortMalloc+0x174>)
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4013      	ands	r3, r2
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f040 808c 	bne.w	800ba5a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d01c      	beq.n	800b982 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b948:	2208      	movs	r2, #8
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4413      	add	r3, r2
 800b94e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f003 0307 	and.w	r3, r3, #7
 800b956:	2b00      	cmp	r3, #0
 800b958:	d013      	beq.n	800b982 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f023 0307 	bic.w	r3, r3, #7
 800b960:	3308      	adds	r3, #8
 800b962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f003 0307 	and.w	r3, r3, #7
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d009      	beq.n	800b982 <pvPortMalloc+0x6a>
 800b96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b972:	f383 8811 	msr	BASEPRI, r3
 800b976:	f3bf 8f6f 	isb	sy
 800b97a:	f3bf 8f4f 	dsb	sy
 800b97e:	617b      	str	r3, [r7, #20]
 800b980:	e7fe      	b.n	800b980 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d068      	beq.n	800ba5a <pvPortMalloc+0x142>
 800b988:	4b41      	ldr	r3, [pc, #260]	; (800ba90 <pvPortMalloc+0x178>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d863      	bhi.n	800ba5a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b992:	4b40      	ldr	r3, [pc, #256]	; (800ba94 <pvPortMalloc+0x17c>)
 800b994:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b996:	4b3f      	ldr	r3, [pc, #252]	; (800ba94 <pvPortMalloc+0x17c>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b99c:	e004      	b.n	800b9a8 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d903      	bls.n	800b9ba <pvPortMalloc+0xa2>
 800b9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d1f1      	bne.n	800b99e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b9ba:	4b33      	ldr	r3, [pc, #204]	; (800ba88 <pvPortMalloc+0x170>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d04a      	beq.n	800ba5a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9c4:	6a3b      	ldr	r3, [r7, #32]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2208      	movs	r2, #8
 800b9ca:	4413      	add	r3, r2
 800b9cc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	6a3b      	ldr	r3, [r7, #32]
 800b9d4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d8:	685a      	ldr	r2, [r3, #4]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	1ad2      	subs	r2, r2, r3
 800b9de:	2308      	movs	r3, #8
 800b9e0:	005b      	lsls	r3, r3, #1
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d91e      	bls.n	800ba24 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b9e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	f003 0307 	and.w	r3, r3, #7
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d009      	beq.n	800ba0c <pvPortMalloc+0xf4>
 800b9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fc:	f383 8811 	msr	BASEPRI, r3
 800ba00:	f3bf 8f6f 	isb	sy
 800ba04:	f3bf 8f4f 	dsb	sy
 800ba08:	613b      	str	r3, [r7, #16]
 800ba0a:	e7fe      	b.n	800ba0a <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0e:	685a      	ldr	r2, [r3, #4]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	1ad2      	subs	r2, r2, r3
 800ba14:	69bb      	ldr	r3, [r7, #24]
 800ba16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba1e:	69b8      	ldr	r0, [r7, #24]
 800ba20:	f000 f8f6 	bl	800bc10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba24:	4b1a      	ldr	r3, [pc, #104]	; (800ba90 <pvPortMalloc+0x178>)
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	1ad3      	subs	r3, r2, r3
 800ba2e:	4a18      	ldr	r2, [pc, #96]	; (800ba90 <pvPortMalloc+0x178>)
 800ba30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba32:	4b17      	ldr	r3, [pc, #92]	; (800ba90 <pvPortMalloc+0x178>)
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	4b18      	ldr	r3, [pc, #96]	; (800ba98 <pvPortMalloc+0x180>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d203      	bcs.n	800ba46 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba3e:	4b14      	ldr	r3, [pc, #80]	; (800ba90 <pvPortMalloc+0x178>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a15      	ldr	r2, [pc, #84]	; (800ba98 <pvPortMalloc+0x180>)
 800ba44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba48:	685a      	ldr	r2, [r3, #4]
 800ba4a:	4b10      	ldr	r3, [pc, #64]	; (800ba8c <pvPortMalloc+0x174>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	431a      	orrs	r2, r3
 800ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba56:	2200      	movs	r2, #0
 800ba58:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba5a:	f7fe fbc1 	bl	800a1e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	f003 0307 	and.w	r3, r3, #7
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d009      	beq.n	800ba7c <pvPortMalloc+0x164>
 800ba68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6c:	f383 8811 	msr	BASEPRI, r3
 800ba70:	f3bf 8f6f 	isb	sy
 800ba74:	f3bf 8f4f 	dsb	sy
 800ba78:	60fb      	str	r3, [r7, #12]
 800ba7a:	e7fe      	b.n	800ba7a <pvPortMalloc+0x162>
	return pvReturn;
 800ba7c:	69fb      	ldr	r3, [r7, #28]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3728      	adds	r7, #40	; 0x28
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	20004a5c 	.word	0x20004a5c
 800ba8c:	20004a68 	.word	0x20004a68
 800ba90:	20004a60 	.word	0x20004a60
 800ba94:	20004a54 	.word	0x20004a54
 800ba98:	20004a64 	.word	0x20004a64

0800ba9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b086      	sub	sp, #24
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d046      	beq.n	800bb3c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800baae:	2308      	movs	r3, #8
 800bab0:	425b      	negs	r3, r3
 800bab2:	697a      	ldr	r2, [r7, #20]
 800bab4:	4413      	add	r3, r2
 800bab6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	685a      	ldr	r2, [r3, #4]
 800bac0:	4b20      	ldr	r3, [pc, #128]	; (800bb44 <vPortFree+0xa8>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4013      	ands	r3, r2
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d109      	bne.n	800bade <vPortFree+0x42>
 800baca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bace:	f383 8811 	msr	BASEPRI, r3
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	60fb      	str	r3, [r7, #12]
 800badc:	e7fe      	b.n	800badc <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d009      	beq.n	800bafa <vPortFree+0x5e>
 800bae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baea:	f383 8811 	msr	BASEPRI, r3
 800baee:	f3bf 8f6f 	isb	sy
 800baf2:	f3bf 8f4f 	dsb	sy
 800baf6:	60bb      	str	r3, [r7, #8]
 800baf8:	e7fe      	b.n	800baf8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	685a      	ldr	r2, [r3, #4]
 800bafe:	4b11      	ldr	r3, [pc, #68]	; (800bb44 <vPortFree+0xa8>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4013      	ands	r3, r2
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d019      	beq.n	800bb3c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d115      	bne.n	800bb3c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	685a      	ldr	r2, [r3, #4]
 800bb14:	4b0b      	ldr	r3, [pc, #44]	; (800bb44 <vPortFree+0xa8>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	43db      	mvns	r3, r3
 800bb1a:	401a      	ands	r2, r3
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb20:	f7fe fb18 	bl	800a154 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	685a      	ldr	r2, [r3, #4]
 800bb28:	4b07      	ldr	r3, [pc, #28]	; (800bb48 <vPortFree+0xac>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	4a06      	ldr	r2, [pc, #24]	; (800bb48 <vPortFree+0xac>)
 800bb30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb32:	6938      	ldr	r0, [r7, #16]
 800bb34:	f000 f86c 	bl	800bc10 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bb38:	f7fe fb52 	bl	800a1e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb3c:	bf00      	nop
 800bb3e:	3718      	adds	r7, #24
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	20004a68 	.word	0x20004a68
 800bb48:	20004a60 	.word	0x20004a60

0800bb4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b085      	sub	sp, #20
 800bb50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb52:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bb56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb58:	4b27      	ldr	r3, [pc, #156]	; (800bbf8 <prvHeapInit+0xac>)
 800bb5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f003 0307 	and.w	r3, r3, #7
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00c      	beq.n	800bb80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	3307      	adds	r3, #7
 800bb6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f023 0307 	bic.w	r3, r3, #7
 800bb72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb74:	68ba      	ldr	r2, [r7, #8]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	1ad3      	subs	r3, r2, r3
 800bb7a:	4a1f      	ldr	r2, [pc, #124]	; (800bbf8 <prvHeapInit+0xac>)
 800bb7c:	4413      	add	r3, r2
 800bb7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb84:	4a1d      	ldr	r2, [pc, #116]	; (800bbfc <prvHeapInit+0xb0>)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb8a:	4b1c      	ldr	r3, [pc, #112]	; (800bbfc <prvHeapInit+0xb0>)
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	68ba      	ldr	r2, [r7, #8]
 800bb94:	4413      	add	r3, r2
 800bb96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb98:	2208      	movs	r2, #8
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	1a9b      	subs	r3, r3, r2
 800bb9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f023 0307 	bic.w	r3, r3, #7
 800bba6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	4a15      	ldr	r2, [pc, #84]	; (800bc00 <prvHeapInit+0xb4>)
 800bbac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bbae:	4b14      	ldr	r3, [pc, #80]	; (800bc00 <prvHeapInit+0xb4>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bbb6:	4b12      	ldr	r3, [pc, #72]	; (800bc00 <prvHeapInit+0xb4>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	1ad2      	subs	r2, r2, r3
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bbcc:	4b0c      	ldr	r3, [pc, #48]	; (800bc00 <prvHeapInit+0xb4>)
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	4a0a      	ldr	r2, [pc, #40]	; (800bc04 <prvHeapInit+0xb8>)
 800bbda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	4a09      	ldr	r2, [pc, #36]	; (800bc08 <prvHeapInit+0xbc>)
 800bbe2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bbe4:	4b09      	ldr	r3, [pc, #36]	; (800bc0c <prvHeapInit+0xc0>)
 800bbe6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bbea:	601a      	str	r2, [r3, #0]
}
 800bbec:	bf00      	nop
 800bbee:	3714      	adds	r7, #20
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr
 800bbf8:	20000e54 	.word	0x20000e54
 800bbfc:	20004a54 	.word	0x20004a54
 800bc00:	20004a5c 	.word	0x20004a5c
 800bc04:	20004a64 	.word	0x20004a64
 800bc08:	20004a60 	.word	0x20004a60
 800bc0c:	20004a68 	.word	0x20004a68

0800bc10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc18:	4b28      	ldr	r3, [pc, #160]	; (800bcbc <prvInsertBlockIntoFreeList+0xac>)
 800bc1a:	60fb      	str	r3, [r7, #12]
 800bc1c:	e002      	b.n	800bc24 <prvInsertBlockIntoFreeList+0x14>
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	60fb      	str	r3, [r7, #12]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d8f7      	bhi.n	800bc1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	68ba      	ldr	r2, [r7, #8]
 800bc38:	4413      	add	r3, r2
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d108      	bne.n	800bc52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	685a      	ldr	r2, [r3, #4]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	441a      	add	r2, r3
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	68ba      	ldr	r2, [r7, #8]
 800bc5c:	441a      	add	r2, r3
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d118      	bne.n	800bc98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	4b15      	ldr	r3, [pc, #84]	; (800bcc0 <prvInsertBlockIntoFreeList+0xb0>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d00d      	beq.n	800bc8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	685a      	ldr	r2, [r3, #4]
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	441a      	add	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	601a      	str	r2, [r3, #0]
 800bc8c:	e008      	b.n	800bca0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc8e:	4b0c      	ldr	r3, [pc, #48]	; (800bcc0 <prvInsertBlockIntoFreeList+0xb0>)
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	601a      	str	r2, [r3, #0]
 800bc96:	e003      	b.n	800bca0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bca0:	68fa      	ldr	r2, [r7, #12]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d002      	beq.n	800bcae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcae:	bf00      	nop
 800bcb0:	3714      	adds	r7, #20
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr
 800bcba:	bf00      	nop
 800bcbc:	20004a54 	.word	0x20004a54
 800bcc0:	20004a5c 	.word	0x20004a5c

0800bcc4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bcc8:	2201      	movs	r2, #1
 800bcca:	490e      	ldr	r1, [pc, #56]	; (800bd04 <MX_USB_HOST_Init+0x40>)
 800bccc:	480e      	ldr	r0, [pc, #56]	; (800bd08 <MX_USB_HOST_Init+0x44>)
 800bcce:	f7fb f873 	bl	8006db8 <USBH_Init>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d001      	beq.n	800bcdc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bcd8:	f7f5 fb20 	bl	800131c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bcdc:	490b      	ldr	r1, [pc, #44]	; (800bd0c <MX_USB_HOST_Init+0x48>)
 800bcde:	480a      	ldr	r0, [pc, #40]	; (800bd08 <MX_USB_HOST_Init+0x44>)
 800bce0:	f7fb f91a 	bl	8006f18 <USBH_RegisterClass>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d001      	beq.n	800bcee <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bcea:	f7f5 fb17 	bl	800131c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bcee:	4806      	ldr	r0, [pc, #24]	; (800bd08 <MX_USB_HOST_Init+0x44>)
 800bcf0:	f7fb f99e 	bl	8007030 <USBH_Start>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d001      	beq.n	800bcfe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bcfa:	f7f5 fb0f 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bcfe:	bf00      	nop
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	0800bd11 	.word	0x0800bd11
 800bd08:	20004cac 	.word	0x20004cac
 800bd0c:	200000ac 	.word	0x200000ac

0800bd10 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	460b      	mov	r3, r1
 800bd1a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bd1c:	78fb      	ldrb	r3, [r7, #3]
 800bd1e:	3b01      	subs	r3, #1
 800bd20:	2b04      	cmp	r3, #4
 800bd22:	d819      	bhi.n	800bd58 <USBH_UserProcess+0x48>
 800bd24:	a201      	add	r2, pc, #4	; (adr r2, 800bd2c <USBH_UserProcess+0x1c>)
 800bd26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd2a:	bf00      	nop
 800bd2c:	0800bd59 	.word	0x0800bd59
 800bd30:	0800bd49 	.word	0x0800bd49
 800bd34:	0800bd59 	.word	0x0800bd59
 800bd38:	0800bd51 	.word	0x0800bd51
 800bd3c:	0800bd41 	.word	0x0800bd41
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bd40:	4b09      	ldr	r3, [pc, #36]	; (800bd68 <USBH_UserProcess+0x58>)
 800bd42:	2203      	movs	r2, #3
 800bd44:	701a      	strb	r2, [r3, #0]
  break;
 800bd46:	e008      	b.n	800bd5a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bd48:	4b07      	ldr	r3, [pc, #28]	; (800bd68 <USBH_UserProcess+0x58>)
 800bd4a:	2202      	movs	r2, #2
 800bd4c:	701a      	strb	r2, [r3, #0]
  break;
 800bd4e:	e004      	b.n	800bd5a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bd50:	4b05      	ldr	r3, [pc, #20]	; (800bd68 <USBH_UserProcess+0x58>)
 800bd52:	2201      	movs	r2, #1
 800bd54:	701a      	strb	r2, [r3, #0]
  break;
 800bd56:	e000      	b.n	800bd5a <USBH_UserProcess+0x4a>

  default:
  break;
 800bd58:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bd5a:	bf00      	nop
 800bd5c:	370c      	adds	r7, #12
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr
 800bd66:	bf00      	nop
 800bd68:	20004a6c 	.word	0x20004a6c

0800bd6c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b08a      	sub	sp, #40	; 0x28
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd74:	f107 0314 	add.w	r3, r7, #20
 800bd78:	2200      	movs	r2, #0
 800bd7a:	601a      	str	r2, [r3, #0]
 800bd7c:	605a      	str	r2, [r3, #4]
 800bd7e:	609a      	str	r2, [r3, #8]
 800bd80:	60da      	str	r2, [r3, #12]
 800bd82:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bd8c:	d147      	bne.n	800be1e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd8e:	2300      	movs	r3, #0
 800bd90:	613b      	str	r3, [r7, #16]
 800bd92:	4b25      	ldr	r3, [pc, #148]	; (800be28 <HAL_HCD_MspInit+0xbc>)
 800bd94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd96:	4a24      	ldr	r2, [pc, #144]	; (800be28 <HAL_HCD_MspInit+0xbc>)
 800bd98:	f043 0301 	orr.w	r3, r3, #1
 800bd9c:	6313      	str	r3, [r2, #48]	; 0x30
 800bd9e:	4b22      	ldr	r3, [pc, #136]	; (800be28 <HAL_HCD_MspInit+0xbc>)
 800bda0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda2:	f003 0301 	and.w	r3, r3, #1
 800bda6:	613b      	str	r3, [r7, #16]
 800bda8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bdaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bdb8:	f107 0314 	add.w	r3, r7, #20
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	481b      	ldr	r0, [pc, #108]	; (800be2c <HAL_HCD_MspInit+0xc0>)
 800bdc0:	f7f6 fa7a 	bl	80022b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bdc4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800bdc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdca:	2302      	movs	r3, #2
 800bdcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bdd6:	230a      	movs	r3, #10
 800bdd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bdda:	f107 0314 	add.w	r3, r7, #20
 800bdde:	4619      	mov	r1, r3
 800bde0:	4812      	ldr	r0, [pc, #72]	; (800be2c <HAL_HCD_MspInit+0xc0>)
 800bde2:	f7f6 fa69 	bl	80022b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bde6:	4b10      	ldr	r3, [pc, #64]	; (800be28 <HAL_HCD_MspInit+0xbc>)
 800bde8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdea:	4a0f      	ldr	r2, [pc, #60]	; (800be28 <HAL_HCD_MspInit+0xbc>)
 800bdec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdf0:	6353      	str	r3, [r2, #52]	; 0x34
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	60fb      	str	r3, [r7, #12]
 800bdf6:	4b0c      	ldr	r3, [pc, #48]	; (800be28 <HAL_HCD_MspInit+0xbc>)
 800bdf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdfa:	4a0b      	ldr	r2, [pc, #44]	; (800be28 <HAL_HCD_MspInit+0xbc>)
 800bdfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be00:	6453      	str	r3, [r2, #68]	; 0x44
 800be02:	4b09      	ldr	r3, [pc, #36]	; (800be28 <HAL_HCD_MspInit+0xbc>)
 800be04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be0a:	60fb      	str	r3, [r7, #12]
 800be0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800be0e:	2200      	movs	r2, #0
 800be10:	2105      	movs	r1, #5
 800be12:	2043      	movs	r0, #67	; 0x43
 800be14:	f7f6 fa19 	bl	800224a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800be18:	2043      	movs	r0, #67	; 0x43
 800be1a:	f7f6 fa32 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800be1e:	bf00      	nop
 800be20:	3728      	adds	r7, #40	; 0x28
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	40023800 	.word	0x40023800
 800be2c:	40020000 	.word	0x40020000

0800be30 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be3e:	4618      	mov	r0, r3
 800be40:	f7fb fda3 	bl	800798a <USBH_LL_IncTimer>
}
 800be44:	bf00      	nop
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7fb fde7 	bl	8007a2e <USBH_LL_Connect>
}
 800be60:	bf00      	nop
 800be62:	3708      	adds	r7, #8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be76:	4618      	mov	r0, r3
 800be78:	f7fb fdfc 	bl	8007a74 <USBH_LL_Disconnect>
}
 800be7c:	bf00      	nop
 800be7e:	3708      	adds	r7, #8
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	460b      	mov	r3, r1
 800be8e:	70fb      	strb	r3, [r7, #3]
 800be90:	4613      	mov	r3, r2
 800be92:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7fb fe33 	bl	8007b06 <USBH_LL_NotifyURBChange>
#endif
}
 800bea0:	bf00      	nop
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7fb fd91 	bl	80079de <USBH_LL_PortEnabled>
} 
 800bebc:	bf00      	nop
 800bebe:	3708      	adds	r7, #8
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7fb fd9d 	bl	8007a12 <USBH_LL_PortDisabled>
} 
 800bed8:	bf00      	nop
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d12a      	bne.n	800bf48 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bef2:	4a18      	ldr	r2, [pc, #96]	; (800bf54 <USBH_LL_Init+0x74>)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4a15      	ldr	r2, [pc, #84]	; (800bf54 <USBH_LL_Init+0x74>)
 800befe:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bf02:	4b14      	ldr	r3, [pc, #80]	; (800bf54 <USBH_LL_Init+0x74>)
 800bf04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bf08:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bf0a:	4b12      	ldr	r3, [pc, #72]	; (800bf54 <USBH_LL_Init+0x74>)
 800bf0c:	2208      	movs	r2, #8
 800bf0e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bf10:	4b10      	ldr	r3, [pc, #64]	; (800bf54 <USBH_LL_Init+0x74>)
 800bf12:	2201      	movs	r2, #1
 800bf14:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bf16:	4b0f      	ldr	r3, [pc, #60]	; (800bf54 <USBH_LL_Init+0x74>)
 800bf18:	2200      	movs	r2, #0
 800bf1a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bf1c:	4b0d      	ldr	r3, [pc, #52]	; (800bf54 <USBH_LL_Init+0x74>)
 800bf1e:	2202      	movs	r2, #2
 800bf20:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bf22:	4b0c      	ldr	r3, [pc, #48]	; (800bf54 <USBH_LL_Init+0x74>)
 800bf24:	2200      	movs	r2, #0
 800bf26:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bf28:	480a      	ldr	r0, [pc, #40]	; (800bf54 <USBH_LL_Init+0x74>)
 800bf2a:	f7f6 fb78 	bl	800261e <HAL_HCD_Init>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d001      	beq.n	800bf38 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bf34:	f7f5 f9f2 	bl	800131c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bf38:	4806      	ldr	r0, [pc, #24]	; (800bf54 <USBH_LL_Init+0x74>)
 800bf3a:	f7f6 ff7b 	bl	8002e34 <HAL_HCD_GetCurrentFrame>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	4619      	mov	r1, r3
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f7fb fd12 	bl	800796c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bf48:	2300      	movs	r3, #0
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3708      	adds	r7, #8
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	20005090 	.word	0x20005090

0800bf58 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf60:	2300      	movs	r3, #0
 800bf62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf64:	2300      	movs	r3, #0
 800bf66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f7f6 fee8 	bl	8002d44 <HAL_HCD_Start>
 800bf74:	4603      	mov	r3, r0
 800bf76:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bf78:	7bfb      	ldrb	r3, [r7, #15]
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f000 f95c 	bl	800c238 <USBH_Get_USB_Status>
 800bf80:	4603      	mov	r3, r0
 800bf82:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bf84:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b084      	sub	sp, #16
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf96:	2300      	movs	r3, #0
 800bf98:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7f6 fef0 	bl	8002d8a <HAL_HCD_Stop>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bfae:	7bfb      	ldrb	r3, [r7, #15]
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f000 f941 	bl	800c238 <USBH_Get_USB_Status>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800bfba:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7f6 ff3a 	bl	8002e50 <HAL_HCD_GetCurrentSpeed>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d007      	beq.n	800bff2 <USBH_LL_GetSpeed+0x2e>
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d302      	bcc.n	800bfec <USBH_LL_GetSpeed+0x28>
 800bfe6:	2b02      	cmp	r3, #2
 800bfe8:	d006      	beq.n	800bff8 <USBH_LL_GetSpeed+0x34>
 800bfea:	e008      	b.n	800bffe <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bfec:	2300      	movs	r3, #0
 800bfee:	73fb      	strb	r3, [r7, #15]
    break;
 800bff0:	e008      	b.n	800c004 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bff2:	2301      	movs	r3, #1
 800bff4:	73fb      	strb	r3, [r7, #15]
    break;
 800bff6:	e005      	b.n	800c004 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bff8:	2302      	movs	r3, #2
 800bffa:	73fb      	strb	r3, [r7, #15]
    break;
 800bffc:	e002      	b.n	800c004 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800bffe:	2301      	movs	r3, #1
 800c000:	73fb      	strb	r3, [r7, #15]
    break;
 800c002:	bf00      	nop
  }
  return  speed;
 800c004:	7bfb      	ldrb	r3, [r7, #15]
}
 800c006:	4618      	mov	r0, r3
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b084      	sub	sp, #16
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c016:	2300      	movs	r3, #0
 800c018:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c024:	4618      	mov	r0, r3
 800c026:	f7f6 fecd 	bl	8002dc4 <HAL_HCD_ResetPort>
 800c02a:	4603      	mov	r3, r0
 800c02c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800c02e:	7bfb      	ldrb	r3, [r7, #15]
 800c030:	4618      	mov	r0, r3
 800c032:	f000 f901 	bl	800c238 <USBH_Get_USB_Status>
 800c036:	4603      	mov	r3, r0
 800c038:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c03a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3710      	adds	r7, #16
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	460b      	mov	r3, r1
 800c04e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c056:	78fa      	ldrb	r2, [r7, #3]
 800c058:	4611      	mov	r1, r2
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7f6 fed5 	bl	8002e0a <HAL_HCD_HC_GetXferCount>
 800c060:	4603      	mov	r3, r0
}
 800c062:	4618      	mov	r0, r3
 800c064:	3708      	adds	r7, #8
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}

0800c06a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c06a:	b590      	push	{r4, r7, lr}
 800c06c:	b089      	sub	sp, #36	; 0x24
 800c06e:	af04      	add	r7, sp, #16
 800c070:	6078      	str	r0, [r7, #4]
 800c072:	4608      	mov	r0, r1
 800c074:	4611      	mov	r1, r2
 800c076:	461a      	mov	r2, r3
 800c078:	4603      	mov	r3, r0
 800c07a:	70fb      	strb	r3, [r7, #3]
 800c07c:	460b      	mov	r3, r1
 800c07e:	70bb      	strb	r3, [r7, #2]
 800c080:	4613      	mov	r3, r2
 800c082:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c084:	2300      	movs	r3, #0
 800c086:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c088:	2300      	movs	r3, #0
 800c08a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c092:	787c      	ldrb	r4, [r7, #1]
 800c094:	78ba      	ldrb	r2, [r7, #2]
 800c096:	78f9      	ldrb	r1, [r7, #3]
 800c098:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c09a:	9302      	str	r3, [sp, #8]
 800c09c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c0a0:	9301      	str	r3, [sp, #4]
 800c0a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	4623      	mov	r3, r4
 800c0aa:	f7f6 fb1a 	bl	80026e2 <HAL_HCD_HC_Init>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c0b2:	7bfb      	ldrb	r3, [r7, #15]
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f000 f8bf 	bl	800c238 <USBH_Get_USB_Status>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c0be:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3714      	adds	r7, #20
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd90      	pop	{r4, r7, pc}

0800c0c8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c0e2:	78fa      	ldrb	r2, [r7, #3]
 800c0e4:	4611      	mov	r1, r2
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7f6 fb93 	bl	8002812 <HAL_HCD_HC_Halt>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c0f0:	7bfb      	ldrb	r3, [r7, #15]
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f000 f8a0 	bl	800c238 <USBH_Get_USB_Status>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c0fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c106:	b590      	push	{r4, r7, lr}
 800c108:	b089      	sub	sp, #36	; 0x24
 800c10a:	af04      	add	r7, sp, #16
 800c10c:	6078      	str	r0, [r7, #4]
 800c10e:	4608      	mov	r0, r1
 800c110:	4611      	mov	r1, r2
 800c112:	461a      	mov	r2, r3
 800c114:	4603      	mov	r3, r0
 800c116:	70fb      	strb	r3, [r7, #3]
 800c118:	460b      	mov	r3, r1
 800c11a:	70bb      	strb	r3, [r7, #2]
 800c11c:	4613      	mov	r3, r2
 800c11e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c120:	2300      	movs	r3, #0
 800c122:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c124:	2300      	movs	r3, #0
 800c126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c12e:	787c      	ldrb	r4, [r7, #1]
 800c130:	78ba      	ldrb	r2, [r7, #2]
 800c132:	78f9      	ldrb	r1, [r7, #3]
 800c134:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c138:	9303      	str	r3, [sp, #12]
 800c13a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c13c:	9302      	str	r3, [sp, #8]
 800c13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c140:	9301      	str	r3, [sp, #4]
 800c142:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c146:	9300      	str	r3, [sp, #0]
 800c148:	4623      	mov	r3, r4
 800c14a:	f7f6 fb85 	bl	8002858 <HAL_HCD_HC_SubmitRequest>
 800c14e:	4603      	mov	r3, r0
 800c150:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c152:	7bfb      	ldrb	r3, [r7, #15]
 800c154:	4618      	mov	r0, r3
 800c156:	f000 f86f 	bl	800c238 <USBH_Get_USB_Status>
 800c15a:	4603      	mov	r3, r0
 800c15c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3714      	adds	r7, #20
 800c164:	46bd      	mov	sp, r7
 800c166:	bd90      	pop	{r4, r7, pc}

0800c168 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	460b      	mov	r3, r1
 800c172:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c17a:	78fa      	ldrb	r2, [r7, #3]
 800c17c:	4611      	mov	r1, r2
 800c17e:	4618      	mov	r0, r3
 800c180:	f7f6 fe2e 	bl	8002de0 <HAL_HCD_HC_GetURBState>
 800c184:	4603      	mov	r3, r0
}
 800c186:	4618      	mov	r0, r3
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b082      	sub	sp, #8
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
 800c196:	460b      	mov	r3, r1
 800c198:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d103      	bne.n	800c1ac <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c1a4:	78fb      	ldrb	r3, [r7, #3]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f000 f872 	bl	800c290 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c1ac:	20c8      	movs	r0, #200	; 0xc8
 800c1ae:	f7f5 fbe7 	bl	8001980 <HAL_Delay>
  return USBH_OK;
 800c1b2:	2300      	movs	r3, #0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3708      	adds	r7, #8
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	70fb      	strb	r3, [r7, #3]
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c1d2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c1d4:	78fa      	ldrb	r2, [r7, #3]
 800c1d6:	68f9      	ldr	r1, [r7, #12]
 800c1d8:	4613      	mov	r3, r2
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	4413      	add	r3, r2
 800c1de:	00db      	lsls	r3, r3, #3
 800c1e0:	440b      	add	r3, r1
 800c1e2:	333b      	adds	r3, #59	; 0x3b
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d00a      	beq.n	800c200 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c1ea:	78fa      	ldrb	r2, [r7, #3]
 800c1ec:	68f9      	ldr	r1, [r7, #12]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	4413      	add	r3, r2
 800c1f4:	00db      	lsls	r3, r3, #3
 800c1f6:	440b      	add	r3, r1
 800c1f8:	3350      	adds	r3, #80	; 0x50
 800c1fa:	78ba      	ldrb	r2, [r7, #2]
 800c1fc:	701a      	strb	r2, [r3, #0]
 800c1fe:	e009      	b.n	800c214 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c200:	78fa      	ldrb	r2, [r7, #3]
 800c202:	68f9      	ldr	r1, [r7, #12]
 800c204:	4613      	mov	r3, r2
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	4413      	add	r3, r2
 800c20a:	00db      	lsls	r3, r3, #3
 800c20c:	440b      	add	r3, r1
 800c20e:	3351      	adds	r3, #81	; 0x51
 800c210:	78ba      	ldrb	r2, [r7, #2]
 800c212:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c214:	2300      	movs	r3, #0
}
 800c216:	4618      	mov	r0, r3
 800c218:	3714      	adds	r7, #20
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr

0800c222 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c222:	b580      	push	{r7, lr}
 800c224:	b082      	sub	sp, #8
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f7f5 fba8 	bl	8001980 <HAL_Delay>
}
 800c230:	bf00      	nop
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	4603      	mov	r3, r0
 800c240:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c242:	2300      	movs	r3, #0
 800c244:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c246:	79fb      	ldrb	r3, [r7, #7]
 800c248:	2b03      	cmp	r3, #3
 800c24a:	d817      	bhi.n	800c27c <USBH_Get_USB_Status+0x44>
 800c24c:	a201      	add	r2, pc, #4	; (adr r2, 800c254 <USBH_Get_USB_Status+0x1c>)
 800c24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c252:	bf00      	nop
 800c254:	0800c265 	.word	0x0800c265
 800c258:	0800c26b 	.word	0x0800c26b
 800c25c:	0800c271 	.word	0x0800c271
 800c260:	0800c277 	.word	0x0800c277
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c264:	2300      	movs	r3, #0
 800c266:	73fb      	strb	r3, [r7, #15]
    break;
 800c268:	e00b      	b.n	800c282 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c26a:	2302      	movs	r3, #2
 800c26c:	73fb      	strb	r3, [r7, #15]
    break;
 800c26e:	e008      	b.n	800c282 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c270:	2301      	movs	r3, #1
 800c272:	73fb      	strb	r3, [r7, #15]
    break;
 800c274:	e005      	b.n	800c282 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c276:	2302      	movs	r3, #2
 800c278:	73fb      	strb	r3, [r7, #15]
    break;
 800c27a:	e002      	b.n	800c282 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c27c:	2302      	movs	r3, #2
 800c27e:	73fb      	strb	r3, [r7, #15]
    break;
 800c280:	bf00      	nop
  }
  return usb_status;
 800c282:	7bfb      	ldrb	r3, [r7, #15]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3714      	adds	r7, #20
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	4603      	mov	r3, r0
 800c298:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800c29a:	79fb      	ldrb	r3, [r7, #7]
 800c29c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c29e:	79fb      	ldrb	r3, [r7, #7]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d102      	bne.n	800c2aa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	73fb      	strb	r3, [r7, #15]
 800c2a8:	e001      	b.n	800c2ae <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c2ae:	7bfb      	ldrb	r3, [r7, #15]
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	2101      	movs	r1, #1
 800c2b4:	4803      	ldr	r0, [pc, #12]	; (800c2c4 <MX_DriverVbusFS+0x34>)
 800c2b6:	f7f6 f999 	bl	80025ec <HAL_GPIO_WritePin>
}
 800c2ba:	bf00      	nop
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	40020800 	.word	0x40020800

0800c2c8 <__errno>:
 800c2c8:	4b01      	ldr	r3, [pc, #4]	; (800c2d0 <__errno+0x8>)
 800c2ca:	6818      	ldr	r0, [r3, #0]
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	200000d0 	.word	0x200000d0

0800c2d4 <__libc_init_array>:
 800c2d4:	b570      	push	{r4, r5, r6, lr}
 800c2d6:	4e0d      	ldr	r6, [pc, #52]	; (800c30c <__libc_init_array+0x38>)
 800c2d8:	4c0d      	ldr	r4, [pc, #52]	; (800c310 <__libc_init_array+0x3c>)
 800c2da:	1ba4      	subs	r4, r4, r6
 800c2dc:	10a4      	asrs	r4, r4, #2
 800c2de:	2500      	movs	r5, #0
 800c2e0:	42a5      	cmp	r5, r4
 800c2e2:	d109      	bne.n	800c2f8 <__libc_init_array+0x24>
 800c2e4:	4e0b      	ldr	r6, [pc, #44]	; (800c314 <__libc_init_array+0x40>)
 800c2e6:	4c0c      	ldr	r4, [pc, #48]	; (800c318 <__libc_init_array+0x44>)
 800c2e8:	f000 f8f6 	bl	800c4d8 <_init>
 800c2ec:	1ba4      	subs	r4, r4, r6
 800c2ee:	10a4      	asrs	r4, r4, #2
 800c2f0:	2500      	movs	r5, #0
 800c2f2:	42a5      	cmp	r5, r4
 800c2f4:	d105      	bne.n	800c302 <__libc_init_array+0x2e>
 800c2f6:	bd70      	pop	{r4, r5, r6, pc}
 800c2f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c2fc:	4798      	blx	r3
 800c2fe:	3501      	adds	r5, #1
 800c300:	e7ee      	b.n	800c2e0 <__libc_init_array+0xc>
 800c302:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c306:	4798      	blx	r3
 800c308:	3501      	adds	r5, #1
 800c30a:	e7f2      	b.n	800c2f2 <__libc_init_array+0x1e>
 800c30c:	0800c680 	.word	0x0800c680
 800c310:	0800c680 	.word	0x0800c680
 800c314:	0800c680 	.word	0x0800c680
 800c318:	0800c684 	.word	0x0800c684

0800c31c <malloc>:
 800c31c:	4b02      	ldr	r3, [pc, #8]	; (800c328 <malloc+0xc>)
 800c31e:	4601      	mov	r1, r0
 800c320:	6818      	ldr	r0, [r3, #0]
 800c322:	f000 b86d 	b.w	800c400 <_malloc_r>
 800c326:	bf00      	nop
 800c328:	200000d0 	.word	0x200000d0

0800c32c <free>:
 800c32c:	4b02      	ldr	r3, [pc, #8]	; (800c338 <free+0xc>)
 800c32e:	4601      	mov	r1, r0
 800c330:	6818      	ldr	r0, [r3, #0]
 800c332:	f000 b817 	b.w	800c364 <_free_r>
 800c336:	bf00      	nop
 800c338:	200000d0 	.word	0x200000d0

0800c33c <memcpy>:
 800c33c:	b510      	push	{r4, lr}
 800c33e:	1e43      	subs	r3, r0, #1
 800c340:	440a      	add	r2, r1
 800c342:	4291      	cmp	r1, r2
 800c344:	d100      	bne.n	800c348 <memcpy+0xc>
 800c346:	bd10      	pop	{r4, pc}
 800c348:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c34c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c350:	e7f7      	b.n	800c342 <memcpy+0x6>

0800c352 <memset>:
 800c352:	4402      	add	r2, r0
 800c354:	4603      	mov	r3, r0
 800c356:	4293      	cmp	r3, r2
 800c358:	d100      	bne.n	800c35c <memset+0xa>
 800c35a:	4770      	bx	lr
 800c35c:	f803 1b01 	strb.w	r1, [r3], #1
 800c360:	e7f9      	b.n	800c356 <memset+0x4>
	...

0800c364 <_free_r>:
 800c364:	b538      	push	{r3, r4, r5, lr}
 800c366:	4605      	mov	r5, r0
 800c368:	2900      	cmp	r1, #0
 800c36a:	d045      	beq.n	800c3f8 <_free_r+0x94>
 800c36c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c370:	1f0c      	subs	r4, r1, #4
 800c372:	2b00      	cmp	r3, #0
 800c374:	bfb8      	it	lt
 800c376:	18e4      	addlt	r4, r4, r3
 800c378:	f000 f8ac 	bl	800c4d4 <__malloc_lock>
 800c37c:	4a1f      	ldr	r2, [pc, #124]	; (800c3fc <_free_r+0x98>)
 800c37e:	6813      	ldr	r3, [r2, #0]
 800c380:	4610      	mov	r0, r2
 800c382:	b933      	cbnz	r3, 800c392 <_free_r+0x2e>
 800c384:	6063      	str	r3, [r4, #4]
 800c386:	6014      	str	r4, [r2, #0]
 800c388:	4628      	mov	r0, r5
 800c38a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c38e:	f000 b8a2 	b.w	800c4d6 <__malloc_unlock>
 800c392:	42a3      	cmp	r3, r4
 800c394:	d90c      	bls.n	800c3b0 <_free_r+0x4c>
 800c396:	6821      	ldr	r1, [r4, #0]
 800c398:	1862      	adds	r2, r4, r1
 800c39a:	4293      	cmp	r3, r2
 800c39c:	bf04      	itt	eq
 800c39e:	681a      	ldreq	r2, [r3, #0]
 800c3a0:	685b      	ldreq	r3, [r3, #4]
 800c3a2:	6063      	str	r3, [r4, #4]
 800c3a4:	bf04      	itt	eq
 800c3a6:	1852      	addeq	r2, r2, r1
 800c3a8:	6022      	streq	r2, [r4, #0]
 800c3aa:	6004      	str	r4, [r0, #0]
 800c3ac:	e7ec      	b.n	800c388 <_free_r+0x24>
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	685a      	ldr	r2, [r3, #4]
 800c3b2:	b10a      	cbz	r2, 800c3b8 <_free_r+0x54>
 800c3b4:	42a2      	cmp	r2, r4
 800c3b6:	d9fa      	bls.n	800c3ae <_free_r+0x4a>
 800c3b8:	6819      	ldr	r1, [r3, #0]
 800c3ba:	1858      	adds	r0, r3, r1
 800c3bc:	42a0      	cmp	r0, r4
 800c3be:	d10b      	bne.n	800c3d8 <_free_r+0x74>
 800c3c0:	6820      	ldr	r0, [r4, #0]
 800c3c2:	4401      	add	r1, r0
 800c3c4:	1858      	adds	r0, r3, r1
 800c3c6:	4282      	cmp	r2, r0
 800c3c8:	6019      	str	r1, [r3, #0]
 800c3ca:	d1dd      	bne.n	800c388 <_free_r+0x24>
 800c3cc:	6810      	ldr	r0, [r2, #0]
 800c3ce:	6852      	ldr	r2, [r2, #4]
 800c3d0:	605a      	str	r2, [r3, #4]
 800c3d2:	4401      	add	r1, r0
 800c3d4:	6019      	str	r1, [r3, #0]
 800c3d6:	e7d7      	b.n	800c388 <_free_r+0x24>
 800c3d8:	d902      	bls.n	800c3e0 <_free_r+0x7c>
 800c3da:	230c      	movs	r3, #12
 800c3dc:	602b      	str	r3, [r5, #0]
 800c3de:	e7d3      	b.n	800c388 <_free_r+0x24>
 800c3e0:	6820      	ldr	r0, [r4, #0]
 800c3e2:	1821      	adds	r1, r4, r0
 800c3e4:	428a      	cmp	r2, r1
 800c3e6:	bf04      	itt	eq
 800c3e8:	6811      	ldreq	r1, [r2, #0]
 800c3ea:	6852      	ldreq	r2, [r2, #4]
 800c3ec:	6062      	str	r2, [r4, #4]
 800c3ee:	bf04      	itt	eq
 800c3f0:	1809      	addeq	r1, r1, r0
 800c3f2:	6021      	streq	r1, [r4, #0]
 800c3f4:	605c      	str	r4, [r3, #4]
 800c3f6:	e7c7      	b.n	800c388 <_free_r+0x24>
 800c3f8:	bd38      	pop	{r3, r4, r5, pc}
 800c3fa:	bf00      	nop
 800c3fc:	20004a70 	.word	0x20004a70

0800c400 <_malloc_r>:
 800c400:	b570      	push	{r4, r5, r6, lr}
 800c402:	1ccd      	adds	r5, r1, #3
 800c404:	f025 0503 	bic.w	r5, r5, #3
 800c408:	3508      	adds	r5, #8
 800c40a:	2d0c      	cmp	r5, #12
 800c40c:	bf38      	it	cc
 800c40e:	250c      	movcc	r5, #12
 800c410:	2d00      	cmp	r5, #0
 800c412:	4606      	mov	r6, r0
 800c414:	db01      	blt.n	800c41a <_malloc_r+0x1a>
 800c416:	42a9      	cmp	r1, r5
 800c418:	d903      	bls.n	800c422 <_malloc_r+0x22>
 800c41a:	230c      	movs	r3, #12
 800c41c:	6033      	str	r3, [r6, #0]
 800c41e:	2000      	movs	r0, #0
 800c420:	bd70      	pop	{r4, r5, r6, pc}
 800c422:	f000 f857 	bl	800c4d4 <__malloc_lock>
 800c426:	4a21      	ldr	r2, [pc, #132]	; (800c4ac <_malloc_r+0xac>)
 800c428:	6814      	ldr	r4, [r2, #0]
 800c42a:	4621      	mov	r1, r4
 800c42c:	b991      	cbnz	r1, 800c454 <_malloc_r+0x54>
 800c42e:	4c20      	ldr	r4, [pc, #128]	; (800c4b0 <_malloc_r+0xb0>)
 800c430:	6823      	ldr	r3, [r4, #0]
 800c432:	b91b      	cbnz	r3, 800c43c <_malloc_r+0x3c>
 800c434:	4630      	mov	r0, r6
 800c436:	f000 f83d 	bl	800c4b4 <_sbrk_r>
 800c43a:	6020      	str	r0, [r4, #0]
 800c43c:	4629      	mov	r1, r5
 800c43e:	4630      	mov	r0, r6
 800c440:	f000 f838 	bl	800c4b4 <_sbrk_r>
 800c444:	1c43      	adds	r3, r0, #1
 800c446:	d124      	bne.n	800c492 <_malloc_r+0x92>
 800c448:	230c      	movs	r3, #12
 800c44a:	6033      	str	r3, [r6, #0]
 800c44c:	4630      	mov	r0, r6
 800c44e:	f000 f842 	bl	800c4d6 <__malloc_unlock>
 800c452:	e7e4      	b.n	800c41e <_malloc_r+0x1e>
 800c454:	680b      	ldr	r3, [r1, #0]
 800c456:	1b5b      	subs	r3, r3, r5
 800c458:	d418      	bmi.n	800c48c <_malloc_r+0x8c>
 800c45a:	2b0b      	cmp	r3, #11
 800c45c:	d90f      	bls.n	800c47e <_malloc_r+0x7e>
 800c45e:	600b      	str	r3, [r1, #0]
 800c460:	50cd      	str	r5, [r1, r3]
 800c462:	18cc      	adds	r4, r1, r3
 800c464:	4630      	mov	r0, r6
 800c466:	f000 f836 	bl	800c4d6 <__malloc_unlock>
 800c46a:	f104 000b 	add.w	r0, r4, #11
 800c46e:	1d23      	adds	r3, r4, #4
 800c470:	f020 0007 	bic.w	r0, r0, #7
 800c474:	1ac3      	subs	r3, r0, r3
 800c476:	d0d3      	beq.n	800c420 <_malloc_r+0x20>
 800c478:	425a      	negs	r2, r3
 800c47a:	50e2      	str	r2, [r4, r3]
 800c47c:	e7d0      	b.n	800c420 <_malloc_r+0x20>
 800c47e:	428c      	cmp	r4, r1
 800c480:	684b      	ldr	r3, [r1, #4]
 800c482:	bf16      	itet	ne
 800c484:	6063      	strne	r3, [r4, #4]
 800c486:	6013      	streq	r3, [r2, #0]
 800c488:	460c      	movne	r4, r1
 800c48a:	e7eb      	b.n	800c464 <_malloc_r+0x64>
 800c48c:	460c      	mov	r4, r1
 800c48e:	6849      	ldr	r1, [r1, #4]
 800c490:	e7cc      	b.n	800c42c <_malloc_r+0x2c>
 800c492:	1cc4      	adds	r4, r0, #3
 800c494:	f024 0403 	bic.w	r4, r4, #3
 800c498:	42a0      	cmp	r0, r4
 800c49a:	d005      	beq.n	800c4a8 <_malloc_r+0xa8>
 800c49c:	1a21      	subs	r1, r4, r0
 800c49e:	4630      	mov	r0, r6
 800c4a0:	f000 f808 	bl	800c4b4 <_sbrk_r>
 800c4a4:	3001      	adds	r0, #1
 800c4a6:	d0cf      	beq.n	800c448 <_malloc_r+0x48>
 800c4a8:	6025      	str	r5, [r4, #0]
 800c4aa:	e7db      	b.n	800c464 <_malloc_r+0x64>
 800c4ac:	20004a70 	.word	0x20004a70
 800c4b0:	20004a74 	.word	0x20004a74

0800c4b4 <_sbrk_r>:
 800c4b4:	b538      	push	{r3, r4, r5, lr}
 800c4b6:	4c06      	ldr	r4, [pc, #24]	; (800c4d0 <_sbrk_r+0x1c>)
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	4605      	mov	r5, r0
 800c4bc:	4608      	mov	r0, r1
 800c4be:	6023      	str	r3, [r4, #0]
 800c4c0:	f7f5 f980 	bl	80017c4 <_sbrk>
 800c4c4:	1c43      	adds	r3, r0, #1
 800c4c6:	d102      	bne.n	800c4ce <_sbrk_r+0x1a>
 800c4c8:	6823      	ldr	r3, [r4, #0]
 800c4ca:	b103      	cbz	r3, 800c4ce <_sbrk_r+0x1a>
 800c4cc:	602b      	str	r3, [r5, #0]
 800c4ce:	bd38      	pop	{r3, r4, r5, pc}
 800c4d0:	20005354 	.word	0x20005354

0800c4d4 <__malloc_lock>:
 800c4d4:	4770      	bx	lr

0800c4d6 <__malloc_unlock>:
 800c4d6:	4770      	bx	lr

0800c4d8 <_init>:
 800c4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4da:	bf00      	nop
 800c4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4de:	bc08      	pop	{r3}
 800c4e0:	469e      	mov	lr, r3
 800c4e2:	4770      	bx	lr

0800c4e4 <_fini>:
 800c4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4e6:	bf00      	nop
 800c4e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ea:	bc08      	pop	{r3}
 800c4ec:	469e      	mov	lr, r3
 800c4ee:	4770      	bx	lr
